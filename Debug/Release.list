
Release.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005240  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080053c8  080053c8  000063c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e0  080053e0  000070e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080053e0  080053e0  000063e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053e8  080053e8  000070e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e8  080053e8  000063e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053ec  080053ec  000063ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e4  20000000  080053f0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000070e4  2**0
                  CONTENTS
 10 .bss          0000021c  200000e4  200000e4  000070e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000300  20000300  000070e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000070e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000119d1  00000000  00000000  00007114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000270c  00000000  00000000  00018ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  0001b1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6d  00000000  00000000  0001c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023314  00000000  00000000  0001cc15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e09  00000000  00000000  0003ff29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8860  00000000  00000000  00052d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b592  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d04  00000000  00000000  0012b5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0012f2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e4 	.word	0x200000e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053b0 	.word	0x080053b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000e8 	.word	0x200000e8
 80001c4:	080053b0 	.word	0x080053b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <Read_AD_Conversion>:
  *
  * The filtering uses the alpha factor (Motor_xx->Config.Alfa) for exponential smoothing:
  * filtered_value = alfa * new_value + (1 - alfa) * previous_value
  */
void Read_AD_Conversion(Analog_digital_converter *ADC_xx, Motor *Motor_xx)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08c      	sub	sp, #48	@ 0x30
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	6039      	str	r1, [r7, #0]
  // Считывание значений
    HAL_ADC_Start(ADC_xx->Convertor);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4618      	mov	r0, r3
 8000504:	f001 fb70 	bl	8001be8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(ADC_xx->Convertor, 100);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2164      	movs	r1, #100	@ 0x64
 800050e:	4618      	mov	r0, r3
 8000510:	f001 fc6f 	bl	8001df2 <HAL_ADC_PollForConversion>
    unsigned int raw_value = HAL_ADC_GetValue(ADC_xx->Convertor);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4618      	mov	r0, r3
 800051a:	f001 fe05 	bl	8002128 <HAL_ADC_GetValue>
 800051e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    HAL_ADC_Stop(ADC_xx->Convertor);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4618      	mov	r0, r3
 8000526:	f001 fc31 	bl	8001d8c <HAL_ADC_Stop>
  // Обработка данных
    // Расчёт частоиспользуемых значений
      float alfa = Motor_xx->Config.Alfa;
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	62bb      	str	r3, [r7, #40]	@ 0x28
      float unalfa = 1.0f - alfa;
 8000530:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000534:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800053c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      unsigned int discrete_range =
        ADC_xx->Maximum_discrete_level -
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	685a      	ldr	r2, [r3, #4]
        ADC_xx->Minimum_discrete_level;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	68db      	ldr	r3, [r3, #12]
      unsigned int discrete_range =
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	623b      	str	r3, [r7, #32]
      float angular_range =
        Motor_xx->Config.Angular.Maximum_angular -
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	ed93 7a08 	vldr	s14, [r3, #32]
        Motor_xx->Config.Angular.Minimum_angular;
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
      float angular_range =
 8000558:	ee77 7a67 	vsub.f32	s15, s14, s15
 800055c:	edc7 7a07 	vstr	s15, [r7, #28]
    // Расчёт выходных значений
      unsigned int filtered_discrete =
        (unsigned long int)(alfa * (float)raw_value +
 8000560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000562:	ee07 3a90 	vmov	s15, r3
 8000566:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800056a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800056e:	ee27 7a27 	vmul.f32	s14, s14, s15
        unalfa * (float)ADC_xx->Discrete_level);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	691b      	ldr	r3, [r3, #16]
 8000576:	ee07 3a90 	vmov	s15, r3
 800057a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800057e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000582:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (unsigned long int)(alfa * (float)raw_value +
 8000586:	ee77 7a27 	vadd.f32	s15, s14, s15
      unsigned int filtered_discrete =
 800058a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800058e:	ee17 3a90 	vmov	r3, s15
 8000592:	61bb      	str	r3, [r7, #24]
      float norma =
        (filtered_discrete - (float)ADC_xx->Minimum_discrete_level) /
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	ee07 3a90 	vmov	s15, r3
 800059a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	ee07 3a90 	vmov	s15, r3
 80005a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005aa:	ee77 6a67 	vsub.f32	s13, s14, s15
        (float)discrete_range;
 80005ae:	6a3b      	ldr	r3, [r7, #32]
 80005b0:	ee07 3a90 	vmov	s15, r3
 80005b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float norma =
 80005b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005bc:	edc7 7a05 	vstr	s15, [r7, #20]
      float angular =
        Motor_xx->Config.Angular.Minimum_angular +
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
        norma * angular_range;
 80005c6:	edd7 6a05 	vldr	s13, [r7, #20]
 80005ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80005ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
      float angular =
 80005d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005d6:	edc7 7a04 	vstr	s15, [r7, #16]
      float filtered_angular =
        alfa * angular +
 80005da:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80005de:	edd7 7a04 	vldr	s15, [r7, #16]
 80005e2:	ee27 7a27 	vmul.f32	s14, s14, s15
        unalfa * Motor_xx->Status.Angular;
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80005ec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80005f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
      float filtered_angular =
 80005f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005f8:	edc7 7a03 	vstr	s15, [r7, #12]
  // Запись значений
    ADC_xx->Discrete_level = filtered_discrete;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	69ba      	ldr	r2, [r7, #24]
 8000600:	611a      	str	r2, [r3, #16]
    Motor_xx->Status.Angular = filtered_angular;
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	63da      	str	r2, [r3, #60]	@ 0x3c
};
 8000608:	bf00      	nop
 800060a:	3730      	adds	r7, #48	@ 0x30
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <First_mode>:
  * @note Stop condition triggered by zero angular setpoint
  *
  * @warning Ensure Left/Right/Up/Down constants are properly defined as GPIO_PinState values
  * @warning Timer comparison assumes proper Motor_AZ global variable definition
  */
void First_mode (Motor *Motor_xx, float Angular) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	ed87 0a00 	vstr	s0, [r7]
  GPIO_PinState roter =
    Motor_xx->Config.PWM.Timer == Motor_AZ.Config.PWM.Timer ?
    (Angular > 0 ? Left : Right) :
 800061c:	edd7 7a00 	vldr	s15, [r7]
 8000620:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000628:	bfcc      	ite	gt
 800062a:	2301      	movgt	r3, #1
 800062c:	2300      	movle	r3, #0
 800062e:	b2db      	uxtb	r3, r3
  GPIO_PinState roter =
 8000630:	73fb      	strb	r3, [r7, #15]
    (Angular > 0 ? Up : Down);
  if (Angular != 0) {
 8000632:	edd7 7a00 	vldr	s15, [r7]
 8000636:	eef5 7a40 	vcmp.f32	s15, #0.0
 800063a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063e:	d00e      	beq.n	800065e <First_mode+0x4e>
    if (!Motor_xx->Status.Moving) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000646:	2b00      	cmp	r3, #0
 8000648:	d105      	bne.n	8000656 <First_mode+0x46>
      Start_motor(Motor_xx, roter);
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	4619      	mov	r1, r3
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f8d2 	bl	80007f8 <Start_motor>
    };
  }
  else {
    Stop_motor(Motor_xx);
  };
};
 8000654:	e006      	b.n	8000664 <First_mode+0x54>
      Up_fequency(Motor_xx);
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 f90f 	bl	800087a <Up_fequency>
};
 800065c:	e002      	b.n	8000664 <First_mode+0x54>
    Stop_motor(Motor_xx);
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f000 f8f0 	bl	8000844 <Stop_motor>
};
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <Moving_away_from_borders>:
  *
  * @sideeffect
  * - Generates a brief 100ms activation pulse on Motor_AZ
  * - Modifies the AZ motor enable state temporarily
  */
void Moving_away_from_borders(Motor *Motor_xx, GPIO_PinState roter) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Motor_xx->Config.GPIO.DIR_port, Motor_xx->Config.GPIO.DIR_pin, roter);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	6818      	ldr	r0, [r3, #0]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	b29b      	uxth	r3, r3
 8000682:	78fa      	ldrb	r2, [r7, #3]
 8000684:	4619      	mov	r1, r3
 8000686:	f002 fae3 	bl	8002c50 <HAL_GPIO_WritePin>
  Set_PWM_frequency(Motor_xx, Motor_xx->Config.PWM.Minimum_frequency);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4619      	mov	r1, r3
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f869 	bl	8000768 <Set_PWM_frequency>
  HAL_GPIO_WritePin(Motor_AZ.Config.GPIO.ENA_port, Motor_AZ.Config.GPIO.ENA_pin, Work);
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <Moving_away_from_borders+0x64>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	4a0d      	ldr	r2, [pc, #52]	@ (80006d0 <Moving_away_from_borders+0x64>)
 800069c:	68d2      	ldr	r2, [r2, #12]
 800069e:	b291      	uxth	r1, r2
 80006a0:	2200      	movs	r2, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fad4 	bl	8002c50 <HAL_GPIO_WritePin>

  HAL_Delay(100);
 80006a8:	2064      	movs	r0, #100	@ 0x64
 80006aa:	f001 fa35 	bl	8001b18 <HAL_Delay>

  HAL_GPIO_WritePin(Motor_AZ.Config.GPIO.ENA_port, Motor_AZ.Config.GPIO.ENA_pin, Sleep);
 80006ae:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <Moving_away_from_borders+0x64>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <Moving_away_from_borders+0x64>)
 80006b4:	68d2      	ldr	r2, [r2, #12]
 80006b6:	b291      	uxth	r1, r2
 80006b8:	2201      	movs	r2, #1
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fac8 	bl	8002c50 <HAL_GPIO_WritePin>
  Motor_xx->Status.Moving = 0;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
};
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000028 	.word	0x20000028

080006d4 <Second_mode>:
  *
  * @warning Left/Right must be properly defined as GPIO_PinState values
  * @warning Guidance_accuracy should be set appropriately for application
  * @warning Border avoidance uses reverse direction (-roter)
  */
void Second_mode(float Angular, Motor *Motor_xx){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	ed87 0a01 	vstr	s0, [r7, #4]
 80006de:	6038      	str	r0, [r7, #0]
	float Difference = Angular - Motor_xx->Status.Angular;
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80006e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80006ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006ee:	edc7 7a03 	vstr	s15, [r7, #12]
	GPIO_PinState roter = Difference > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80006f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80006f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006fe:	bfcc      	ite	gt
 8000700:	2301      	movgt	r3, #1
 8000702:	2300      	movle	r3, #0
 8000704:	b2db      	uxtb	r3, r3
 8000706:	72fb      	strb	r3, [r7, #11]

	if (Working_area(Motor_xx))	{
 8000708:	6838      	ldr	r0, [r7, #0]
 800070a:	f000 f8d8 	bl	80008be <Working_area>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d01e      	beq.n	8000752 <Second_mode+0x7e>
	  if (fabsf(Difference) > Motor_xx->Config.Angular.Guidance_accuracy) {
 8000714:	edd7 7a03 	vldr	s15, [r7, #12]
 8000718:	eeb0 7ae7 	vabs.f32	s14, s15
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072a:	dd0e      	ble.n	800074a <Second_mode+0x76>
	    if (!Motor_xx->Status.Moving) {
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000732:	2b00      	cmp	r3, #0
 8000734:	d105      	bne.n	8000742 <Second_mode+0x6e>
	      Start_motor(Motor_xx, roter);
 8000736:	7afb      	ldrb	r3, [r7, #11]
 8000738:	4619      	mov	r1, r3
 800073a:	6838      	ldr	r0, [r7, #0]
 800073c:	f000 f85c 	bl	80007f8 <Start_motor>
	  };
	}
	else {
	  Moving_away_from_borders(Motor_xx, -roter);
	};
};
 8000740:	e00e      	b.n	8000760 <Second_mode+0x8c>
	      Up_fequency(Motor_xx);
 8000742:	6838      	ldr	r0, [r7, #0]
 8000744:	f000 f899 	bl	800087a <Up_fequency>
};
 8000748:	e00a      	b.n	8000760 <Second_mode+0x8c>
	    Stop_motor(Motor_xx);
 800074a:	6838      	ldr	r0, [r7, #0]
 800074c:	f000 f87a 	bl	8000844 <Stop_motor>
};
 8000750:	e006      	b.n	8000760 <Second_mode+0x8c>
	  Moving_away_from_borders(Motor_xx, -roter);
 8000752:	7afb      	ldrb	r3, [r7, #11]
 8000754:	425b      	negs	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	4619      	mov	r1, r3
 800075a:	6838      	ldr	r0, [r7, #0]
 800075c:	f7ff ff86 	bl	800066c <Moving_away_from_borders>
};
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <Set_PWM_frequency>:
  *
  * @note The function assumes the timer clock source is PCLK1 (APB1) and uses its frequency for calculations.
  * @note The duty cycle is fixed at 50%. Modify CCR1 manually if a different duty cycle is needed.
  */
void Set_PWM_frequency(Motor *Motor_xx, uint32_t freq)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
  unsigned int prescaler = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  unsigned int period = (HAL_RCC_GetPCLK1Freq() * 2 / freq) - 1;
 8000776:	f002 fef5 	bl	8003564 <HAL_RCC_GetPCLK1Freq>
 800077a:	4603      	mov	r3, r0
 800077c:	005a      	lsls	r2, r3, #1
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	fbb2 f3f3 	udiv	r3, r2, r3
 8000784:	3b01      	subs	r3, #1
 8000786:	60bb      	str	r3, [r7, #8]

  while (period > 0xFFFF) {
 8000788:	e00f      	b.n	80007aa <Set_PWM_frequency+0x42>
    prescaler++;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3301      	adds	r3, #1
 800078e:	60fb      	str	r3, [r7, #12]
    period = (HAL_RCC_GetPCLK1Freq() * 2 / (freq * (prescaler + 1))) - 1;
 8000790:	f002 fee8 	bl	8003564 <HAL_RCC_GetPCLK1Freq>
 8000794:	4603      	mov	r3, r0
 8000796:	005a      	lsls	r2, r3, #1
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3301      	adds	r3, #1
 800079c:	6839      	ldr	r1, [r7, #0]
 800079e:	fb01 f303 	mul.w	r3, r1, r3
 80007a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a6:	3b01      	subs	r3, #1
 80007a8:	60bb      	str	r3, [r7, #8]
  while (period > 0xFFFF) {
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80007b0:	d2eb      	bcs.n	800078a <Set_PWM_frequency+0x22>
  }

  HAL_TIM_PWM_Stop(Motor_xx->Config.PWM.Timer, TIM_CHANNEL_1);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	691b      	ldr	r3, [r3, #16]
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 f813 	bl	80037e4 <HAL_TIM_PWM_Stop>
  Motor_xx->Config.PWM.Timer->Instance->PSC = prescaler;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	691b      	ldr	r3, [r3, #16]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	629a      	str	r2, [r3, #40]	@ 0x28
  Motor_xx->Config.PWM.Timer->Instance->ARR = period;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	68ba      	ldr	r2, [r7, #8]
 80007d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  Motor_xx->Config.PWM.Timer->Instance->CCR1 = period / 2;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	68ba      	ldr	r2, [r7, #8]
 80007da:	0852      	lsrs	r2, r2, #1
 80007dc:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(Motor_xx->Config.PWM.Timer, TIM_CHANNEL_1);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 ff35 	bl	8003654 <HAL_TIM_PWM_Start>

  Motor_xx->Status.Frequency = freq;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	635a      	str	r2, [r3, #52]	@ 0x34
};
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <Start_motor>:
  * @note The function uses minimum PWM frequency for safe motor start
  * @note Work state should be defined as GPIO_PIN_SET or GPIO_PIN_RESET
  * @note Motor direction depends on driver wiring and roter parameter interpretation
  */
void Start_motor(Motor *Motor_xx, GPIO_PinState roter)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
  Set_PWM_frequency(Motor_xx, Motor_xx->Config.PWM.Minimum_frequency);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4619      	mov	r1, r3
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ffac 	bl	8000768 <Set_PWM_frequency>
  HAL_GPIO_WritePin(Motor_xx->Config.GPIO.DIR_port, Motor_xx->Config.GPIO.DIR_pin, roter);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6818      	ldr	r0, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	b29b      	uxth	r3, r3
 800081a:	78fa      	ldrb	r2, [r7, #3]
 800081c:	4619      	mov	r1, r3
 800081e:	f002 fa17 	bl	8002c50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Motor_xx->Config.GPIO.ENA_port, Motor_xx->Config.GPIO.ENA_pin, Work);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6858      	ldr	r0, [r3, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	b29b      	uxth	r3, r3
 800082c:	2200      	movs	r2, #0
 800082e:	4619      	mov	r1, r3
 8000830:	f002 fa0e 	bl	8002c50 <HAL_GPIO_WritePin>
  Motor_xx->Status.Moving = 1;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2201      	movs	r2, #1
 8000838:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
};
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <Stop_motor>:
  * @note Sleep state should be defined as GPIO_PIN_SET or GPIO_PIN_RESET
  * @note Setting frequency to 0 before stopping PWM ensures smooth deceleration
  * @warning Ensure proper ENA pin state configuration to avoid unexpected motor behavior
  */
void Stop_motor(Motor *Motor_xx)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop(Motor_xx->Config.PWM.Timer, TIM_CHANNEL_1);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	691b      	ldr	r3, [r3, #16]
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f002 ffc6 	bl	80037e4 <HAL_TIM_PWM_Stop>
  HAL_GPIO_WritePin(Motor_xx->Config.GPIO.ENA_port, Motor_xx->Config.GPIO.ENA_pin, Sleep);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6858      	ldr	r0, [r3, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	b29b      	uxth	r3, r3
 8000862:	2201      	movs	r2, #1
 8000864:	4619      	mov	r1, r3
 8000866:	f002 f9f3 	bl	8002c50 <HAL_GPIO_WritePin>
  Motor_xx->Status.Moving = 0;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
};
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <Up_fequency>:
  * @note Frequency change occurs only if current frequency is below maximum limit
  * @note Actual increment step is determined by Config.PWM.Increment_frequency
  * @note Function uses safe frequency clamping to prevent exceeding limits
  */
void Up_fequency(Motor *Motor_xx)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b084      	sub	sp, #16
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
  if (Motor_xx->Status.Frequency < Motor_xx->Config.PWM.Maximum_frequency) {
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	429a      	cmp	r2, r3
 800088c:	d213      	bcs.n	80008b6 <Up_fequency+0x3c>
    unsigned int freq = Motor_xx->Status.Frequency + Motor_xx->Config.PWM.Increment_frequency;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	4413      	add	r3, r2
 8000898:	60fb      	str	r3, [r7, #12]
    freq = MIN(freq, Motor_xx->Config.PWM.Maximum_frequency);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	4293      	cmp	r3, r2
 80008a2:	bf28      	it	cs
 80008a4:	4613      	movcs	r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
    Set_PWM_frequency(Motor_xx, freq);
 80008a8:	68f9      	ldr	r1, [r7, #12]
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ff5c 	bl	8000768 <Set_PWM_frequency>
    HAL_Delay(10);
 80008b0:	200a      	movs	r0, #10
 80008b2:	f001 f931 	bl	8001b18 <HAL_Delay>
  };
};
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <Working_area>:
  * - Deviation: Safety margin from mechanical limits
  *
  * @note The function returns a boolean value as char type (1/0)
  * @note The comparison is exclusive (angle must be strictly between bounds)
  */
char Working_area(Motor *Motor_xx) {
 80008be:	b480      	push	{r7}
 80008c0:	b087      	sub	sp, #28
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  float current_angle = Motor_xx->Status.Angular;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008ca:	617b      	str	r3, [r7, #20]

  float lower_bound = Motor_xx->Config.Angular.Minimum_angular + Motor_xx->Config.Angular.Deviation;;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80008d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008dc:	edc7 7a04 	vstr	s15, [r7, #16]
  float upper_bound = Motor_xx->Config.Angular.Maximum_angular - Motor_xx->Config.Angular.Deviation;;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	ed93 7a08 	vldr	s14, [r3, #32]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80008ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008f0:	edc7 7a03 	vstr	s15, [r7, #12]

  return (current_angle > lower_bound) && (current_angle < upper_bound);
 80008f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80008f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80008fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000904:	dd0a      	ble.n	800091c <Working_area+0x5e>
 8000906:	ed97 7a05 	vldr	s14, [r7, #20]
 800090a:	edd7 7a03 	vldr	s15, [r7, #12]
 800090e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000916:	d501      	bpl.n	800091c <Working_area+0x5e>
 8000918:	2301      	movs	r3, #1
 800091a:	e000      	b.n	800091e <Working_area+0x60>
 800091c:	2300      	movs	r3, #0
 800091e:	b2db      	uxtb	r3, r3
};
 8000920:	4618      	mov	r0, r3
 8000922:	371c      	adds	r7, #28
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <Transfer_to_raspberry_pi>:
 *      Author: Danil
 */

#include "Transfer_to_Raspberry_Pi.h"

void Transfer_to_raspberry_pi(UART_HandleTypeDef *huart, Target_data *Targit, Motor *Motor_az, Motor *Motor_el) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	603b      	str	r3, [r7, #0]
  if (!Targit->transmitting) {
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000940:	2b00      	cmp	r3, #0
 8000942:	f040 80e5 	bne.w	8000b10 <Transfer_to_raspberry_pi+0x1e4>
	size_t Size_Tx_UART = sizeof(Targit->Tx_data);
 8000946:	230d      	movs	r3, #13
 8000948:	617b      	str	r3, [r7, #20]

    uint16_t angular_az = (uint16_t)fabs(Motor_az->Status.Angular * 10);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000950:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000958:	eef0 7ae7 	vabs.f32	s15, s15
 800095c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000960:	ee17 3a90 	vmov	r3, s15
 8000964:	827b      	strh	r3, [r7, #18]
    uint16_t angular_el = (uint16_t)fabs(Motor_el->Status.Angular * 10);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800096c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000974:	eef0 7ae7 	vabs.f32	s15, s15
 8000978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800097c:	ee17 3a90 	vmov	r3, s15
 8000980:	823b      	strh	r3, [r7, #16]

    Targit->Tx_data[1] = (Motor_az->Status.Angular >= 0) ? '1' : '0';
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000988:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800098c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000990:	db01      	blt.n	8000996 <Transfer_to_raspberry_pi+0x6a>
 8000992:	2231      	movs	r2, #49	@ 0x31
 8000994:	e000      	b.n	8000998 <Transfer_to_raspberry_pi+0x6c>
 8000996:	2230      	movs	r2, #48	@ 0x30
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	759a      	strb	r2, [r3, #22]
    Targit->Tx_data[2] = '0' + (angular_az / 1000) % 10;
 800099c:	8a7b      	ldrh	r3, [r7, #18]
 800099e:	4a5e      	ldr	r2, [pc, #376]	@ (8000b18 <Transfer_to_raspberry_pi+0x1ec>)
 80009a0:	fba2 2303 	umull	r2, r3, r2, r3
 80009a4:	099b      	lsrs	r3, r3, #6
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b5c      	ldr	r3, [pc, #368]	@ (8000b1c <Transfer_to_raspberry_pi+0x1f0>)
 80009aa:	fba3 1302 	umull	r1, r3, r3, r2
 80009ae:	08d9      	lsrs	r1, r3, #3
 80009b0:	460b      	mov	r3, r1
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	440b      	add	r3, r1
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3330      	adds	r3, #48	@ 0x30
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	75da      	strb	r2, [r3, #23]
    Targit->Tx_data[3] = '0' + (angular_az / 100) % 10;
 80009c6:	8a7b      	ldrh	r3, [r7, #18]
 80009c8:	4a55      	ldr	r2, [pc, #340]	@ (8000b20 <Transfer_to_raspberry_pi+0x1f4>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	095b      	lsrs	r3, r3, #5
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b52      	ldr	r3, [pc, #328]	@ (8000b1c <Transfer_to_raspberry_pi+0x1f0>)
 80009d4:	fba3 1302 	umull	r1, r3, r3, r2
 80009d8:	08d9      	lsrs	r1, r3, #3
 80009da:	460b      	mov	r3, r1
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	440b      	add	r3, r1
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	3330      	adds	r3, #48	@ 0x30
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	761a      	strb	r2, [r3, #24]
    Targit->Tx_data[4] = '0' + (angular_az / 10) % 10;
 80009f0:	8a7b      	ldrh	r3, [r7, #18]
 80009f2:	4a4a      	ldr	r2, [pc, #296]	@ (8000b1c <Transfer_to_raspberry_pi+0x1f0>)
 80009f4:	fba2 2303 	umull	r2, r3, r2, r3
 80009f8:	08db      	lsrs	r3, r3, #3
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b47      	ldr	r3, [pc, #284]	@ (8000b1c <Transfer_to_raspberry_pi+0x1f0>)
 80009fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000a02:	08d9      	lsrs	r1, r3, #3
 8000a04:	460b      	mov	r3, r1
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	440b      	add	r3, r1
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	3330      	adds	r3, #48	@ 0x30
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	765a      	strb	r2, [r3, #25]
    Targit->Tx_data[5] = '0' + (angular_az) % 10;
 8000a1a:	8a7a      	ldrh	r2, [r7, #18]
 8000a1c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b1c <Transfer_to_raspberry_pi+0x1f0>)
 8000a1e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a22:	08d9      	lsrs	r1, r3, #3
 8000a24:	460b      	mov	r3, r1
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	440b      	add	r3, r1
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	3330      	adds	r3, #48	@ 0x30
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	769a      	strb	r2, [r3, #26]

    Targit->Tx_data[6] = (Motor_el->Status.Angular >= 0) ? '1' : '0';
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000a40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a48:	db01      	blt.n	8000a4e <Transfer_to_raspberry_pi+0x122>
 8000a4a:	2231      	movs	r2, #49	@ 0x31
 8000a4c:	e000      	b.n	8000a50 <Transfer_to_raspberry_pi+0x124>
 8000a4e:	2230      	movs	r2, #48	@ 0x30
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	76da      	strb	r2, [r3, #27]
    Targit->Tx_data[7] = '0' +  (angular_el / 1000) % 10;
 8000a54:	8a3b      	ldrh	r3, [r7, #16]
 8000a56:	4a30      	ldr	r2, [pc, #192]	@ (8000b18 <Transfer_to_raspberry_pi+0x1ec>)
 8000a58:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5c:	099b      	lsrs	r3, r3, #6
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	4b2e      	ldr	r3, [pc, #184]	@ (8000b1c <Transfer_to_raspberry_pi+0x1f0>)
 8000a62:	fba3 1302 	umull	r1, r3, r3, r2
 8000a66:	08d9      	lsrs	r1, r3, #3
 8000a68:	460b      	mov	r3, r1
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	3330      	adds	r3, #48	@ 0x30
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	771a      	strb	r2, [r3, #28]
    Targit->Tx_data[8] = '0' +  (angular_el / 100) % 10;
 8000a7e:	8a3b      	ldrh	r3, [r7, #16]
 8000a80:	4a27      	ldr	r2, [pc, #156]	@ (8000b20 <Transfer_to_raspberry_pi+0x1f4>)
 8000a82:	fba2 2303 	umull	r2, r3, r2, r3
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	4b24      	ldr	r3, [pc, #144]	@ (8000b1c <Transfer_to_raspberry_pi+0x1f0>)
 8000a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8000a90:	08d9      	lsrs	r1, r3, #3
 8000a92:	460b      	mov	r3, r1
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	440b      	add	r3, r1
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	3330      	adds	r3, #48	@ 0x30
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	775a      	strb	r2, [r3, #29]
    Targit->Tx_data[9] = '0' +  (angular_el / 10) % 10;
 8000aa8:	8a3b      	ldrh	r3, [r7, #16]
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8000b1c <Transfer_to_raspberry_pi+0x1f0>)
 8000aac:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab0:	08db      	lsrs	r3, r3, #3
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <Transfer_to_raspberry_pi+0x1f0>)
 8000ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aba:	08d9      	lsrs	r1, r3, #3
 8000abc:	460b      	mov	r3, r1
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	3330      	adds	r3, #48	@ 0x30
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	779a      	strb	r2, [r3, #30]
    Targit->Tx_data[10] = '0' + (angular_el) % 10;
 8000ad2:	8a3a      	ldrh	r2, [r7, #16]
 8000ad4:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <Transfer_to_raspberry_pi+0x1f0>)
 8000ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8000ada:	08d9      	lsrs	r1, r3, #3
 8000adc:	460b      	mov	r3, r1
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	3330      	adds	r3, #48	@ 0x30
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	77da      	strb	r2, [r3, #31]
    if (HAL_UART_Transmit_IT(huart, (uint8_t*)Targit->Tx_data, Size_Tx_UART) == HAL_OK)
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	3315      	adds	r3, #21
 8000af6:	697a      	ldr	r2, [r7, #20]
 8000af8:	b292      	uxth	r2, r2
 8000afa:	4619      	mov	r1, r3
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f003 fcc7 	bl	8004490 <HAL_UART_Transmit_IT>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d103      	bne.n	8000b10 <Transfer_to_raspberry_pi+0x1e4>
    {
      Targit->transmitting = 1;
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    };
  };
};
 8000b10:	bf00      	nop
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	10624dd3 	.word	0x10624dd3
 8000b1c:	cccccccd 	.word	0xcccccccd
 8000b20:	51eb851f 	.word	0x51eb851f

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  Size_Rx_UART = sizeof(Target.Rx_data);
 8000b2a:	4b5e      	ldr	r3, [pc, #376]	@ (8000ca4 <main+0x180>)
 8000b2c:	2215      	movs	r2, #21
 8000b2e:	601a      	str	r2, [r3, #0]

  Motor_AZ.Config.PWM.Timer = &htim3; ADC_AZ.Convertor = &hadc1;
 8000b30:	4b5d      	ldr	r3, [pc, #372]	@ (8000ca8 <main+0x184>)
 8000b32:	4a5e      	ldr	r2, [pc, #376]	@ (8000cac <main+0x188>)
 8000b34:	611a      	str	r2, [r3, #16]
 8000b36:	4b5e      	ldr	r3, [pc, #376]	@ (8000cb0 <main+0x18c>)
 8000b38:	4a5e      	ldr	r2, [pc, #376]	@ (8000cb4 <main+0x190>)
 8000b3a:	601a      	str	r2, [r3, #0]
  Motor_EL.Config.PWM.Timer = &htim2; ADC_EL.Convertor = &hadc2;
 8000b3c:	4b5e      	ldr	r3, [pc, #376]	@ (8000cb8 <main+0x194>)
 8000b3e:	4a5f      	ldr	r2, [pc, #380]	@ (8000cbc <main+0x198>)
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	4b5f      	ldr	r3, [pc, #380]	@ (8000cc0 <main+0x19c>)
 8000b44:	4a5f      	ldr	r2, [pc, #380]	@ (8000cc4 <main+0x1a0>)
 8000b46:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b48:	f000 ff74 	bl	8001a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4c:	f000 f8c0 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b50:	f000 fb52 	bl	80011f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b54:	f000 f926 	bl	8000da4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b58:	f000 f976 	bl	8000e48 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8000b5c:	f000 fb22 	bl	80011a4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b60:	f000 f9c4 	bl	8000eec <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b64:	f000 fa1c 	bl	8000fa0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b68:	f000 fa74 	bl	8001054 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b6c:	f000 fac6 	bl	80010fc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)Target.Rx_data, Size_Rx_UART);
 8000b70:	4b4c      	ldr	r3, [pc, #304]	@ (8000ca4 <main+0x180>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	4953      	ldr	r1, [pc, #332]	@ (8000cc8 <main+0x1a4>)
 8000b7a:	4854      	ldr	r0, [pc, #336]	@ (8000ccc <main+0x1a8>)
 8000b7c:	f003 fcbe 	bl	80044fc <HAL_UART_Receive_IT>
    * @param[in,out] Motor_AZ Azimuth motor control structure
    * @param[in,out] Motor_EL Elevation motor control structure
    */
  while (1)
  {
    Read_AD_Conversion(&ADC_AZ, &Motor_AZ);
 8000b80:	4949      	ldr	r1, [pc, #292]	@ (8000ca8 <main+0x184>)
 8000b82:	484b      	ldr	r0, [pc, #300]	@ (8000cb0 <main+0x18c>)
 8000b84:	f7ff fcb6 	bl	80004f4 <Read_AD_Conversion>
    Read_AD_Conversion(&ADC_EL, &Motor_EL);
 8000b88:	494b      	ldr	r1, [pc, #300]	@ (8000cb8 <main+0x194>)
 8000b8a:	484d      	ldr	r0, [pc, #308]	@ (8000cc0 <main+0x19c>)
 8000b8c:	f7ff fcb2 	bl	80004f4 <Read_AD_Conversion>

    char Working_zon_az = Working_area(&Motor_AZ);
 8000b90:	4845      	ldr	r0, [pc, #276]	@ (8000ca8 <main+0x184>)
 8000b92:	f7ff fe94 	bl	80008be <Working_area>
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
    char Working_zon_el = Working_area(&Motor_EL);
 8000b9a:	4847      	ldr	r0, [pc, #284]	@ (8000cb8 <main+0x194>)
 8000b9c:	f7ff fe8f 	bl	80008be <Working_area>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	71bb      	strb	r3, [r7, #6]

    if (Working_zon_az && Working_zon_el)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d033      	beq.n	8000c12 <main+0xee>
 8000baa:	79bb      	ldrb	r3, [r7, #6]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d030      	beq.n	8000c12 <main+0xee>
    {
      switch (Target.Rx_data[15])
 8000bb0:	4b45      	ldr	r3, [pc, #276]	@ (8000cc8 <main+0x1a4>)
 8000bb2:	7bdb      	ldrb	r3, [r3, #15]
 8000bb4:	2b30      	cmp	r3, #48	@ 0x30
 8000bb6:	d002      	beq.n	8000bbe <main+0x9a>
 8000bb8:	2b31      	cmp	r3, #49	@ 0x31
 8000bba:	d011      	beq.n	8000be0 <main+0xbc>
 8000bbc:	e021      	b.n	8000c02 <main+0xde>
      {
        case '0':
          First_mode(&Motor_AZ, Target.Azimuth);
 8000bbe:	4b42      	ldr	r3, [pc, #264]	@ (8000cc8 <main+0x1a4>)
 8000bc0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000bc4:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc8:	4837      	ldr	r0, [pc, #220]	@ (8000ca8 <main+0x184>)
 8000bca:	f7ff fd21 	bl	8000610 <First_mode>
          First_mode(&Motor_EL, Target.Elevation);
 8000bce:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc8 <main+0x1a4>)
 8000bd0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd8:	4837      	ldr	r0, [pc, #220]	@ (8000cb8 <main+0x194>)
 8000bda:	f7ff fd19 	bl	8000610 <First_mode>
    	  break;
 8000bde:	e017      	b.n	8000c10 <main+0xec>
        case '1':
          Second_mode(Target.Azimuth, &Motor_AZ);
 8000be0:	4b39      	ldr	r3, [pc, #228]	@ (8000cc8 <main+0x1a4>)
 8000be2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000be6:	4830      	ldr	r0, [pc, #192]	@ (8000ca8 <main+0x184>)
 8000be8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bec:	f7ff fd72 	bl	80006d4 <Second_mode>
          Second_mode(Target.Elevation, &Motor_EL);
 8000bf0:	4b35      	ldr	r3, [pc, #212]	@ (8000cc8 <main+0x1a4>)
 8000bf2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000bf6:	4830      	ldr	r0, [pc, #192]	@ (8000cb8 <main+0x194>)
 8000bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bfc:	f7ff fd6a 	bl	80006d4 <Second_mode>
          break;
 8000c00:	e006      	b.n	8000c10 <main+0xec>
        case '2':
          // Проваливается в default
        default:
          Transfer_to_raspberry_pi(&huart2, &Target, &Motor_AZ, &Motor_EL);
 8000c02:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb8 <main+0x194>)
 8000c04:	4a28      	ldr	r2, [pc, #160]	@ (8000ca8 <main+0x184>)
 8000c06:	4930      	ldr	r1, [pc, #192]	@ (8000cc8 <main+0x1a4>)
 8000c08:	4830      	ldr	r0, [pc, #192]	@ (8000ccc <main+0x1a8>)
 8000c0a:	f7ff fe8f 	bl	800092c <Transfer_to_raspberry_pi>
          break;
 8000c0e:	bf00      	nop
      switch (Target.Rx_data[15])
 8000c10:	e047      	b.n	8000ca2 <main+0x17e>
      };
    }
    else
    {
      HAL_GPIO_WritePin(Motor_AZ.Config.GPIO.ENA_port, Motor_AZ.Config.GPIO.ENA_pin, Sleep);
 8000c12:	4b25      	ldr	r3, [pc, #148]	@ (8000ca8 <main+0x184>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	4a24      	ldr	r2, [pc, #144]	@ (8000ca8 <main+0x184>)
 8000c18:	68d2      	ldr	r2, [r2, #12]
 8000c1a:	b291      	uxth	r1, r2
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f002 f816 	bl	8002c50 <HAL_GPIO_WritePin>
      Motor_AZ.Status.Moving = 0;
 8000c24:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <main+0x184>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      HAL_GPIO_WritePin(Motor_EL.Config.GPIO.ENA_port, Motor_EL.Config.GPIO.ENA_pin, Sleep);
 8000c2c:	4b22      	ldr	r3, [pc, #136]	@ (8000cb8 <main+0x194>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	4a21      	ldr	r2, [pc, #132]	@ (8000cb8 <main+0x194>)
 8000c32:	68d2      	ldr	r2, [r2, #12]
 8000c34:	b291      	uxth	r1, r2
 8000c36:	2201      	movs	r2, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 f809 	bl	8002c50 <HAL_GPIO_WritePin>
      Motor_EL.Status.Moving = 0;
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <main+0x194>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      HAL_Delay(500);
 8000c46:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c4a:	f000 ff65 	bl	8001b18 <HAL_Delay>

      if (!Working_zon_az) Moving_away_from_borders(&Motor_AZ, Motor_AZ.Status.Angular > 0 ? Right : Left);
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d113      	bne.n	8000c7c <main+0x158>
 8000c54:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <main+0x184>)
 8000c56:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000c5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c62:	bfcc      	ite	gt
 8000c64:	2301      	movgt	r3, #1
 8000c66:	2300      	movle	r3, #0
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	f083 0301 	eor.w	r3, r3, #1
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	4619      	mov	r1, r3
 8000c74:	480c      	ldr	r0, [pc, #48]	@ (8000ca8 <main+0x184>)
 8000c76:	f7ff fcf9 	bl	800066c <Moving_away_from_borders>
 8000c7a:	e781      	b.n	8000b80 <main+0x5c>
      else Moving_away_from_borders(&Motor_EL, Motor_EL.Status.Angular > 0 ? Down : Up);
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <main+0x194>)
 8000c7e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000c82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c8a:	bfcc      	ite	gt
 8000c8c:	2301      	movgt	r3, #1
 8000c8e:	2300      	movle	r3, #0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	f083 0301 	eor.w	r3, r3, #1
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4806      	ldr	r0, [pc, #24]	@ (8000cb8 <main+0x194>)
 8000c9e:	f7ff fce5 	bl	800066c <Moving_away_from_borders>
  {
 8000ca2:	e76d      	b.n	8000b80 <main+0x5c>
 8000ca4:	200002f8 	.word	0x200002f8
 8000ca8:	20000028 	.word	0x20000028
 8000cac:	200001d8 	.word	0x200001d8
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000100 	.word	0x20000100
 8000cb8:	20000068 	.word	0x20000068
 8000cbc:	20000190 	.word	0x20000190
 8000cc0:	20000014 	.word	0x20000014
 8000cc4:	20000148 	.word	0x20000148
 8000cc8:	200000a8 	.word	0x200000a8
 8000ccc:	200002b0 	.word	0x200002b0

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b094      	sub	sp, #80	@ 0x50
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0320 	add.w	r3, r7, #32
 8000cda:	2230      	movs	r2, #48	@ 0x30
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f004 fb3a 	bl	8005358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	4b28      	ldr	r3, [pc, #160]	@ (8000d9c <SystemClock_Config+0xcc>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfc:	4a27      	ldr	r2, [pc, #156]	@ (8000d9c <SystemClock_Config+0xcc>)
 8000cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d04:	4b25      	ldr	r3, [pc, #148]	@ (8000d9c <SystemClock_Config+0xcc>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	4b22      	ldr	r3, [pc, #136]	@ (8000da0 <SystemClock_Config+0xd0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a21      	ldr	r2, [pc, #132]	@ (8000da0 <SystemClock_Config+0xd0>)
 8000d1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4b1f      	ldr	r3, [pc, #124]	@ (8000da0 <SystemClock_Config+0xd0>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d36:	2302      	movs	r3, #2
 8000d38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d40:	2308      	movs	r3, #8
 8000d42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d44:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d52:	f107 0320 	add.w	r3, r7, #32
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 ff94 	bl	8002c84 <HAL_RCC_OscConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d62:	f000 fbad 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d66:	230f      	movs	r3, #15
 8000d68:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d72:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	2105      	movs	r1, #5
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 f9f5 	bl	8003174 <HAL_RCC_ClockConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d90:	f000 fb96 	bl	80014c0 <Error_Handler>
  }
}
 8000d94:	bf00      	nop
 8000d96:	3750      	adds	r7, #80	@ 0x50
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40007000 	.word	0x40007000

08000da4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	463b      	mov	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000db6:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <MX_ADC1_Init+0x98>)
 8000db8:	4a21      	ldr	r2, [pc, #132]	@ (8000e40 <MX_ADC1_Init+0x9c>)
 8000dba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <MX_ADC1_Init+0x98>)
 8000dbe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000dc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <MX_ADC1_Init+0x98>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dca:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <MX_ADC1_Init+0x98>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <MX_ADC1_Init+0x98>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <MX_ADC1_Init+0x98>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dde:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <MX_ADC1_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de4:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <MX_ADC1_Init+0x98>)
 8000de6:	4a17      	ldr	r2, [pc, #92]	@ (8000e44 <MX_ADC1_Init+0xa0>)
 8000de8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dea:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <MX_ADC1_Init+0x98>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <MX_ADC1_Init+0x98>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <MX_ADC1_Init+0x98>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <MX_ADC1_Init+0x98>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e04:	480d      	ldr	r0, [pc, #52]	@ (8000e3c <MX_ADC1_Init+0x98>)
 8000e06:	f000 feab 	bl	8001b60 <HAL_ADC_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e10:	f000 fb56 	bl	80014c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e14:	230e      	movs	r3, #14
 8000e16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e20:	463b      	mov	r3, r7
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <MX_ADC1_Init+0x98>)
 8000e26:	f001 f9ab 	bl	8002180 <HAL_ADC_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e30:	f000 fb46 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000100 	.word	0x20000100
 8000e40:	40012000 	.word	0x40012000
 8000e44:	0f000001 	.word	0x0f000001

08000e48 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <MX_ADC2_Init+0x98>)
 8000e5c:	4a21      	ldr	r2, [pc, #132]	@ (8000ee4 <MX_ADC2_Init+0x9c>)
 8000e5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <MX_ADC2_Init+0x98>)
 8000e62:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e66:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <MX_ADC2_Init+0x98>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <MX_ADC2_Init+0x98>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <MX_ADC2_Init+0x98>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <MX_ADC2_Init+0x98>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <MX_ADC2_Init+0x98>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <MX_ADC2_Init+0x98>)
 8000e8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ee8 <MX_ADC2_Init+0xa0>)
 8000e8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_ADC2_Init+0x98>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_ADC2_Init+0x98>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_ADC2_Init+0x98>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_ADC2_Init+0x98>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ea8:	480d      	ldr	r0, [pc, #52]	@ (8000ee0 <MX_ADC2_Init+0x98>)
 8000eaa:	f000 fe59 	bl	8001b60 <HAL_ADC_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000eb4:	f000 fb04 	bl	80014c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000eb8:	230f      	movs	r3, #15
 8000eba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <MX_ADC2_Init+0x98>)
 8000eca:	f001 f959 	bl	8002180 <HAL_ADC_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000ed4:	f000 faf4 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000148 	.word	0x20000148
 8000ee4:	40012100 	.word	0x40012100
 8000ee8:	0f000001 	.word	0x0f000001

08000eec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef2:	f107 0320 	add.w	r3, r7, #32
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
 8000f0a:	615a      	str	r2, [r3, #20]
 8000f0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f0e:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <MX_TIM2_Init+0xb0>)
 8000f10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000f16:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <MX_TIM2_Init+0xb0>)
 8000f18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <MX_TIM2_Init+0xb0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	@ (8000f9c <MX_TIM2_Init+0xb0>)
 8000f26:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <MX_TIM2_Init+0xb0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <MX_TIM2_Init+0xb0>)
 8000f34:	2280      	movs	r2, #128	@ 0x80
 8000f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f38:	4818      	ldr	r0, [pc, #96]	@ (8000f9c <MX_TIM2_Init+0xb0>)
 8000f3a:	f002 fb3b 	bl	80035b4 <HAL_TIM_PWM_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000f44:	f000 fabc 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f50:	f107 0320 	add.w	r3, r7, #32
 8000f54:	4619      	mov	r1, r3
 8000f56:	4811      	ldr	r0, [pc, #68]	@ (8000f9c <MX_TIM2_Init+0xb0>)
 8000f58:	f003 f9ba 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000f62:	f000 faad 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f66:	2360      	movs	r3, #96	@ 0x60
 8000f68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000f6a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <MX_TIM2_Init+0xb0>)
 8000f80:	f002 fe36 	bl	8003bf0 <HAL_TIM_PWM_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000f8a:	f000 fa99 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f8e:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <MX_TIM2_Init+0xb0>)
 8000f90:	f000 fc0a 	bl	80017a8 <HAL_TIM_MspPostInit>

}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	@ 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000190 	.word	0x20000190

08000fa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	@ 0x28
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]
 8000fbe:	615a      	str	r2, [r3, #20]
 8000fc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fc2:	4b22      	ldr	r3, [pc, #136]	@ (800104c <MX_TIM3_Init+0xac>)
 8000fc4:	4a22      	ldr	r2, [pc, #136]	@ (8001050 <MX_TIM3_Init+0xb0>)
 8000fc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000fc8:	4b20      	ldr	r3, [pc, #128]	@ (800104c <MX_TIM3_Init+0xac>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fce:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <MX_TIM3_Init+0xac>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800104c <MX_TIM3_Init+0xac>)
 8000fd6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <MX_TIM3_Init+0xac>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <MX_TIM3_Init+0xac>)
 8000fe4:	2280      	movs	r2, #128	@ 0x80
 8000fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fe8:	4818      	ldr	r0, [pc, #96]	@ (800104c <MX_TIM3_Init+0xac>)
 8000fea:	f002 fae3 	bl	80035b4 <HAL_TIM_PWM_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ff4:	f000 fa64 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001000:	f107 0320 	add.w	r3, r7, #32
 8001004:	4619      	mov	r1, r3
 8001006:	4811      	ldr	r0, [pc, #68]	@ (800104c <MX_TIM3_Init+0xac>)
 8001008:	f003 f962 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001012:	f000 fa55 	bl	80014c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001016:	2360      	movs	r3, #96	@ 0x60
 8001018:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800101a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800101e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2200      	movs	r2, #0
 800102c:	4619      	mov	r1, r3
 800102e:	4807      	ldr	r0, [pc, #28]	@ (800104c <MX_TIM3_Init+0xac>)
 8001030:	f002 fdde 	bl	8003bf0 <HAL_TIM_PWM_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800103a:	f000 fa41 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800103e:	4803      	ldr	r0, [pc, #12]	@ (800104c <MX_TIM3_Init+0xac>)
 8001040:	f000 fbb2 	bl	80017a8 <HAL_TIM_MspPostInit>

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	@ 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200001d8 	.word	0x200001d8
 8001050:	40000400 	.word	0x40000400

08001054 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	@ 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2224      	movs	r2, #36	@ 0x24
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f004 f978 	bl	8005358 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001070:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <MX_TIM4_Init+0xa0>)
 8001072:	4a21      	ldr	r2, [pc, #132]	@ (80010f8 <MX_TIM4_Init+0xa4>)
 8001074:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001076:	4b1f      	ldr	r3, [pc, #124]	@ (80010f4 <MX_TIM4_Init+0xa0>)
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <MX_TIM4_Init+0xa0>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001082:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <MX_TIM4_Init+0xa0>)
 8001084:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001088:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <MX_TIM4_Init+0xa0>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001090:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <MX_TIM4_Init+0xa0>)
 8001092:	2200      	movs	r2, #0
 8001094:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001096:	2301      	movs	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800109e:	2301      	movs	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010ae:	2301      	movs	r3, #1
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <MX_TIM4_Init+0xa0>)
 80010c2:	f002 fbff 	bl	80038c4 <HAL_TIM_Encoder_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80010cc:	f000 f9f8 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <MX_TIM4_Init+0xa0>)
 80010de:	f003 f8f7 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80010e8:	f000 f9ea 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3730      	adds	r7, #48	@ 0x30
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000220 	.word	0x20000220
 80010f8:	40000800 	.word	0x40000800

080010fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08c      	sub	sp, #48	@ 0x30
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	2224      	movs	r2, #36	@ 0x24
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f004 f924 	bl	8005358 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001118:	4b20      	ldr	r3, [pc, #128]	@ (800119c <MX_TIM5_Init+0xa0>)
 800111a:	4a21      	ldr	r2, [pc, #132]	@ (80011a0 <MX_TIM5_Init+0xa4>)
 800111c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800111e:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <MX_TIM5_Init+0xa0>)
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <MX_TIM5_Init+0xa0>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800112a:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <MX_TIM5_Init+0xa0>)
 800112c:	f04f 32ff 	mov.w	r2, #4294967295
 8001130:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <MX_TIM5_Init+0xa0>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001138:	4b18      	ldr	r3, [pc, #96]	@ (800119c <MX_TIM5_Init+0xa0>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800113e:	2301      	movs	r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001146:	2301      	movs	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001156:	2301      	movs	r3, #1
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	4619      	mov	r1, r3
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <MX_TIM5_Init+0xa0>)
 800116a:	f002 fbab 	bl	80038c4 <HAL_TIM_Encoder_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001174:	f000 f9a4 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	@ (800119c <MX_TIM5_Init+0xa0>)
 8001186:	f003 f8a3 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001190:	f000 f996 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	3730      	adds	r7, #48	@ 0x30
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000268 	.word	0x20000268
 80011a0:	40000c00 	.word	0x40000c00

080011a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011aa:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <MX_USART2_UART_Init+0x50>)
 80011ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80011ae:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011b0:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80011b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c8:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011dc:	f003 f908 	bl	80043f0 <HAL_UART_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011e6:	f000 f96b 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200002b0 	.word	0x200002b0
 80011f4:	40004400 	.word	0x40004400

080011f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	@ 0x30
 80011fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
 8001212:	4b52      	ldr	r3, [pc, #328]	@ (800135c <MX_GPIO_Init+0x164>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a51      	ldr	r2, [pc, #324]	@ (800135c <MX_GPIO_Init+0x164>)
 8001218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b4f      	ldr	r3, [pc, #316]	@ (800135c <MX_GPIO_Init+0x164>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	4b4b      	ldr	r3, [pc, #300]	@ (800135c <MX_GPIO_Init+0x164>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a4a      	ldr	r2, [pc, #296]	@ (800135c <MX_GPIO_Init+0x164>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b48      	ldr	r3, [pc, #288]	@ (800135c <MX_GPIO_Init+0x164>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b44      	ldr	r3, [pc, #272]	@ (800135c <MX_GPIO_Init+0x164>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a43      	ldr	r2, [pc, #268]	@ (800135c <MX_GPIO_Init+0x164>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b41      	ldr	r3, [pc, #260]	@ (800135c <MX_GPIO_Init+0x164>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b3d      	ldr	r3, [pc, #244]	@ (800135c <MX_GPIO_Init+0x164>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a3c      	ldr	r2, [pc, #240]	@ (800135c <MX_GPIO_Init+0x164>)
 800126c:	f043 0310 	orr.w	r3, r3, #16
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b3a      	ldr	r3, [pc, #232]	@ (800135c <MX_GPIO_Init+0x164>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b36      	ldr	r3, [pc, #216]	@ (800135c <MX_GPIO_Init+0x164>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a35      	ldr	r2, [pc, #212]	@ (800135c <MX_GPIO_Init+0x164>)
 8001288:	f043 0308 	orr.w	r3, r3, #8
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b33      	ldr	r3, [pc, #204]	@ (800135c <MX_GPIO_Init+0x164>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b2f      	ldr	r3, [pc, #188]	@ (800135c <MX_GPIO_Init+0x164>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a2e      	ldr	r2, [pc, #184]	@ (800135c <MX_GPIO_Init+0x164>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b2c      	ldr	r3, [pc, #176]	@ (800135c <MX_GPIO_Init+0x164>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Work_permit_GPIO_Port, Work_permit_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2102      	movs	r1, #2
 80012ba:	4829      	ldr	r0, [pc, #164]	@ (8001360 <MX_GPIO_Init+0x168>)
 80012bc:	f001 fcc8 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_AZ_Pin|DIR_EL_Pin|Trigger_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	f44f 510c 	mov.w	r1, #8960	@ 0x2300
 80012c6:	4827      	ldr	r0, [pc, #156]	@ (8001364 <MX_GPIO_Init+0x16c>)
 80012c8:	f001 fcc2 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ENA_AZ_Pin|ENA_EL_Pin, GPIO_PIN_SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80012d2:	4824      	ldr	r0, [pc, #144]	@ (8001364 <MX_GPIO_Init+0x16c>)
 80012d4:	f001 fcbc 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_green_Pin|LD3_orange_Pin|LD5_red_Pin|LD6_blue_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80012de:	4822      	ldr	r0, [pc, #136]	@ (8001368 <MX_GPIO_Init+0x170>)
 80012e0:	f001 fcb6 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Trigger_position_Pin */
  GPIO_InitStruct.Pin = Trigger_position_Pin;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Trigger_position_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	481a      	ldr	r0, [pc, #104]	@ (8001360 <MX_GPIO_Init+0x168>)
 80012f8:	f001 fb0e 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pin : Work_permit_Pin */
  GPIO_InitStruct.Pin = Work_permit_Pin;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Work_permit_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4813      	ldr	r0, [pc, #76]	@ (8001360 <MX_GPIO_Init+0x168>)
 8001314:	f001 fb00 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_AZ_Pin DIR_EL_Pin ENA_AZ_Pin ENA_EL_Pin
                           Trigger_Pin */
  GPIO_InitStruct.Pin = DIR_AZ_Pin|DIR_EL_Pin|ENA_AZ_Pin|ENA_EL_Pin
 8001318:	f44f 536c 	mov.w	r3, #15104	@ 0x3b00
 800131c:	61fb      	str	r3, [r7, #28]
                          |Trigger_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	480c      	ldr	r0, [pc, #48]	@ (8001364 <MX_GPIO_Init+0x16c>)
 8001332:	f001 faf1 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_green_Pin LD3_orange_Pin LD5_red_Pin LD6_blue_Pin */
  GPIO_InitStruct.Pin = LD4_green_Pin|LD3_orange_Pin|LD5_red_Pin|LD6_blue_Pin;
 8001336:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	@ (8001368 <MX_GPIO_Init+0x170>)
 8001350:	f001 fae2 	bl	8002918 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001354:	bf00      	nop
 8001356:	3730      	adds	r7, #48	@ 0x30
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40020800 	.word	0x40020800
 8001364:	40021000 	.word	0x40021000
 8001368:	40020c00 	.word	0x40020c00

0800136c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	Target.Rx_data[Size_Rx_UART - 1] = '\0';
 8001374:	4b45      	ldr	r3, [pc, #276]	@ (800148c <HAL_UART_RxCpltCallback+0x120>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3b01      	subs	r3, #1
 800137a:	4a45      	ldr	r2, [pc, #276]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 800137c:	2100      	movs	r1, #0
 800137e:	54d1      	strb	r1, [r2, r3]

	Target.Azimuth =   (Target.Rx_data[3]  - '0') * 100.0f +
 8001380:	4b43      	ldr	r3, [pc, #268]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 8001382:	78db      	ldrb	r3, [r3, #3]
 8001384:	3b30      	subs	r3, #48	@ 0x30
 8001386:	ee07 3a90 	vmov	s15, r3
 800138a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138e:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001494 <HAL_UART_RxCpltCallback+0x128>
 8001392:	ee27 7a87 	vmul.f32	s14, s15, s14
			(Target.Rx_data[4]  - '0') * 10.0f +
 8001396:	4b3e      	ldr	r3, [pc, #248]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 8001398:	791b      	ldrb	r3, [r3, #4]
 800139a:	3b30      	subs	r3, #48	@ 0x30
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80013a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Target.Azimuth =   (Target.Rx_data[3]  - '0') * 100.0f +
 80013ac:	ee37 7a27 	vadd.f32	s14, s14, s15
			(Target.Rx_data[5]  - '0') +
 80013b0:	4b37      	ldr	r3, [pc, #220]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 80013b2:	795b      	ldrb	r3, [r3, #5]
 80013b4:	3b30      	subs	r3, #48	@ 0x30
			(Target.Rx_data[4]  - '0') * 10.0f +
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013be:	ee37 7a27 	vadd.f32	s14, s14, s15
			(Target.Rx_data[6]  - '0') * 0.1f;
 80013c2:	4b33      	ldr	r3, [pc, #204]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 80013c4:	799b      	ldrb	r3, [r3, #6]
 80013c6:	3b30      	subs	r3, #48	@ 0x30
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d0:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001498 <HAL_UART_RxCpltCallback+0x12c>
 80013d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
			(Target.Rx_data[5]  - '0') +
 80013d8:	ee77 7a27 	vadd.f32	s15, s14, s15
	Target.Azimuth =   (Target.Rx_data[3]  - '0') * 100.0f +
 80013dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 80013de:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	if (Target.Rx_data[2] == '-') Target.Azimuth = -Target.Azimuth;
 80013e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 80013e4:	789b      	ldrb	r3, [r3, #2]
 80013e6:	2b2d      	cmp	r3, #45	@ 0x2d
 80013e8:	d107      	bne.n	80013fa <HAL_UART_RxCpltCallback+0x8e>
 80013ea:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 80013ec:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80013f0:	eef1 7a67 	vneg.f32	s15, s15
 80013f4:	4b26      	ldr	r3, [pc, #152]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 80013f6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	Target.Elevation = (Target.Rx_data[10] - '0') * 100.0f +
 80013fa:	4b25      	ldr	r3, [pc, #148]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 80013fc:	7a9b      	ldrb	r3, [r3, #10]
 80013fe:	3b30      	subs	r3, #48	@ 0x30
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001408:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001494 <HAL_UART_RxCpltCallback+0x128>
 800140c:	ee27 7a87 	vmul.f32	s14, s15, s14
			(Target.Rx_data[11] - '0') * 10.0f +
 8001410:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 8001412:	7adb      	ldrb	r3, [r3, #11]
 8001414:	3b30      	subs	r3, #48	@ 0x30
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001422:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Target.Elevation = (Target.Rx_data[10] - '0') * 100.0f +
 8001426:	ee37 7a27 	vadd.f32	s14, s14, s15
			(Target.Rx_data[12] - '0') +
 800142a:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 800142c:	7b1b      	ldrb	r3, [r3, #12]
 800142e:	3b30      	subs	r3, #48	@ 0x30
			(Target.Rx_data[11] - '0') * 10.0f +
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001438:	ee37 7a27 	vadd.f32	s14, s14, s15
			(Target.Rx_data[13] - '0') * 0.1f;
 800143c:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 800143e:	7b5b      	ldrb	r3, [r3, #13]
 8001440:	3b30      	subs	r3, #48	@ 0x30
 8001442:	ee07 3a90 	vmov	s15, r3
 8001446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144a:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001498 <HAL_UART_RxCpltCallback+0x12c>
 800144e:	ee67 7aa6 	vmul.f32	s15, s15, s13
			(Target.Rx_data[12] - '0') +
 8001452:	ee77 7a27 	vadd.f32	s15, s14, s15
	Target.Elevation = (Target.Rx_data[10] - '0') * 100.0f +
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 8001458:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	if (Target.Rx_data[9] == '-') Target.Elevation = -Target.Elevation;
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 800145e:	7a5b      	ldrb	r3, [r3, #9]
 8001460:	2b2d      	cmp	r3, #45	@ 0x2d
 8001462:	d107      	bne.n	8001474 <HAL_UART_RxCpltCallback+0x108>
 8001464:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 8001466:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800146a:	eef1 7a67 	vneg.f32	s15, s15
 800146e:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 8001470:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	HAL_UART_Receive_IT(&huart2, (uint8_t*)Target.Rx_data, Size_Rx_UART);
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_UART_RxCpltCallback+0x120>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	b29b      	uxth	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	4904      	ldr	r1, [pc, #16]	@ (8001490 <HAL_UART_RxCpltCallback+0x124>)
 800147e:	4807      	ldr	r0, [pc, #28]	@ (800149c <HAL_UART_RxCpltCallback+0x130>)
 8001480:	f003 f83c 	bl	80044fc <HAL_UART_Receive_IT>
};
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200002f8 	.word	0x200002f8
 8001490:	200000a8 	.word	0x200000a8
 8001494:	42c80000 	.word	0x42c80000
 8001498:	3dcccccd 	.word	0x3dcccccd
 800149c:	200002b0 	.word	0x200002b0

080014a0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    Target.transmitting = 0;  // Сброс флага после передачи
 80014a8:	4b04      	ldr	r3, [pc, #16]	@ (80014bc <HAL_UART_TxCpltCallback+0x1c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	200000a8 	.word	0x200000a8

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <Error_Handler+0x8>

080014cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <HAL_MspInit+0x4c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	4a0f      	ldr	r2, [pc, #60]	@ (8001518 <HAL_MspInit+0x4c>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <HAL_MspInit+0x4c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_MspInit+0x4c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	4a08      	ldr	r2, [pc, #32]	@ (8001518 <HAL_MspInit+0x4c>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_MspInit+0x4c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	@ 0x30
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a36      	ldr	r2, [pc, #216]	@ (8001614 <HAL_ADC_MspInit+0xf8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d130      	bne.n	80015a0 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	4b35      	ldr	r3, [pc, #212]	@ (8001618 <HAL_ADC_MspInit+0xfc>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	4a34      	ldr	r2, [pc, #208]	@ (8001618 <HAL_ADC_MspInit+0xfc>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154c:	6453      	str	r3, [r2, #68]	@ 0x44
 800154e:	4b32      	ldr	r3, [pc, #200]	@ (8001618 <HAL_ADC_MspInit+0xfc>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	4b2e      	ldr	r3, [pc, #184]	@ (8001618 <HAL_ADC_MspInit+0xfc>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a2d      	ldr	r2, [pc, #180]	@ (8001618 <HAL_ADC_MspInit+0xfc>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b2b      	ldr	r3, [pc, #172]	@ (8001618 <HAL_ADC_MspInit+0xfc>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ADC_AZ_Pin;
 8001576:	2310      	movs	r3, #16
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157a:	2303      	movs	r3, #3
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_AZ_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	4619      	mov	r1, r3
 8001588:	4824      	ldr	r0, [pc, #144]	@ (800161c <HAL_ADC_MspInit+0x100>)
 800158a:	f001 f9c5 	bl	8002918 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2012      	movs	r0, #18
 8001594:	f001 f8f7 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001598:	2012      	movs	r0, #18
 800159a:	f001 f910 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800159e:	e034      	b.n	800160a <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001620 <HAL_ADC_MspInit+0x104>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d12f      	bne.n	800160a <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <HAL_ADC_MspInit+0xfc>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b2:	4a19      	ldr	r2, [pc, #100]	@ (8001618 <HAL_ADC_MspInit+0xfc>)
 80015b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ba:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <HAL_ADC_MspInit+0xfc>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <HAL_ADC_MspInit+0xfc>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <HAL_ADC_MspInit+0xfc>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <HAL_ADC_MspInit+0xfc>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_EL_Pin;
 80015e2:	2320      	movs	r3, #32
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015e6:	2303      	movs	r3, #3
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_EL_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	4809      	ldr	r0, [pc, #36]	@ (800161c <HAL_ADC_MspInit+0x100>)
 80015f6:	f001 f98f 	bl	8002918 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	2012      	movs	r0, #18
 8001600:	f001 f8c1 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001604:	2012      	movs	r0, #18
 8001606:	f001 f8da 	bl	80027be <HAL_NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3730      	adds	r7, #48	@ 0x30
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40012000 	.word	0x40012000
 8001618:	40023800 	.word	0x40023800
 800161c:	40020800 	.word	0x40020800
 8001620:	40012100 	.word	0x40012100

08001624 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001634:	d116      	bne.n	8001664 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <HAL_TIM_PWM_MspInit+0x80>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	4a19      	ldr	r2, [pc, #100]	@ (80016a4 <HAL_TIM_PWM_MspInit+0x80>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6413      	str	r3, [r2, #64]	@ 0x40
 8001646:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <HAL_TIM_PWM_MspInit+0x80>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	201c      	movs	r0, #28
 8001658:	f001 f895 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800165c:	201c      	movs	r0, #28
 800165e:	f001 f8ae 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001662:	e01a      	b.n	800169a <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM3)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0f      	ldr	r2, [pc, #60]	@ (80016a8 <HAL_TIM_PWM_MspInit+0x84>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d115      	bne.n	800169a <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_TIM_PWM_MspInit+0x80>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	4a0b      	ldr	r2, [pc, #44]	@ (80016a4 <HAL_TIM_PWM_MspInit+0x80>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6413      	str	r3, [r2, #64]	@ 0x40
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <HAL_TIM_PWM_MspInit+0x80>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	201d      	movs	r0, #29
 8001690:	f001 f879 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001694:	201d      	movs	r0, #29
 8001696:	f001 f892 	bl	80027be <HAL_NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40000400 	.word	0x40000400

080016ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	@ 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a32      	ldr	r2, [pc, #200]	@ (8001794 <HAL_TIM_Encoder_MspInit+0xe8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12c      	bne.n	8001728 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	4b31      	ldr	r3, [pc, #196]	@ (8001798 <HAL_TIM_Encoder_MspInit+0xec>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	4a30      	ldr	r2, [pc, #192]	@ (8001798 <HAL_TIM_Encoder_MspInit+0xec>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016de:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <HAL_TIM_Encoder_MspInit+0xec>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001798 <HAL_TIM_Encoder_MspInit+0xec>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a29      	ldr	r2, [pc, #164]	@ (8001798 <HAL_TIM_Encoder_MspInit+0xec>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <HAL_TIM_Encoder_MspInit+0xec>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_EL_A_Pin|Encoder_EL_B_Pin;
 8001706:	23c0      	movs	r3, #192	@ 0xc0
 8001708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001716:	2302      	movs	r3, #2
 8001718:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	4619      	mov	r1, r3
 8001720:	481e      	ldr	r0, [pc, #120]	@ (800179c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001722:	f001 f8f9 	bl	8002918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001726:	e030      	b.n	800178a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1c      	ldr	r2, [pc, #112]	@ (80017a0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d12b      	bne.n	800178a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b18      	ldr	r3, [pc, #96]	@ (8001798 <HAL_TIM_Encoder_MspInit+0xec>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	4a17      	ldr	r2, [pc, #92]	@ (8001798 <HAL_TIM_Encoder_MspInit+0xec>)
 800173c:	f043 0308 	orr.w	r3, r3, #8
 8001740:	6413      	str	r3, [r2, #64]	@ 0x40
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <HAL_TIM_Encoder_MspInit+0xec>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b11      	ldr	r3, [pc, #68]	@ (8001798 <HAL_TIM_Encoder_MspInit+0xec>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4a10      	ldr	r2, [pc, #64]	@ (8001798 <HAL_TIM_Encoder_MspInit+0xec>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <HAL_TIM_Encoder_MspInit+0xec>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_AZ_A_Pin|Encoder_AZ_B_Pin;
 800176a:	2303      	movs	r3, #3
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800177a:	2302      	movs	r3, #2
 800177c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	4807      	ldr	r0, [pc, #28]	@ (80017a4 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001786:	f001 f8c7 	bl	8002918 <HAL_GPIO_Init>
}
 800178a:	bf00      	nop
 800178c:	3730      	adds	r7, #48	@ 0x30
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40000800 	.word	0x40000800
 8001798:	40023800 	.word	0x40023800
 800179c:	40020400 	.word	0x40020400
 80017a0:	40000c00 	.word	0x40000c00
 80017a4:	40020000 	.word	0x40020000

080017a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	@ 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017c8:	d11e      	bne.n	8001808 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b22      	ldr	r3, [pc, #136]	@ (8001858 <HAL_TIM_MspPostInit+0xb0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a21      	ldr	r2, [pc, #132]	@ (8001858 <HAL_TIM_MspPostInit+0xb0>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <HAL_TIM_MspPostInit+0xb0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM_EL_Pin;
 80017e6:	2320      	movs	r3, #32
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017f6:	2301      	movs	r3, #1
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM_EL_GPIO_Port, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	4816      	ldr	r0, [pc, #88]	@ (800185c <HAL_TIM_MspPostInit+0xb4>)
 8001802:	f001 f889 	bl	8002918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001806:	e022      	b.n	800184e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a14      	ldr	r2, [pc, #80]	@ (8001860 <HAL_TIM_MspPostInit+0xb8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d11d      	bne.n	800184e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <HAL_TIM_MspPostInit+0xb0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a0f      	ldr	r2, [pc, #60]	@ (8001858 <HAL_TIM_MspPostInit+0xb0>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b0d      	ldr	r3, [pc, #52]	@ (8001858 <HAL_TIM_MspPostInit+0xb0>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_AZ_Pin;
 800182e:	2340      	movs	r3, #64	@ 0x40
 8001830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800183e:	2302      	movs	r3, #2
 8001840:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM_AZ_GPIO_Port, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	4804      	ldr	r0, [pc, #16]	@ (800185c <HAL_TIM_MspPostInit+0xb4>)
 800184a:	f001 f865 	bl	8002918 <HAL_GPIO_Init>
}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	@ 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800
 800185c:	40020000 	.word	0x40020000
 8001860:	40000400 	.word	0x40000400

08001864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	@ 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1d      	ldr	r2, [pc, #116]	@ (80018f8 <HAL_UART_MspInit+0x94>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d133      	bne.n	80018ee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b1c      	ldr	r3, [pc, #112]	@ (80018fc <HAL_UART_MspInit+0x98>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	4a1b      	ldr	r2, [pc, #108]	@ (80018fc <HAL_UART_MspInit+0x98>)
 8001890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001894:	6413      	str	r3, [r2, #64]	@ 0x40
 8001896:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <HAL_UART_MspInit+0x98>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b15      	ldr	r3, [pc, #84]	@ (80018fc <HAL_UART_MspInit+0x98>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a14      	ldr	r2, [pc, #80]	@ (80018fc <HAL_UART_MspInit+0x98>)
 80018ac:	f043 0308 	orr.w	r3, r3, #8
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <HAL_UART_MspInit+0x98>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018be:	2360      	movs	r3, #96	@ 0x60
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ce:	2307      	movs	r3, #7
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	4809      	ldr	r0, [pc, #36]	@ (8001900 <HAL_UART_MspInit+0x9c>)
 80018da:	f001 f81d 	bl	8002918 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	2026      	movs	r0, #38	@ 0x26
 80018e4:	f000 ff4f 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018e8:	2026      	movs	r0, #38	@ 0x26
 80018ea:	f000 ff68 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018ee:	bf00      	nop
 80018f0:	3728      	adds	r7, #40	@ 0x28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40004400 	.word	0x40004400
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020c00 	.word	0x40020c00

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <NMI_Handler+0x4>

0800190c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <MemManage_Handler+0x4>

0800191c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <BusFault_Handler+0x4>

08001924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <UsageFault_Handler+0x4>

0800192c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195a:	f000 f8bd 	bl	8001ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001968:	4803      	ldr	r0, [pc, #12]	@ (8001978 <ADC_IRQHandler+0x14>)
 800196a:	f000 facd 	bl	8001f08 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800196e:	4803      	ldr	r0, [pc, #12]	@ (800197c <ADC_IRQHandler+0x18>)
 8001970:	f000 faca 	bl	8001f08 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000100 	.word	0x20000100
 800197c:	20000148 	.word	0x20000148

08001980 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <TIM2_IRQHandler+0x10>)
 8001986:	f002 f843 	bl	8003a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000190 	.word	0x20000190

08001994 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <TIM3_IRQHandler+0x10>)
 800199a:	f002 f839 	bl	8003a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200001d8 	.word	0x200001d8

080019a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019ac:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <USART2_IRQHandler+0x10>)
 80019ae:	f002 fdcb 	bl	8004548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200002b0 	.word	0x200002b0

080019bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c0:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <SystemInit+0x20>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c6:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <SystemInit+0x20>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack     /* set stack pointer */
 80019e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019e4:	f7ff ffea 	bl	80019bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e8:	480c      	ldr	r0, [pc, #48]	@ (8001a1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ea:	490d      	ldr	r1, [pc, #52]	@ (8001a20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a00:	4c0a      	ldr	r4, [pc, #40]	@ (8001a2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f003 fcab 	bl	8005368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a12:	f7ff f887 	bl	8000b24 <main>
  bx  lr    
 8001a16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a20:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8001a24:	080053f0 	.word	0x080053f0
  ldr r2, =_sbss
 8001a28:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8001a2c:	20000300 	.word	0x20000300

08001a30 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <CAN1_RX0_IRQHandler>
	...

08001a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a38:	4b0e      	ldr	r3, [pc, #56]	@ (8001a74 <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <HAL_Init+0x40>)
 8001a3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a44:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <HAL_Init+0x40>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0a      	ldr	r2, [pc, #40]	@ (8001a74 <HAL_Init+0x40>)
 8001a4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <HAL_Init+0x40>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a07      	ldr	r2, [pc, #28]	@ (8001a74 <HAL_Init+0x40>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f000 fe87 	bl	8002770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a62:	200f      	movs	r0, #15
 8001a64:	f000 f808 	bl	8001a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a68:	f7ff fd30 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023c00 	.word	0x40023c00

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_InitTick+0x54>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <HAL_InitTick+0x58>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 fe9f 	bl	80027da <HAL_SYSTICK_Config>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00e      	b.n	8001ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d80a      	bhi.n	8001ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aac:	2200      	movs	r2, #0
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f000 fe67 	bl	8002786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab8:	4a06      	ldr	r2, [pc, #24]	@ (8001ad4 <HAL_InitTick+0x5c>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e000      	b.n	8001ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200000d8 	.word	0x200000d8
 8001ad0:	200000e0 	.word	0x200000e0
 8001ad4:	200000dc 	.word	0x200000dc

08001ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_IncTick+0x20>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_IncTick+0x24>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a04      	ldr	r2, [pc, #16]	@ (8001afc <HAL_IncTick+0x24>)
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200000e0 	.word	0x200000e0
 8001afc:	200002fc 	.word	0x200002fc

08001b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return uwTick;
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <HAL_GetTick+0x14>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	200002fc 	.word	0x200002fc

08001b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff ffee 	bl	8001b00 <HAL_GetTick>
 8001b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b30:	d005      	beq.n	8001b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b32:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <HAL_Delay+0x44>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b3e:	bf00      	nop
 8001b40:	f7ff ffde 	bl	8001b00 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d8f7      	bhi.n	8001b40 <HAL_Delay+0x28>
  {
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200000e0 	.word	0x200000e0

08001b60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e033      	b.n	8001bde <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fccc 	bl	800151c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d118      	bne.n	8001bd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ba6:	f023 0302 	bic.w	r3, r3, #2
 8001baa:	f043 0202 	orr.w	r2, r3, #2
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 fc06 	bl	80023c4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	f023 0303 	bic.w	r3, r3, #3
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bce:	e001      	b.n	8001bd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_Start+0x1a>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e0b2      	b.n	8001d68 <HAL_ADC_Start+0x180>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d018      	beq.n	8001c4a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c28:	4b52      	ldr	r3, [pc, #328]	@ (8001d74 <HAL_ADC_Start+0x18c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a52      	ldr	r2, [pc, #328]	@ (8001d78 <HAL_ADC_Start+0x190>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0c9a      	lsrs	r2, r3, #18
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c3c:	e002      	b.n	8001c44 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f9      	bne.n	8001c3e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d17a      	bne.n	8001d4e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c96:	d106      	bne.n	8001ca6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9c:	f023 0206 	bic.w	r2, r3, #6
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ca4:	e002      	b.n	8001cac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb4:	4b31      	ldr	r3, [pc, #196]	@ (8001d7c <HAL_ADC_Start+0x194>)
 8001cb6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001cc0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d12a      	bne.n	8001d24 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a2b      	ldr	r2, [pc, #172]	@ (8001d80 <HAL_ADC_Start+0x198>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d015      	beq.n	8001d04 <HAL_ADC_Start+0x11c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a29      	ldr	r2, [pc, #164]	@ (8001d84 <HAL_ADC_Start+0x19c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d105      	bne.n	8001cee <HAL_ADC_Start+0x106>
 8001ce2:	4b26      	ldr	r3, [pc, #152]	@ (8001d7c <HAL_ADC_Start+0x194>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00a      	beq.n	8001d04 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a25      	ldr	r2, [pc, #148]	@ (8001d88 <HAL_ADC_Start+0x1a0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d136      	bne.n	8001d66 <HAL_ADC_Start+0x17e>
 8001cf8:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <HAL_ADC_Start+0x194>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d130      	bne.n	8001d66 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d129      	bne.n	8001d66 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	e020      	b.n	8001d66 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a15      	ldr	r2, [pc, #84]	@ (8001d80 <HAL_ADC_Start+0x198>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d11b      	bne.n	8001d66 <HAL_ADC_Start+0x17e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d114      	bne.n	8001d66 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	e00b      	b.n	8001d66 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	f043 0210 	orr.w	r2, r3, #16
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	f043 0201 	orr.w	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	200000d8 	.word	0x200000d8
 8001d78:	431bde83 	.word	0x431bde83
 8001d7c:	40012300 	.word	0x40012300
 8001d80:	40012000 	.word	0x40012000
 8001d84:	40012100 	.word	0x40012100
 8001d88:	40012200 	.word	0x40012200

08001d8c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_ADC_Stop+0x16>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e021      	b.n	8001de6 <HAL_ADC_Stop+0x5a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0201 	bic.w	r2, r2, #1
 8001db8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d109      	bne.n	8001ddc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dcc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	f043 0201 	orr.w	r2, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b084      	sub	sp, #16
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e0e:	d113      	bne.n	8001e38 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e1e:	d10b      	bne.n	8001e38 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	f043 0220 	orr.w	r2, r3, #32
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e063      	b.n	8001f00 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e38:	f7ff fe62 	bl	8001b00 <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e3e:	e021      	b.n	8001e84 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e46:	d01d      	beq.n	8001e84 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_ADC_PollForConversion+0x6c>
 8001e4e:	f7ff fe57 	bl	8001b00 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d212      	bcs.n	8001e84 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d00b      	beq.n	8001e84 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e70:	f043 0204 	orr.w	r2, r3, #4
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e03d      	b.n	8001f00 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d1d6      	bne.n	8001e40 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f06f 0212 	mvn.w	r2, #18
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d123      	bne.n	8001efe <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d11f      	bne.n	8001efe <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d006      	beq.n	8001eda <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d111      	bne.n	8001efe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d105      	bne.n	8001efe <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	2300      	movs	r3, #0
 8001f16:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d049      	beq.n	8001fd2 <HAL_ADC_IRQHandler+0xca>
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d046      	beq.n	8001fd2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d105      	bne.n	8001f5c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f54:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d12b      	bne.n	8001fc2 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d127      	bne.n	8001fc2 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f78:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d119      	bne.n	8001fc2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0220 	bic.w	r2, r2, #32
 8001f9c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d105      	bne.n	8001fc2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	f043 0201 	orr.w	r2, r3, #1
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f8bd 	bl	8002142 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0212 	mvn.w	r2, #18
 8001fd0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d057      	beq.n	8002098 <HAL_ADC_IRQHandler+0x190>
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d054      	beq.n	8002098 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d105      	bne.n	8002006 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d139      	bne.n	8002088 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800201a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800201e:	2b00      	cmp	r3, #0
 8002020:	d006      	beq.n	8002030 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800202c:	2b00      	cmp	r3, #0
 800202e:	d12b      	bne.n	8002088 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800203a:	2b00      	cmp	r3, #0
 800203c:	d124      	bne.n	8002088 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002048:	2b00      	cmp	r3, #0
 800204a:	d11d      	bne.n	8002088 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002050:	2b00      	cmp	r3, #0
 8002052:	d119      	bne.n	8002088 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002062:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	f043 0201 	orr.w	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fa97 	bl	80025bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f06f 020c 	mvn.w	r2, #12
 8002096:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d017      	beq.n	80020de <HAL_ADC_IRQHandler+0x1d6>
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d014      	beq.n	80020de <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d10d      	bne.n	80020de <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f841 	bl	8002156 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0201 	mvn.w	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020ec:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d015      	beq.n	8002120 <HAL_ADC_IRQHandler+0x218>
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d012      	beq.n	8002120 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fe:	f043 0202 	orr.w	r2, r3, #2
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f06f 0220 	mvn.w	r2, #32
 800210e:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f82a 	bl	800216a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f06f 0220 	mvn.w	r2, #32
 800211e:	601a      	str	r2, [r3, #0]
  }
}
 8002120:	bf00      	nop
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_ADC_ConfigChannel+0x1c>
 8002198:	2302      	movs	r3, #2
 800219a:	e105      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x228>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b09      	cmp	r3, #9
 80021aa:	d925      	bls.n	80021f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68d9      	ldr	r1, [r3, #12]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	3b1e      	subs	r3, #30
 80021c2:	2207      	movs	r2, #7
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43da      	mvns	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	400a      	ands	r2, r1
 80021d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68d9      	ldr	r1, [r3, #12]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	4618      	mov	r0, r3
 80021e4:	4603      	mov	r3, r0
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4403      	add	r3, r0
 80021ea:	3b1e      	subs	r3, #30
 80021ec:	409a      	lsls	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	e022      	b.n	800223e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6919      	ldr	r1, [r3, #16]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	2207      	movs	r2, #7
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	400a      	ands	r2, r1
 800221a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6919      	ldr	r1, [r3, #16]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	4618      	mov	r0, r3
 800222e:	4603      	mov	r3, r0
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4403      	add	r3, r0
 8002234:	409a      	lsls	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b06      	cmp	r3, #6
 8002244:	d824      	bhi.n	8002290 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	3b05      	subs	r3, #5
 8002258:	221f      	movs	r2, #31
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43da      	mvns	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	400a      	ands	r2, r1
 8002266:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	4618      	mov	r0, r3
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	3b05      	subs	r3, #5
 8002282:	fa00 f203 	lsl.w	r2, r0, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	635a      	str	r2, [r3, #52]	@ 0x34
 800228e:	e04c      	b.n	800232a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b0c      	cmp	r3, #12
 8002296:	d824      	bhi.n	80022e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	3b23      	subs	r3, #35	@ 0x23
 80022aa:	221f      	movs	r2, #31
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43da      	mvns	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	400a      	ands	r2, r1
 80022b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	3b23      	subs	r3, #35	@ 0x23
 80022d4:	fa00 f203 	lsl.w	r2, r0, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	631a      	str	r2, [r3, #48]	@ 0x30
 80022e0:	e023      	b.n	800232a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	3b41      	subs	r3, #65	@ 0x41
 80022f4:	221f      	movs	r2, #31
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	400a      	ands	r2, r1
 8002302:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	4618      	mov	r0, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	3b41      	subs	r3, #65	@ 0x41
 800231e:	fa00 f203 	lsl.w	r2, r0, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800232a:	4b22      	ldr	r3, [pc, #136]	@ (80023b4 <HAL_ADC_ConfigChannel+0x234>)
 800232c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a21      	ldr	r2, [pc, #132]	@ (80023b8 <HAL_ADC_ConfigChannel+0x238>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d109      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1cc>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b12      	cmp	r3, #18
 800233e:	d105      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a19      	ldr	r2, [pc, #100]	@ (80023b8 <HAL_ADC_ConfigChannel+0x238>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d123      	bne.n	800239e <HAL_ADC_ConfigChannel+0x21e>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b10      	cmp	r3, #16
 800235c:	d003      	beq.n	8002366 <HAL_ADC_ConfigChannel+0x1e6>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b11      	cmp	r3, #17
 8002364:	d11b      	bne.n	800239e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b10      	cmp	r3, #16
 8002378:	d111      	bne.n	800239e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800237a:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <HAL_ADC_ConfigChannel+0x23c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a10      	ldr	r2, [pc, #64]	@ (80023c0 <HAL_ADC_ConfigChannel+0x240>)
 8002380:	fba2 2303 	umull	r2, r3, r2, r3
 8002384:	0c9a      	lsrs	r2, r3, #18
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002390:	e002      	b.n	8002398 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	3b01      	subs	r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f9      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	40012300 	.word	0x40012300
 80023b8:	40012000 	.word	0x40012000
 80023bc:	200000d8 	.word	0x200000d8
 80023c0:	431bde83 	.word	0x431bde83

080023c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023cc:	4b79      	ldr	r3, [pc, #484]	@ (80025b4 <ADC_Init+0x1f0>)
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	431a      	orrs	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6859      	ldr	r1, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	021a      	lsls	r2, r3, #8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800241c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800243e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6899      	ldr	r1, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002456:	4a58      	ldr	r2, [pc, #352]	@ (80025b8 <ADC_Init+0x1f4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d022      	beq.n	80024a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800246a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6899      	ldr	r1, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800248c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6899      	ldr	r1, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	e00f      	b.n	80024c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0202 	bic.w	r2, r2, #2
 80024d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6899      	ldr	r1, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7e1b      	ldrb	r3, [r3, #24]
 80024dc:	005a      	lsls	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01b      	beq.n	8002528 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024fe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800250e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	3b01      	subs	r3, #1
 800251c:	035a      	lsls	r2, r3, #13
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	e007      	b.n	8002538 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002536:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002546:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	3b01      	subs	r3, #1
 8002554:	051a      	lsls	r2, r3, #20
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800256c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6899      	ldr	r1, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800257a:	025a      	lsls	r2, r3, #9
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002592:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6899      	ldr	r1, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	029a      	lsls	r2, r3, #10
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	609a      	str	r2, [r3, #8]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	40012300 	.word	0x40012300
 80025b8:	0f000001 	.word	0x0f000001

080025bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002602:	4a04      	ldr	r2, [pc, #16]	@ (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	60d3      	str	r3, [r2, #12]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <__NVIC_GetPriorityGrouping+0x18>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 0307 	and.w	r3, r3, #7
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	db0b      	blt.n	800265e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4907      	ldr	r1, [pc, #28]	@ (800266c <__NVIC_EnableIRQ+0x38>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2001      	movs	r0, #1
 8002656:	fa00 f202 	lsl.w	r2, r0, r2
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	@ (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	@ (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	@ 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
         );
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	@ 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800273c:	d301      	bcc.n	8002742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273e:	2301      	movs	r3, #1
 8002740:	e00f      	b.n	8002762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002742:	4a0a      	ldr	r2, [pc, #40]	@ (800276c <SysTick_Config+0x40>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274a:	210f      	movs	r1, #15
 800274c:	f04f 30ff 	mov.w	r0, #4294967295
 8002750:	f7ff ff8e 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002754:	4b05      	ldr	r3, [pc, #20]	@ (800276c <SysTick_Config+0x40>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275a:	4b04      	ldr	r3, [pc, #16]	@ (800276c <SysTick_Config+0x40>)
 800275c:	2207      	movs	r2, #7
 800275e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	e000e010 	.word	0xe000e010

08002770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff29 	bl	80025d0 <__NVIC_SetPriorityGrouping>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002798:	f7ff ff3e 	bl	8002618 <__NVIC_GetPriorityGrouping>
 800279c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff ff8e 	bl	80026c4 <NVIC_EncodePriority>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff5d 	bl	8002670 <__NVIC_SetPriority>
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff31 	bl	8002634 <__NVIC_EnableIRQ>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ffa2 	bl	800272c <SysTick_Config>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002800:	f7ff f97e 	bl	8001b00 <HAL_GetTick>
 8002804:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d008      	beq.n	8002824 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2280      	movs	r2, #128	@ 0x80
 8002816:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e052      	b.n	80028ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0216 	bic.w	r2, r2, #22
 8002832:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002842:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d103      	bne.n	8002854 <HAL_DMA_Abort+0x62>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002850:	2b00      	cmp	r3, #0
 8002852:	d007      	beq.n	8002864 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0208 	bic.w	r2, r2, #8
 8002862:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002874:	e013      	b.n	800289e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002876:	f7ff f943 	bl	8001b00 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b05      	cmp	r3, #5
 8002882:	d90c      	bls.n	800289e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2203      	movs	r2, #3
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e015      	b.n	80028ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e4      	bne.n	8002876 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	223f      	movs	r2, #63	@ 0x3f
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d004      	beq.n	80028f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2280      	movs	r2, #128	@ 0x80
 80028ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e00c      	b.n	800290a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2205      	movs	r2, #5
 80028f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	@ 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	e16b      	b.n	8002c0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002934:	2201      	movs	r2, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	429a      	cmp	r2, r3
 800294e:	f040 815a 	bne.w	8002c06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d005      	beq.n	800296a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002966:	2b02      	cmp	r3, #2
 8002968:	d130      	bne.n	80029cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	2203      	movs	r2, #3
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029a0:	2201      	movs	r2, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 0201 	and.w	r2, r3, #1
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d017      	beq.n	8002a08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	2203      	movs	r2, #3
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d123      	bne.n	8002a5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	08da      	lsrs	r2, r3, #3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3208      	adds	r2, #8
 8002a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	220f      	movs	r2, #15
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	08da      	lsrs	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3208      	adds	r2, #8
 8002a56:	69b9      	ldr	r1, [r7, #24]
 8002a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	2203      	movs	r2, #3
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0203 	and.w	r2, r3, #3
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80b4 	beq.w	8002c06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b60      	ldr	r3, [pc, #384]	@ (8002c24 <HAL_GPIO_Init+0x30c>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	4a5f      	ldr	r2, [pc, #380]	@ (8002c24 <HAL_GPIO_Init+0x30c>)
 8002aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aae:	4b5d      	ldr	r3, [pc, #372]	@ (8002c24 <HAL_GPIO_Init+0x30c>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aba:	4a5b      	ldr	r2, [pc, #364]	@ (8002c28 <HAL_GPIO_Init+0x310>)
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	220f      	movs	r2, #15
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a52      	ldr	r2, [pc, #328]	@ (8002c2c <HAL_GPIO_Init+0x314>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d02b      	beq.n	8002b3e <HAL_GPIO_Init+0x226>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a51      	ldr	r2, [pc, #324]	@ (8002c30 <HAL_GPIO_Init+0x318>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d025      	beq.n	8002b3a <HAL_GPIO_Init+0x222>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a50      	ldr	r2, [pc, #320]	@ (8002c34 <HAL_GPIO_Init+0x31c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01f      	beq.n	8002b36 <HAL_GPIO_Init+0x21e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4f      	ldr	r2, [pc, #316]	@ (8002c38 <HAL_GPIO_Init+0x320>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d019      	beq.n	8002b32 <HAL_GPIO_Init+0x21a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4e      	ldr	r2, [pc, #312]	@ (8002c3c <HAL_GPIO_Init+0x324>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_GPIO_Init+0x216>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4d      	ldr	r2, [pc, #308]	@ (8002c40 <HAL_GPIO_Init+0x328>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00d      	beq.n	8002b2a <HAL_GPIO_Init+0x212>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4c      	ldr	r2, [pc, #304]	@ (8002c44 <HAL_GPIO_Init+0x32c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <HAL_GPIO_Init+0x20e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4b      	ldr	r2, [pc, #300]	@ (8002c48 <HAL_GPIO_Init+0x330>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d101      	bne.n	8002b22 <HAL_GPIO_Init+0x20a>
 8002b1e:	2307      	movs	r3, #7
 8002b20:	e00e      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b22:	2308      	movs	r3, #8
 8002b24:	e00c      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b26:	2306      	movs	r3, #6
 8002b28:	e00a      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b2a:	2305      	movs	r3, #5
 8002b2c:	e008      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b2e:	2304      	movs	r3, #4
 8002b30:	e006      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b32:	2303      	movs	r3, #3
 8002b34:	e004      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e002      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	f002 0203 	and.w	r2, r2, #3
 8002b46:	0092      	lsls	r2, r2, #2
 8002b48:	4093      	lsls	r3, r2
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b50:	4935      	ldr	r1, [pc, #212]	@ (8002c28 <HAL_GPIO_Init+0x310>)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	089b      	lsrs	r3, r3, #2
 8002b56:	3302      	adds	r3, #2
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c4c <HAL_GPIO_Init+0x334>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b82:	4a32      	ldr	r2, [pc, #200]	@ (8002c4c <HAL_GPIO_Init+0x334>)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b88:	4b30      	ldr	r3, [pc, #192]	@ (8002c4c <HAL_GPIO_Init+0x334>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bac:	4a27      	ldr	r2, [pc, #156]	@ (8002c4c <HAL_GPIO_Init+0x334>)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bb2:	4b26      	ldr	r3, [pc, #152]	@ (8002c4c <HAL_GPIO_Init+0x334>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c4c <HAL_GPIO_Init+0x334>)
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <HAL_GPIO_Init+0x334>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c00:	4a12      	ldr	r2, [pc, #72]	@ (8002c4c <HAL_GPIO_Init+0x334>)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	61fb      	str	r3, [r7, #28]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2b0f      	cmp	r3, #15
 8002c10:	f67f ae90 	bls.w	8002934 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	3724      	adds	r7, #36	@ 0x24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40013800 	.word	0x40013800
 8002c2c:	40020000 	.word	0x40020000
 8002c30:	40020400 	.word	0x40020400
 8002c34:	40020800 	.word	0x40020800
 8002c38:	40020c00 	.word	0x40020c00
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40021400 	.word	0x40021400
 8002c44:	40021800 	.word	0x40021800
 8002c48:	40021c00 	.word	0x40021c00
 8002c4c:	40013c00 	.word	0x40013c00

08002c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c60:	787b      	ldrb	r3, [r7, #1]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c6c:	e003      	b.n	8002c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c6e:	887b      	ldrh	r3, [r7, #2]
 8002c70:	041a      	lsls	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	619a      	str	r2, [r3, #24]
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e267      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d075      	beq.n	8002d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ca2:	4b88      	ldr	r3, [pc, #544]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d00c      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cae:	4b85      	ldr	r3, [pc, #532]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d112      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cba:	4b82      	ldr	r3, [pc, #520]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cc6:	d10b      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d05b      	beq.n	8002d8c <HAL_RCC_OscConfig+0x108>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d157      	bne.n	8002d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e242      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce8:	d106      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x74>
 8002cea:	4b76      	ldr	r3, [pc, #472]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a75      	ldr	r2, [pc, #468]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e01d      	b.n	8002d34 <HAL_RCC_OscConfig+0xb0>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x98>
 8002d02:	4b70      	ldr	r3, [pc, #448]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a6f      	ldr	r2, [pc, #444]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a6c      	ldr	r2, [pc, #432]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e00b      	b.n	8002d34 <HAL_RCC_OscConfig+0xb0>
 8002d1c:	4b69      	ldr	r3, [pc, #420]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a68      	ldr	r2, [pc, #416]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b66      	ldr	r3, [pc, #408]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a65      	ldr	r2, [pc, #404]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fee0 	bl	8001b00 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d44:	f7fe fedc 	bl	8001b00 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	@ 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e207      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	4b5b      	ldr	r3, [pc, #364]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0xc0>
 8002d62:	e014      	b.n	8002d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fecc 	bl	8001b00 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7fe fec8 	bl	8001b00 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	@ 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e1f3      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	4b51      	ldr	r3, [pc, #324]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0xe8>
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d063      	beq.n	8002e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002da6:	4b47      	ldr	r3, [pc, #284]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d11c      	bne.n	8002dec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002db2:	4b44      	ldr	r3, [pc, #272]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d116      	bne.n	8002dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dbe:	4b41      	ldr	r3, [pc, #260]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d005      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x152>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d001      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e1c7      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4937      	ldr	r1, [pc, #220]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dea:	e03a      	b.n	8002e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d020      	beq.n	8002e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df4:	4b34      	ldr	r3, [pc, #208]	@ (8002ec8 <HAL_RCC_OscConfig+0x244>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fe81 	bl	8001b00 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e02:	f7fe fe7d 	bl	8001b00 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e1a8      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e14:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e20:	4b28      	ldr	r3, [pc, #160]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4925      	ldr	r1, [pc, #148]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]
 8002e34:	e015      	b.n	8002e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e36:	4b24      	ldr	r3, [pc, #144]	@ (8002ec8 <HAL_RCC_OscConfig+0x244>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fe60 	bl	8001b00 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e44:	f7fe fe5c 	bl	8001b00 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e187      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e56:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d036      	beq.n	8002edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d016      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e76:	4b15      	ldr	r3, [pc, #84]	@ (8002ecc <HAL_RCC_OscConfig+0x248>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7c:	f7fe fe40 	bl	8001b00 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e84:	f7fe fe3c 	bl	8001b00 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e167      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e96:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <HAL_RCC_OscConfig+0x240>)
 8002e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x200>
 8002ea2:	e01b      	b.n	8002edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea4:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <HAL_RCC_OscConfig+0x248>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe fe29 	bl	8001b00 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb0:	e00e      	b.n	8002ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb2:	f7fe fe25 	bl	8001b00 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d907      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e150      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	42470000 	.word	0x42470000
 8002ecc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	4b88      	ldr	r3, [pc, #544]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1ea      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 8097 	beq.w	8003018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eea:	2300      	movs	r3, #0
 8002eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eee:	4b81      	ldr	r3, [pc, #516]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10f      	bne.n	8002f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	4b7d      	ldr	r3, [pc, #500]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	4a7c      	ldr	r2, [pc, #496]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f0a:	4b7a      	ldr	r3, [pc, #488]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f16:	2301      	movs	r3, #1
 8002f18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1a:	4b77      	ldr	r3, [pc, #476]	@ (80030f8 <HAL_RCC_OscConfig+0x474>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d118      	bne.n	8002f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f26:	4b74      	ldr	r3, [pc, #464]	@ (80030f8 <HAL_RCC_OscConfig+0x474>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a73      	ldr	r2, [pc, #460]	@ (80030f8 <HAL_RCC_OscConfig+0x474>)
 8002f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f32:	f7fe fde5 	bl	8001b00 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3a:	f7fe fde1 	bl	8001b00 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e10c      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80030f8 <HAL_RCC_OscConfig+0x474>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d106      	bne.n	8002f6e <HAL_RCC_OscConfig+0x2ea>
 8002f60:	4b64      	ldr	r3, [pc, #400]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f64:	4a63      	ldr	r2, [pc, #396]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f6c:	e01c      	b.n	8002fa8 <HAL_RCC_OscConfig+0x324>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x30c>
 8002f76:	4b5f      	ldr	r3, [pc, #380]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7a:	4a5e      	ldr	r2, [pc, #376]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	f043 0304 	orr.w	r3, r3, #4
 8002f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f82:	4b5c      	ldr	r3, [pc, #368]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f86:	4a5b      	ldr	r2, [pc, #364]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0x324>
 8002f90:	4b58      	ldr	r3, [pc, #352]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f94:	4a57      	ldr	r2, [pc, #348]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f96:	f023 0301 	bic.w	r3, r3, #1
 8002f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f9c:	4b55      	ldr	r3, [pc, #340]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa0:	4a54      	ldr	r2, [pc, #336]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	f023 0304 	bic.w	r3, r3, #4
 8002fa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d015      	beq.n	8002fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb0:	f7fe fda6 	bl	8001b00 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb6:	e00a      	b.n	8002fce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb8:	f7fe fda2 	bl	8001b00 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e0cb      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fce:	4b49      	ldr	r3, [pc, #292]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0ee      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x334>
 8002fda:	e014      	b.n	8003006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fdc:	f7fe fd90 	bl	8001b00 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7fe fd8c 	bl	8001b00 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e0b5      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1ee      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003006:	7dfb      	ldrb	r3, [r7, #23]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800300c:	4b39      	ldr	r3, [pc, #228]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	4a38      	ldr	r2, [pc, #224]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8003012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003016:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80a1 	beq.w	8003164 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003022:	4b34      	ldr	r3, [pc, #208]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 030c 	and.w	r3, r3, #12
 800302a:	2b08      	cmp	r3, #8
 800302c:	d05c      	beq.n	80030e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d141      	bne.n	80030ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003036:	4b31      	ldr	r3, [pc, #196]	@ (80030fc <HAL_RCC_OscConfig+0x478>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fe fd60 	bl	8001b00 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003044:	f7fe fd5c 	bl	8001b00 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e087      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	4b27      	ldr	r3, [pc, #156]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	019b      	lsls	r3, r3, #6
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	085b      	lsrs	r3, r3, #1
 800307a:	3b01      	subs	r3, #1
 800307c:	041b      	lsls	r3, r3, #16
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003084:	061b      	lsls	r3, r3, #24
 8003086:	491b      	ldr	r1, [pc, #108]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800308c:	4b1b      	ldr	r3, [pc, #108]	@ (80030fc <HAL_RCC_OscConfig+0x478>)
 800308e:	2201      	movs	r2, #1
 8003090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003092:	f7fe fd35 	bl	8001b00 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309a:	f7fe fd31 	bl	8001b00 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e05c      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ac:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x416>
 80030b8:	e054      	b.n	8003164 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ba:	4b10      	ldr	r3, [pc, #64]	@ (80030fc <HAL_RCC_OscConfig+0x478>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe fd1e 	bl	8001b00 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fe fd1a 	bl	8001b00 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e045      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <HAL_RCC_OscConfig+0x470>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x444>
 80030e6:	e03d      	b.n	8003164 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d107      	bne.n	8003100 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e038      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40007000 	.word	0x40007000
 80030fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003100:	4b1b      	ldr	r3, [pc, #108]	@ (8003170 <HAL_RCC_OscConfig+0x4ec>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d028      	beq.n	8003160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003118:	429a      	cmp	r2, r3
 800311a:	d121      	bne.n	8003160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003126:	429a      	cmp	r2, r3
 8003128:	d11a      	bne.n	8003160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003130:	4013      	ands	r3, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003138:	4293      	cmp	r3, r2
 800313a:	d111      	bne.n	8003160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003146:	085b      	lsrs	r3, r3, #1
 8003148:	3b01      	subs	r3, #1
 800314a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d107      	bne.n	8003160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800

08003174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0cc      	b.n	8003322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003188:	4b68      	ldr	r3, [pc, #416]	@ (800332c <HAL_RCC_ClockConfig+0x1b8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d90c      	bls.n	80031b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003196:	4b65      	ldr	r3, [pc, #404]	@ (800332c <HAL_RCC_ClockConfig+0x1b8>)
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319e:	4b63      	ldr	r3, [pc, #396]	@ (800332c <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0b8      	b.n	8003322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d020      	beq.n	80031fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c8:	4b59      	ldr	r3, [pc, #356]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4a58      	ldr	r2, [pc, #352]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e0:	4b53      	ldr	r3, [pc, #332]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4a52      	ldr	r2, [pc, #328]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ec:	4b50      	ldr	r3, [pc, #320]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	494d      	ldr	r1, [pc, #308]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d044      	beq.n	8003294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d107      	bne.n	8003222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003212:	4b47      	ldr	r3, [pc, #284]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d119      	bne.n	8003252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e07f      	b.n	8003322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d003      	beq.n	8003232 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322e:	2b03      	cmp	r3, #3
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003232:	4b3f      	ldr	r3, [pc, #252]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e06f      	b.n	8003322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003242:	4b3b      	ldr	r3, [pc, #236]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e067      	b.n	8003322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003252:	4b37      	ldr	r3, [pc, #220]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f023 0203 	bic.w	r2, r3, #3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	4934      	ldr	r1, [pc, #208]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	4313      	orrs	r3, r2
 8003262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003264:	f7fe fc4c 	bl	8001b00 <HAL_GetTick>
 8003268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326a:	e00a      	b.n	8003282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800326c:	f7fe fc48 	bl	8001b00 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e04f      	b.n	8003322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	4b2b      	ldr	r3, [pc, #172]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 020c 	and.w	r2, r3, #12
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	429a      	cmp	r2, r3
 8003292:	d1eb      	bne.n	800326c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003294:	4b25      	ldr	r3, [pc, #148]	@ (800332c <HAL_RCC_ClockConfig+0x1b8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d20c      	bcs.n	80032bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b22      	ldr	r3, [pc, #136]	@ (800332c <HAL_RCC_ClockConfig+0x1b8>)
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b20      	ldr	r3, [pc, #128]	@ (800332c <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e032      	b.n	8003322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c8:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4916      	ldr	r1, [pc, #88]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032e6:	4b12      	ldr	r3, [pc, #72]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	490e      	ldr	r1, [pc, #56]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032fa:	f000 f821 	bl	8003340 <HAL_RCC_GetSysClockFreq>
 80032fe:	4602      	mov	r2, r0
 8003300:	4b0b      	ldr	r3, [pc, #44]	@ (8003330 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	091b      	lsrs	r3, r3, #4
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	490a      	ldr	r1, [pc, #40]	@ (8003334 <HAL_RCC_ClockConfig+0x1c0>)
 800330c:	5ccb      	ldrb	r3, [r1, r3]
 800330e:	fa22 f303 	lsr.w	r3, r2, r3
 8003312:	4a09      	ldr	r2, [pc, #36]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 8003314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003316:	4b09      	ldr	r3, [pc, #36]	@ (800333c <HAL_RCC_ClockConfig+0x1c8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe fbac 	bl	8001a78 <HAL_InitTick>

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40023c00 	.word	0x40023c00
 8003330:	40023800 	.word	0x40023800
 8003334:	080053c8 	.word	0x080053c8
 8003338:	200000d8 	.word	0x200000d8
 800333c:	200000dc 	.word	0x200000dc

08003340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003344:	b094      	sub	sp, #80	@ 0x50
 8003346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003358:	4b79      	ldr	r3, [pc, #484]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x200>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b08      	cmp	r3, #8
 8003362:	d00d      	beq.n	8003380 <HAL_RCC_GetSysClockFreq+0x40>
 8003364:	2b08      	cmp	r3, #8
 8003366:	f200 80e1 	bhi.w	800352c <HAL_RCC_GetSysClockFreq+0x1ec>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_RCC_GetSysClockFreq+0x34>
 800336e:	2b04      	cmp	r3, #4
 8003370:	d003      	beq.n	800337a <HAL_RCC_GetSysClockFreq+0x3a>
 8003372:	e0db      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003374:	4b73      	ldr	r3, [pc, #460]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x204>)
 8003376:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003378:	e0db      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800337a:	4b73      	ldr	r3, [pc, #460]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x208>)
 800337c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800337e:	e0d8      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003380:	4b6f      	ldr	r3, [pc, #444]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x200>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003388:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800338a:	4b6d      	ldr	r3, [pc, #436]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x200>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d063      	beq.n	800345e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003396:	4b6a      	ldr	r3, [pc, #424]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x200>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	099b      	lsrs	r3, r3, #6
 800339c:	2200      	movs	r2, #0
 800339e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80033aa:	2300      	movs	r3, #0
 80033ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80033ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033b2:	4622      	mov	r2, r4
 80033b4:	462b      	mov	r3, r5
 80033b6:	f04f 0000 	mov.w	r0, #0
 80033ba:	f04f 0100 	mov.w	r1, #0
 80033be:	0159      	lsls	r1, r3, #5
 80033c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033c4:	0150      	lsls	r0, r2, #5
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4621      	mov	r1, r4
 80033cc:	1a51      	subs	r1, r2, r1
 80033ce:	6139      	str	r1, [r7, #16]
 80033d0:	4629      	mov	r1, r5
 80033d2:	eb63 0301 	sbc.w	r3, r3, r1
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033e4:	4659      	mov	r1, fp
 80033e6:	018b      	lsls	r3, r1, #6
 80033e8:	4651      	mov	r1, sl
 80033ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033ee:	4651      	mov	r1, sl
 80033f0:	018a      	lsls	r2, r1, #6
 80033f2:	4651      	mov	r1, sl
 80033f4:	ebb2 0801 	subs.w	r8, r2, r1
 80033f8:	4659      	mov	r1, fp
 80033fa:	eb63 0901 	sbc.w	r9, r3, r1
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800340a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800340e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003412:	4690      	mov	r8, r2
 8003414:	4699      	mov	r9, r3
 8003416:	4623      	mov	r3, r4
 8003418:	eb18 0303 	adds.w	r3, r8, r3
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	462b      	mov	r3, r5
 8003420:	eb49 0303 	adc.w	r3, r9, r3
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003432:	4629      	mov	r1, r5
 8003434:	024b      	lsls	r3, r1, #9
 8003436:	4621      	mov	r1, r4
 8003438:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800343c:	4621      	mov	r1, r4
 800343e:	024a      	lsls	r2, r1, #9
 8003440:	4610      	mov	r0, r2
 8003442:	4619      	mov	r1, r3
 8003444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003446:	2200      	movs	r2, #0
 8003448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800344a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800344c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003450:	f7fc feba 	bl	80001c8 <__aeabi_uldivmod>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4613      	mov	r3, r2
 800345a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800345c:	e058      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800345e:	4b38      	ldr	r3, [pc, #224]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x200>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	099b      	lsrs	r3, r3, #6
 8003464:	2200      	movs	r2, #0
 8003466:	4618      	mov	r0, r3
 8003468:	4611      	mov	r1, r2
 800346a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800346e:	623b      	str	r3, [r7, #32]
 8003470:	2300      	movs	r3, #0
 8003472:	627b      	str	r3, [r7, #36]	@ 0x24
 8003474:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003478:	4642      	mov	r2, r8
 800347a:	464b      	mov	r3, r9
 800347c:	f04f 0000 	mov.w	r0, #0
 8003480:	f04f 0100 	mov.w	r1, #0
 8003484:	0159      	lsls	r1, r3, #5
 8003486:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800348a:	0150      	lsls	r0, r2, #5
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4641      	mov	r1, r8
 8003492:	ebb2 0a01 	subs.w	sl, r2, r1
 8003496:	4649      	mov	r1, r9
 8003498:	eb63 0b01 	sbc.w	fp, r3, r1
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034b0:	ebb2 040a 	subs.w	r4, r2, sl
 80034b4:	eb63 050b 	sbc.w	r5, r3, fp
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	00eb      	lsls	r3, r5, #3
 80034c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c6:	00e2      	lsls	r2, r4, #3
 80034c8:	4614      	mov	r4, r2
 80034ca:	461d      	mov	r5, r3
 80034cc:	4643      	mov	r3, r8
 80034ce:	18e3      	adds	r3, r4, r3
 80034d0:	603b      	str	r3, [r7, #0]
 80034d2:	464b      	mov	r3, r9
 80034d4:	eb45 0303 	adc.w	r3, r5, r3
 80034d8:	607b      	str	r3, [r7, #4]
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034e6:	4629      	mov	r1, r5
 80034e8:	028b      	lsls	r3, r1, #10
 80034ea:	4621      	mov	r1, r4
 80034ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034f0:	4621      	mov	r1, r4
 80034f2:	028a      	lsls	r2, r1, #10
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034fa:	2200      	movs	r2, #0
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	61fa      	str	r2, [r7, #28]
 8003500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003504:	f7fc fe60 	bl	80001c8 <__aeabi_uldivmod>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4613      	mov	r3, r2
 800350e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003510:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x200>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	3301      	adds	r3, #1
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003520:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800352a:	e002      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4b05      	ldr	r3, [pc, #20]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x204>)
 800352e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003534:	4618      	mov	r0, r3
 8003536:	3750      	adds	r7, #80	@ 0x50
 8003538:	46bd      	mov	sp, r7
 800353a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800
 8003544:	00f42400 	.word	0x00f42400
 8003548:	007a1200 	.word	0x007a1200

0800354c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003550:	4b03      	ldr	r3, [pc, #12]	@ (8003560 <HAL_RCC_GetHCLKFreq+0x14>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	200000d8 	.word	0x200000d8

08003564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003568:	f7ff fff0 	bl	800354c <HAL_RCC_GetHCLKFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b05      	ldr	r3, [pc, #20]	@ (8003584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	0a9b      	lsrs	r3, r3, #10
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4903      	ldr	r1, [pc, #12]	@ (8003588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003580:	4618      	mov	r0, r3
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40023800 	.word	0x40023800
 8003588:	080053d8 	.word	0x080053d8

0800358c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003590:	f7ff ffdc 	bl	800354c <HAL_RCC_GetHCLKFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b05      	ldr	r3, [pc, #20]	@ (80035ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	0b5b      	lsrs	r3, r3, #13
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	4903      	ldr	r1, [pc, #12]	@ (80035b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40023800 	.word	0x40023800
 80035b0:	080053d8 	.word	0x080053d8

080035b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e041      	b.n	800364a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe f822 	bl	8001624 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	4619      	mov	r1, r3
 80035f2:	4610      	mov	r0, r2
 80035f4:	f000 fbf0 	bl	8003dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d109      	bne.n	8003678 <HAL_TIM_PWM_Start+0x24>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	e022      	b.n	80036be <HAL_TIM_PWM_Start+0x6a>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b04      	cmp	r3, #4
 800367c:	d109      	bne.n	8003692 <HAL_TIM_PWM_Start+0x3e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	e015      	b.n	80036be <HAL_TIM_PWM_Start+0x6a>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d109      	bne.n	80036ac <HAL_TIM_PWM_Start+0x58>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e008      	b.n	80036be <HAL_TIM_PWM_Start+0x6a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	bf14      	ite	ne
 80036b8:	2301      	movne	r3, #1
 80036ba:	2300      	moveq	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e07c      	b.n	80037c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d104      	bne.n	80036d6 <HAL_TIM_PWM_Start+0x82>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036d4:	e013      	b.n	80036fe <HAL_TIM_PWM_Start+0xaa>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d104      	bne.n	80036e6 <HAL_TIM_PWM_Start+0x92>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036e4:	e00b      	b.n	80036fe <HAL_TIM_PWM_Start+0xaa>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d104      	bne.n	80036f6 <HAL_TIM_PWM_Start+0xa2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036f4:	e003      	b.n	80036fe <HAL_TIM_PWM_Start+0xaa>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2202      	movs	r2, #2
 80036fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2201      	movs	r2, #1
 8003704:	6839      	ldr	r1, [r7, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fdbc 	bl	8004284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a2d      	ldr	r2, [pc, #180]	@ (80037c8 <HAL_TIM_PWM_Start+0x174>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d004      	beq.n	8003720 <HAL_TIM_PWM_Start+0xcc>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a2c      	ldr	r2, [pc, #176]	@ (80037cc <HAL_TIM_PWM_Start+0x178>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d101      	bne.n	8003724 <HAL_TIM_PWM_Start+0xd0>
 8003720:	2301      	movs	r3, #1
 8003722:	e000      	b.n	8003726 <HAL_TIM_PWM_Start+0xd2>
 8003724:	2300      	movs	r3, #0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003738:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a22      	ldr	r2, [pc, #136]	@ (80037c8 <HAL_TIM_PWM_Start+0x174>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d022      	beq.n	800378a <HAL_TIM_PWM_Start+0x136>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800374c:	d01d      	beq.n	800378a <HAL_TIM_PWM_Start+0x136>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1f      	ldr	r2, [pc, #124]	@ (80037d0 <HAL_TIM_PWM_Start+0x17c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d018      	beq.n	800378a <HAL_TIM_PWM_Start+0x136>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1d      	ldr	r2, [pc, #116]	@ (80037d4 <HAL_TIM_PWM_Start+0x180>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <HAL_TIM_PWM_Start+0x136>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1c      	ldr	r2, [pc, #112]	@ (80037d8 <HAL_TIM_PWM_Start+0x184>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00e      	beq.n	800378a <HAL_TIM_PWM_Start+0x136>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a16      	ldr	r2, [pc, #88]	@ (80037cc <HAL_TIM_PWM_Start+0x178>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d009      	beq.n	800378a <HAL_TIM_PWM_Start+0x136>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a18      	ldr	r2, [pc, #96]	@ (80037dc <HAL_TIM_PWM_Start+0x188>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d004      	beq.n	800378a <HAL_TIM_PWM_Start+0x136>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a16      	ldr	r2, [pc, #88]	@ (80037e0 <HAL_TIM_PWM_Start+0x18c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d111      	bne.n	80037ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b06      	cmp	r3, #6
 800379a:	d010      	beq.n	80037be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ac:	e007      	b.n	80037be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0201 	orr.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40010000 	.word	0x40010000
 80037cc:	40010400 	.word	0x40010400
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40000800 	.word	0x40000800
 80037d8:	40000c00 	.word	0x40000c00
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40001800 	.word	0x40001800

080037e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2200      	movs	r2, #0
 80037f4:	6839      	ldr	r1, [r7, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fd44 	bl	8004284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a2e      	ldr	r2, [pc, #184]	@ (80038bc <HAL_TIM_PWM_Stop+0xd8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d004      	beq.n	8003810 <HAL_TIM_PWM_Stop+0x2c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a2d      	ldr	r2, [pc, #180]	@ (80038c0 <HAL_TIM_PWM_Stop+0xdc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d101      	bne.n	8003814 <HAL_TIM_PWM_Stop+0x30>
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <HAL_TIM_PWM_Stop+0x32>
 8003814:	2300      	movs	r3, #0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d017      	beq.n	800384a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6a1a      	ldr	r2, [r3, #32]
 8003820:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10f      	bne.n	800384a <HAL_TIM_PWM_Stop+0x66>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6a1a      	ldr	r2, [r3, #32]
 8003830:	f240 4344 	movw	r3, #1092	@ 0x444
 8003834:	4013      	ands	r3, r2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d107      	bne.n	800384a <HAL_TIM_PWM_Stop+0x66>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a1a      	ldr	r2, [r3, #32]
 8003850:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10f      	bne.n	800387a <HAL_TIM_PWM_Stop+0x96>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6a1a      	ldr	r2, [r3, #32]
 8003860:	f240 4344 	movw	r3, #1092	@ 0x444
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d107      	bne.n	800387a <HAL_TIM_PWM_Stop+0x96>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d104      	bne.n	800388a <HAL_TIM_PWM_Stop+0xa6>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003888:	e013      	b.n	80038b2 <HAL_TIM_PWM_Stop+0xce>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b04      	cmp	r3, #4
 800388e:	d104      	bne.n	800389a <HAL_TIM_PWM_Stop+0xb6>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003898:	e00b      	b.n	80038b2 <HAL_TIM_PWM_Stop+0xce>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b08      	cmp	r3, #8
 800389e:	d104      	bne.n	80038aa <HAL_TIM_PWM_Stop+0xc6>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038a8:	e003      	b.n	80038b2 <HAL_TIM_PWM_Stop+0xce>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40010000 	.word	0x40010000
 80038c0:	40010400 	.word	0x40010400

080038c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e097      	b.n	8003a08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fd fedd 	bl	80016ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2202      	movs	r2, #2
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003908:	f023 0307 	bic.w	r3, r3, #7
 800390c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3304      	adds	r3, #4
 8003916:	4619      	mov	r1, r3
 8003918:	4610      	mov	r0, r2
 800391a:	f000 fa5d 	bl	8003dd8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003946:	f023 0303 	bic.w	r3, r3, #3
 800394a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	4313      	orrs	r3, r2
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003964:	f023 030c 	bic.w	r3, r3, #12
 8003968:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003970:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003974:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	4313      	orrs	r3, r2
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	011a      	lsls	r2, r3, #4
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	031b      	lsls	r3, r3, #12
 8003994:	4313      	orrs	r3, r2
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80039a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80039aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	4313      	orrs	r3, r2
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d020      	beq.n	8003a74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01b      	beq.n	8003a74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0202 	mvn.w	r2, #2
 8003a44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f99e 	bl	8003d9c <HAL_TIM_IC_CaptureCallback>
 8003a60:	e005      	b.n	8003a6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f990 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f9a1 	bl	8003db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d020      	beq.n	8003ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d01b      	beq.n	8003ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0204 	mvn.w	r2, #4
 8003a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f978 	bl	8003d9c <HAL_TIM_IC_CaptureCallback>
 8003aac:	e005      	b.n	8003aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f96a 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f97b 	bl	8003db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d020      	beq.n	8003b0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01b      	beq.n	8003b0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0208 	mvn.w	r2, #8
 8003adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f952 	bl	8003d9c <HAL_TIM_IC_CaptureCallback>
 8003af8:	e005      	b.n	8003b06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f944 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f955 	bl	8003db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d020      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01b      	beq.n	8003b58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0210 	mvn.w	r2, #16
 8003b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f92c 	bl	8003d9c <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f91e 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f92f 	bl	8003db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00c      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0201 	mvn.w	r2, #1
 8003b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f8fc 	bl	8003d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00c      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fc1e 	bl	80043dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d007      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f900 	bl	8003dc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00c      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0220 	mvn.w	r2, #32
 8003be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fbf0 	bl	80043c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003be8:	bf00      	nop
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e0ae      	b.n	8003d6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b0c      	cmp	r3, #12
 8003c1a:	f200 809f 	bhi.w	8003d5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c59 	.word	0x08003c59
 8003c28:	08003d5d 	.word	0x08003d5d
 8003c2c:	08003d5d 	.word	0x08003d5d
 8003c30:	08003d5d 	.word	0x08003d5d
 8003c34:	08003c99 	.word	0x08003c99
 8003c38:	08003d5d 	.word	0x08003d5d
 8003c3c:	08003d5d 	.word	0x08003d5d
 8003c40:	08003d5d 	.word	0x08003d5d
 8003c44:	08003cdb 	.word	0x08003cdb
 8003c48:	08003d5d 	.word	0x08003d5d
 8003c4c:	08003d5d 	.word	0x08003d5d
 8003c50:	08003d5d 	.word	0x08003d5d
 8003c54:	08003d1b 	.word	0x08003d1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 f960 	bl	8003f24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0208 	orr.w	r2, r2, #8
 8003c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699a      	ldr	r2, [r3, #24]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0204 	bic.w	r2, r2, #4
 8003c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6999      	ldr	r1, [r3, #24]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	619a      	str	r2, [r3, #24]
      break;
 8003c96:	e064      	b.n	8003d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 f9b0 	bl	8004004 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699a      	ldr	r2, [r3, #24]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6999      	ldr	r1, [r3, #24]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	021a      	lsls	r2, r3, #8
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	619a      	str	r2, [r3, #24]
      break;
 8003cd8:	e043      	b.n	8003d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fa05 	bl	80040f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69da      	ldr	r2, [r3, #28]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0208 	orr.w	r2, r2, #8
 8003cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0204 	bic.w	r2, r2, #4
 8003d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69d9      	ldr	r1, [r3, #28]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	61da      	str	r2, [r3, #28]
      break;
 8003d18:	e023      	b.n	8003d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fa59 	bl	80041d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69d9      	ldr	r1, [r3, #28]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	021a      	lsls	r2, r3, #8
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	61da      	str	r2, [r3, #28]
      break;
 8003d5a:	e002      	b.n	8003d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a43      	ldr	r2, [pc, #268]	@ (8003ef8 <TIM_Base_SetConfig+0x120>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d013      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df6:	d00f      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a40      	ldr	r2, [pc, #256]	@ (8003efc <TIM_Base_SetConfig+0x124>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00b      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a3f      	ldr	r2, [pc, #252]	@ (8003f00 <TIM_Base_SetConfig+0x128>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d007      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a3e      	ldr	r2, [pc, #248]	@ (8003f04 <TIM_Base_SetConfig+0x12c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a3d      	ldr	r2, [pc, #244]	@ (8003f08 <TIM_Base_SetConfig+0x130>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d108      	bne.n	8003e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a32      	ldr	r2, [pc, #200]	@ (8003ef8 <TIM_Base_SetConfig+0x120>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d02b      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e38:	d027      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a2f      	ldr	r2, [pc, #188]	@ (8003efc <TIM_Base_SetConfig+0x124>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d023      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a2e      	ldr	r2, [pc, #184]	@ (8003f00 <TIM_Base_SetConfig+0x128>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d01f      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f04 <TIM_Base_SetConfig+0x12c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01b      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a2c      	ldr	r2, [pc, #176]	@ (8003f08 <TIM_Base_SetConfig+0x130>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d017      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8003f0c <TIM_Base_SetConfig+0x134>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a2a      	ldr	r2, [pc, #168]	@ (8003f10 <TIM_Base_SetConfig+0x138>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00f      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a29      	ldr	r2, [pc, #164]	@ (8003f14 <TIM_Base_SetConfig+0x13c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00b      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a28      	ldr	r2, [pc, #160]	@ (8003f18 <TIM_Base_SetConfig+0x140>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d007      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a27      	ldr	r2, [pc, #156]	@ (8003f1c <TIM_Base_SetConfig+0x144>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d003      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a26      	ldr	r2, [pc, #152]	@ (8003f20 <TIM_Base_SetConfig+0x148>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d108      	bne.n	8003e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef8 <TIM_Base_SetConfig+0x120>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_Base_SetConfig+0xf2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a10      	ldr	r2, [pc, #64]	@ (8003f08 <TIM_Base_SetConfig+0x130>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d103      	bne.n	8003ed2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	691a      	ldr	r2, [r3, #16]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f043 0204 	orr.w	r2, r3, #4
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	601a      	str	r2, [r3, #0]
}
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40010000 	.word	0x40010000
 8003efc:	40000400 	.word	0x40000400
 8003f00:	40000800 	.word	0x40000800
 8003f04:	40000c00 	.word	0x40000c00
 8003f08:	40010400 	.word	0x40010400
 8003f0c:	40014000 	.word	0x40014000
 8003f10:	40014400 	.word	0x40014400
 8003f14:	40014800 	.word	0x40014800
 8003f18:	40001800 	.word	0x40001800
 8003f1c:	40001c00 	.word	0x40001c00
 8003f20:	40002000 	.word	0x40002000

08003f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f023 0201 	bic.w	r2, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0303 	bic.w	r3, r3, #3
 8003f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f023 0302 	bic.w	r3, r3, #2
 8003f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a20      	ldr	r2, [pc, #128]	@ (8003ffc <TIM_OC1_SetConfig+0xd8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <TIM_OC1_SetConfig+0x64>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a1f      	ldr	r2, [pc, #124]	@ (8004000 <TIM_OC1_SetConfig+0xdc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d10c      	bne.n	8003fa2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f023 0308 	bic.w	r3, r3, #8
 8003f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 0304 	bic.w	r3, r3, #4
 8003fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a15      	ldr	r2, [pc, #84]	@ (8003ffc <TIM_OC1_SetConfig+0xd8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d003      	beq.n	8003fb2 <TIM_OC1_SetConfig+0x8e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a14      	ldr	r2, [pc, #80]	@ (8004000 <TIM_OC1_SetConfig+0xdc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d111      	bne.n	8003fd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	621a      	str	r2, [r3, #32]
}
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40010400 	.word	0x40010400

08004004 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f023 0210 	bic.w	r2, r3, #16
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800403a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f023 0320 	bic.w	r3, r3, #32
 800404e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a22      	ldr	r2, [pc, #136]	@ (80040e8 <TIM_OC2_SetConfig+0xe4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d003      	beq.n	800406c <TIM_OC2_SetConfig+0x68>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a21      	ldr	r2, [pc, #132]	@ (80040ec <TIM_OC2_SetConfig+0xe8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d10d      	bne.n	8004088 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004086:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a17      	ldr	r2, [pc, #92]	@ (80040e8 <TIM_OC2_SetConfig+0xe4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_OC2_SetConfig+0x94>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a16      	ldr	r2, [pc, #88]	@ (80040ec <TIM_OC2_SetConfig+0xe8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d113      	bne.n	80040c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800409e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	621a      	str	r2, [r3, #32]
}
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40010000 	.word	0x40010000
 80040ec:	40010400 	.word	0x40010400

080040f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800411e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0303 	bic.w	r3, r3, #3
 8004126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a21      	ldr	r2, [pc, #132]	@ (80041d0 <TIM_OC3_SetConfig+0xe0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d003      	beq.n	8004156 <TIM_OC3_SetConfig+0x66>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a20      	ldr	r2, [pc, #128]	@ (80041d4 <TIM_OC3_SetConfig+0xe4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d10d      	bne.n	8004172 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800415c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a16      	ldr	r2, [pc, #88]	@ (80041d0 <TIM_OC3_SetConfig+0xe0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d003      	beq.n	8004182 <TIM_OC3_SetConfig+0x92>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a15      	ldr	r2, [pc, #84]	@ (80041d4 <TIM_OC3_SetConfig+0xe4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d113      	bne.n	80041aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	621a      	str	r2, [r3, #32]
}
 80041c4:	bf00      	nop
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40010400 	.word	0x40010400

080041d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800420e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	031b      	lsls	r3, r3, #12
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a12      	ldr	r2, [pc, #72]	@ (800427c <TIM_OC4_SetConfig+0xa4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_OC4_SetConfig+0x68>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a11      	ldr	r2, [pc, #68]	@ (8004280 <TIM_OC4_SetConfig+0xa8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d109      	bne.n	8004254 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004246:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	019b      	lsls	r3, r3, #6
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	621a      	str	r2, [r3, #32]
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40010000 	.word	0x40010000
 8004280:	40010400 	.word	0x40010400

08004284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	2201      	movs	r2, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	401a      	ands	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a1a      	ldr	r2, [r3, #32]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	431a      	orrs	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e05a      	b.n	800439e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800430e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a21      	ldr	r2, [pc, #132]	@ (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d022      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004334:	d01d      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1d      	ldr	r2, [pc, #116]	@ (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d018      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1b      	ldr	r2, [pc, #108]	@ (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1a      	ldr	r2, [pc, #104]	@ (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00e      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a18      	ldr	r2, [pc, #96]	@ (80043bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d009      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a17      	ldr	r2, [pc, #92]	@ (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d004      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a15      	ldr	r2, [pc, #84]	@ (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d10c      	bne.n	800438c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	4313      	orrs	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800
 80043b8:	40000c00 	.word	0x40000c00
 80043bc:	40010400 	.word	0x40010400
 80043c0:	40014000 	.word	0x40014000
 80043c4:	40001800 	.word	0x40001800

080043c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e042      	b.n	8004488 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fd fa24 	bl	8001864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2224      	movs	r2, #36	@ 0x24
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fd1b 	bl	8004e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695a      	ldr	r2, [r3, #20]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d121      	bne.n	80044ee <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <HAL_UART_Transmit_IT+0x26>
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e01a      	b.n	80044f0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	88fa      	ldrh	r2, [r7, #6]
 80044c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	88fa      	ldrh	r2, [r7, #6]
 80044ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2221      	movs	r2, #33	@ 0x21
 80044d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044e8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	e000      	b.n	80044f0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80044ee:	2302      	movs	r3, #2
  }
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	4613      	mov	r3, r2
 8004508:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b20      	cmp	r3, #32
 8004514:	d112      	bne.n	800453c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_UART_Receive_IT+0x26>
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e00b      	b.n	800453e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800452c:	88fb      	ldrh	r3, [r7, #6]
 800452e:	461a      	mov	r2, r3
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 fac8 	bl	8004ac8 <UART_Start_Receive_IT>
 8004538:	4603      	mov	r3, r0
 800453a:	e000      	b.n	800453e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b0ba      	sub	sp, #232	@ 0xe8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800456e:	2300      	movs	r3, #0
 8004570:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004574:	2300      	movs	r3, #0
 8004576:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800457a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10f      	bne.n	80045ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <HAL_UART_IRQHandler+0x66>
 800459a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fba4 	bl	8004cf4 <UART_Receive_IT>
      return;
 80045ac:	e273      	b.n	8004a96 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80de 	beq.w	8004774 <HAL_UART_IRQHandler+0x22c>
 80045b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d106      	bne.n	80045d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80d1 	beq.w	8004774 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00b      	beq.n	80045f6 <HAL_UART_IRQHandler+0xae>
 80045de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ee:	f043 0201 	orr.w	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <HAL_UART_IRQHandler+0xd2>
 8004602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004612:	f043 0202 	orr.w	r2, r3, #2
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800461a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <HAL_UART_IRQHandler+0xf6>
 8004626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004636:	f043 0204 	orr.w	r2, r3, #4
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800463e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d011      	beq.n	800466e <HAL_UART_IRQHandler+0x126>
 800464a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d105      	bne.n	8004662 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004666:	f043 0208 	orr.w	r2, r3, #8
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 820a 	beq.w	8004a8c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_UART_IRQHandler+0x14e>
 8004684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fb2f 	bl	8004cf4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a0:	2b40      	cmp	r3, #64	@ 0x40
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d103      	bne.n	80046c2 <HAL_UART_IRQHandler+0x17a>
 80046ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d04f      	beq.n	8004762 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fa3a 	bl	8004b3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d2:	2b40      	cmp	r3, #64	@ 0x40
 80046d4:	d141      	bne.n	800475a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3314      	adds	r3, #20
 80046dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3314      	adds	r3, #20
 80046fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004702:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004706:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800470e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800471a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1d9      	bne.n	80046d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d013      	beq.n	8004752 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472e:	4a8a      	ldr	r2, [pc, #552]	@ (8004958 <HAL_UART_IRQHandler+0x410>)
 8004730:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004736:	4618      	mov	r0, r3
 8004738:	f7fe f8cb 	bl	80028d2 <HAL_DMA_Abort_IT>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d016      	beq.n	8004770 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800474c:	4610      	mov	r0, r2
 800474e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	e00e      	b.n	8004770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f9a2 	bl	8004a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	e00a      	b.n	8004770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f99e 	bl	8004a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004760:	e006      	b.n	8004770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f99a 	bl	8004a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800476e:	e18d      	b.n	8004a8c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004770:	bf00      	nop
    return;
 8004772:	e18b      	b.n	8004a8c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004778:	2b01      	cmp	r3, #1
 800477a:	f040 8167 	bne.w	8004a4c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800477e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004782:	f003 0310 	and.w	r3, r3, #16
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 8160 	beq.w	8004a4c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800478c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8159 	beq.w	8004a4c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ba:	2b40      	cmp	r3, #64	@ 0x40
 80047bc:	f040 80ce 	bne.w	800495c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 80a9 	beq.w	8004928 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047de:	429a      	cmp	r2, r3
 80047e0:	f080 80a2 	bcs.w	8004928 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047f6:	f000 8088 	beq.w	800490a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	330c      	adds	r3, #12
 8004800:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004810:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004818:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	330c      	adds	r3, #12
 8004822:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004826:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800482a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004832:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800483e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1d9      	bne.n	80047fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3314      	adds	r3, #20
 800484c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004850:	e853 3f00 	ldrex	r3, [r3]
 8004854:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004856:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004858:	f023 0301 	bic.w	r3, r3, #1
 800485c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3314      	adds	r3, #20
 8004866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800486a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800486e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004872:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800487c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e1      	bne.n	8004846 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3314      	adds	r3, #20
 8004888:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004894:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004898:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3314      	adds	r3, #20
 80048a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80048ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80048b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e3      	bne.n	8004882 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	330c      	adds	r3, #12
 80048ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048da:	f023 0310 	bic.w	r3, r3, #16
 80048de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	330c      	adds	r3, #12
 80048e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80048ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e3      	bne.n	80048c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004904:	4618      	mov	r0, r3
 8004906:	f7fd ff74 	bl	80027f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004918:	b29b      	uxth	r3, r3
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	b29b      	uxth	r3, r3
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f8c5 	bl	8004ab0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004926:	e0b3      	b.n	8004a90 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800492c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004930:	429a      	cmp	r2, r3
 8004932:	f040 80ad 	bne.w	8004a90 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004940:	f040 80a6 	bne.w	8004a90 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800494e:	4619      	mov	r1, r3
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f8ad 	bl	8004ab0 <HAL_UARTEx_RxEventCallback>
      return;
 8004956:	e09b      	b.n	8004a90 <HAL_UART_IRQHandler+0x548>
 8004958:	08004c03 	.word	0x08004c03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004964:	b29b      	uxth	r3, r3
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 808e 	beq.w	8004a94 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8089 	beq.w	8004a94 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	330c      	adds	r3, #12
 8004988:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004998:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80049a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80049a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e3      	bne.n	8004982 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3314      	adds	r3, #20
 80049c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	623b      	str	r3, [r7, #32]
   return(result);
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3314      	adds	r3, #20
 80049da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80049de:	633a      	str	r2, [r7, #48]	@ 0x30
 80049e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e3      	bne.n	80049ba <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0310 	bic.w	r3, r3, #16
 8004a16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	330c      	adds	r3, #12
 8004a20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a24:	61fa      	str	r2, [r7, #28]
 8004a26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	69b9      	ldr	r1, [r7, #24]
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	e841 2300 	strex	r3, r2, [r1]
 8004a30:	617b      	str	r3, [r7, #20]
   return(result);
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1e3      	bne.n	8004a00 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a42:	4619      	mov	r1, r3
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f833 	bl	8004ab0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a4a:	e023      	b.n	8004a94 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d009      	beq.n	8004a6c <HAL_UART_IRQHandler+0x524>
 8004a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f8dd 	bl	8004c24 <UART_Transmit_IT>
    return;
 8004a6a:	e014      	b.n	8004a96 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00e      	beq.n	8004a96 <HAL_UART_IRQHandler+0x54e>
 8004a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f91d 	bl	8004cc4 <UART_EndTransmit_IT>
    return;
 8004a8a:	e004      	b.n	8004a96 <HAL_UART_IRQHandler+0x54e>
    return;
 8004a8c:	bf00      	nop
 8004a8e:	e002      	b.n	8004a96 <HAL_UART_IRQHandler+0x54e>
      return;
 8004a90:	bf00      	nop
 8004a92:	e000      	b.n	8004a96 <HAL_UART_IRQHandler+0x54e>
      return;
 8004a94:	bf00      	nop
  }
}
 8004a96:	37e8      	adds	r7, #232	@ 0xe8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	88fa      	ldrh	r2, [r7, #6]
 8004ae0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	88fa      	ldrh	r2, [r7, #6]
 8004ae6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2222      	movs	r2, #34	@ 0x22
 8004af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d007      	beq.n	8004b0e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b0c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695a      	ldr	r2, [r3, #20]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0201 	orr.w	r2, r2, #1
 8004b1c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0220 	orr.w	r2, r2, #32
 8004b2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b095      	sub	sp, #84	@ 0x54
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	330c      	adds	r3, #12
 8004b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	330c      	adds	r3, #12
 8004b62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b64:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e5      	bne.n	8004b44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3314      	adds	r3, #20
 8004b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
 8004b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3314      	adds	r3, #20
 8004b96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e5      	bne.n	8004b78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d119      	bne.n	8004be8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	330c      	adds	r3, #12
 8004bba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f023 0310 	bic.w	r3, r3, #16
 8004bca:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bd4:	61ba      	str	r2, [r7, #24]
 8004bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6979      	ldr	r1, [r7, #20]
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	613b      	str	r3, [r7, #16]
   return(result);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e5      	bne.n	8004bb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bf6:	bf00      	nop
 8004bf8:	3754      	adds	r7, #84	@ 0x54
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f7ff ff40 	bl	8004a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b21      	cmp	r3, #33	@ 0x21
 8004c36:	d13e      	bne.n	8004cb6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c40:	d114      	bne.n	8004c6c <UART_Transmit_IT+0x48>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d110      	bne.n	8004c6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	1c9a      	adds	r2, r3, #2
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	621a      	str	r2, [r3, #32]
 8004c6a:	e008      	b.n	8004c7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	1c59      	adds	r1, r3, #1
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6211      	str	r1, [r2, #32]
 8004c76:	781a      	ldrb	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10f      	bne.n	8004cb2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ca0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cb0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e000      	b.n	8004cb8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
  }
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7fc fbdb 	bl	80014a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08c      	sub	sp, #48	@ 0x30
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b22      	cmp	r3, #34	@ 0x22
 8004d0e:	f040 80aa 	bne.w	8004e66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d1a:	d115      	bne.n	8004d48 <UART_Receive_IT+0x54>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d111      	bne.n	8004d48 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d28:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d40:	1c9a      	adds	r2, r3, #2
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d46:	e024      	b.n	8004d92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d56:	d007      	beq.n	8004d68 <UART_Receive_IT+0x74>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <UART_Receive_IT+0x82>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	e008      	b.n	8004d88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d15d      	bne.n	8004e62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0220 	bic.w	r2, r2, #32
 8004db4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d135      	bne.n	8004e58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	330c      	adds	r3, #12
 8004df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	613b      	str	r3, [r7, #16]
   return(result);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f023 0310 	bic.w	r3, r3, #16
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	330c      	adds	r3, #12
 8004e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e12:	623a      	str	r2, [r7, #32]
 8004e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	69f9      	ldr	r1, [r7, #28]
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e5      	bne.n	8004df2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d10a      	bne.n	8004e4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e4e:	4619      	mov	r1, r3
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff fe2d 	bl	8004ab0 <HAL_UARTEx_RxEventCallback>
 8004e56:	e002      	b.n	8004e5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7fc fa87 	bl	800136c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	e002      	b.n	8004e68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	e000      	b.n	8004e68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e66:	2302      	movs	r3, #2
  }
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3730      	adds	r7, #48	@ 0x30
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e74:	b0c0      	sub	sp, #256	@ 0x100
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8c:	68d9      	ldr	r1, [r3, #12]
 8004e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	ea40 0301 	orr.w	r3, r0, r1
 8004e98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ec8:	f021 010c 	bic.w	r1, r1, #12
 8004ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eea:	6999      	ldr	r1, [r3, #24]
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	ea40 0301 	orr.w	r3, r0, r1
 8004ef6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4b8f      	ldr	r3, [pc, #572]	@ (800513c <UART_SetConfig+0x2cc>)
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d005      	beq.n	8004f10 <UART_SetConfig+0xa0>
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	4b8d      	ldr	r3, [pc, #564]	@ (8005140 <UART_SetConfig+0x2d0>)
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d104      	bne.n	8004f1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f10:	f7fe fb3c 	bl	800358c <HAL_RCC_GetPCLK2Freq>
 8004f14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f18:	e003      	b.n	8004f22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f1a:	f7fe fb23 	bl	8003564 <HAL_RCC_GetPCLK1Freq>
 8004f1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f2c:	f040 810c 	bne.w	8005148 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f34:	2200      	movs	r2, #0
 8004f36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f42:	4622      	mov	r2, r4
 8004f44:	462b      	mov	r3, r5
 8004f46:	1891      	adds	r1, r2, r2
 8004f48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f4a:	415b      	adcs	r3, r3
 8004f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f52:	4621      	mov	r1, r4
 8004f54:	eb12 0801 	adds.w	r8, r2, r1
 8004f58:	4629      	mov	r1, r5
 8004f5a:	eb43 0901 	adc.w	r9, r3, r1
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f72:	4690      	mov	r8, r2
 8004f74:	4699      	mov	r9, r3
 8004f76:	4623      	mov	r3, r4
 8004f78:	eb18 0303 	adds.w	r3, r8, r3
 8004f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f80:	462b      	mov	r3, r5
 8004f82:	eb49 0303 	adc.w	r3, r9, r3
 8004f86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	18db      	adds	r3, r3, r3
 8004fa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	eb42 0303 	adc.w	r3, r2, r3
 8004faa:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fb4:	f7fb f908 	bl	80001c8 <__aeabi_uldivmod>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4b61      	ldr	r3, [pc, #388]	@ (8005144 <UART_SetConfig+0x2d4>)
 8004fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	011c      	lsls	r4, r3, #4
 8004fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004fd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004fd8:	4642      	mov	r2, r8
 8004fda:	464b      	mov	r3, r9
 8004fdc:	1891      	adds	r1, r2, r2
 8004fde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004fe0:	415b      	adcs	r3, r3
 8004fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fe4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004fe8:	4641      	mov	r1, r8
 8004fea:	eb12 0a01 	adds.w	sl, r2, r1
 8004fee:	4649      	mov	r1, r9
 8004ff0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005000:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005004:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005008:	4692      	mov	sl, r2
 800500a:	469b      	mov	fp, r3
 800500c:	4643      	mov	r3, r8
 800500e:	eb1a 0303 	adds.w	r3, sl, r3
 8005012:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005016:	464b      	mov	r3, r9
 8005018:	eb4b 0303 	adc.w	r3, fp, r3
 800501c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800502c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005030:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005034:	460b      	mov	r3, r1
 8005036:	18db      	adds	r3, r3, r3
 8005038:	643b      	str	r3, [r7, #64]	@ 0x40
 800503a:	4613      	mov	r3, r2
 800503c:	eb42 0303 	adc.w	r3, r2, r3
 8005040:	647b      	str	r3, [r7, #68]	@ 0x44
 8005042:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005046:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800504a:	f7fb f8bd 	bl	80001c8 <__aeabi_uldivmod>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	4611      	mov	r1, r2
 8005054:	4b3b      	ldr	r3, [pc, #236]	@ (8005144 <UART_SetConfig+0x2d4>)
 8005056:	fba3 2301 	umull	r2, r3, r3, r1
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	2264      	movs	r2, #100	@ 0x64
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	1acb      	subs	r3, r1, r3
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800506a:	4b36      	ldr	r3, [pc, #216]	@ (8005144 <UART_SetConfig+0x2d4>)
 800506c:	fba3 2302 	umull	r2, r3, r3, r2
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005078:	441c      	add	r4, r3
 800507a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800507e:	2200      	movs	r2, #0
 8005080:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005084:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005088:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800508c:	4642      	mov	r2, r8
 800508e:	464b      	mov	r3, r9
 8005090:	1891      	adds	r1, r2, r2
 8005092:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005094:	415b      	adcs	r3, r3
 8005096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005098:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800509c:	4641      	mov	r1, r8
 800509e:	1851      	adds	r1, r2, r1
 80050a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80050a2:	4649      	mov	r1, r9
 80050a4:	414b      	adcs	r3, r1
 80050a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050b4:	4659      	mov	r1, fp
 80050b6:	00cb      	lsls	r3, r1, #3
 80050b8:	4651      	mov	r1, sl
 80050ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050be:	4651      	mov	r1, sl
 80050c0:	00ca      	lsls	r2, r1, #3
 80050c2:	4610      	mov	r0, r2
 80050c4:	4619      	mov	r1, r3
 80050c6:	4603      	mov	r3, r0
 80050c8:	4642      	mov	r2, r8
 80050ca:	189b      	adds	r3, r3, r2
 80050cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050d0:	464b      	mov	r3, r9
 80050d2:	460a      	mov	r2, r1
 80050d4:	eb42 0303 	adc.w	r3, r2, r3
 80050d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80050e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80050ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80050f0:	460b      	mov	r3, r1
 80050f2:	18db      	adds	r3, r3, r3
 80050f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050f6:	4613      	mov	r3, r2
 80050f8:	eb42 0303 	adc.w	r3, r2, r3
 80050fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005102:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005106:	f7fb f85f 	bl	80001c8 <__aeabi_uldivmod>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4b0d      	ldr	r3, [pc, #52]	@ (8005144 <UART_SetConfig+0x2d4>)
 8005110:	fba3 1302 	umull	r1, r3, r3, r2
 8005114:	095b      	lsrs	r3, r3, #5
 8005116:	2164      	movs	r1, #100	@ 0x64
 8005118:	fb01 f303 	mul.w	r3, r1, r3
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	3332      	adds	r3, #50	@ 0x32
 8005122:	4a08      	ldr	r2, [pc, #32]	@ (8005144 <UART_SetConfig+0x2d4>)
 8005124:	fba2 2303 	umull	r2, r3, r2, r3
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	f003 0207 	and.w	r2, r3, #7
 800512e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4422      	add	r2, r4
 8005136:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005138:	e106      	b.n	8005348 <UART_SetConfig+0x4d8>
 800513a:	bf00      	nop
 800513c:	40011000 	.word	0x40011000
 8005140:	40011400 	.word	0x40011400
 8005144:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800514c:	2200      	movs	r2, #0
 800514e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005152:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005156:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800515a:	4642      	mov	r2, r8
 800515c:	464b      	mov	r3, r9
 800515e:	1891      	adds	r1, r2, r2
 8005160:	6239      	str	r1, [r7, #32]
 8005162:	415b      	adcs	r3, r3
 8005164:	627b      	str	r3, [r7, #36]	@ 0x24
 8005166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800516a:	4641      	mov	r1, r8
 800516c:	1854      	adds	r4, r2, r1
 800516e:	4649      	mov	r1, r9
 8005170:	eb43 0501 	adc.w	r5, r3, r1
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	00eb      	lsls	r3, r5, #3
 800517e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005182:	00e2      	lsls	r2, r4, #3
 8005184:	4614      	mov	r4, r2
 8005186:	461d      	mov	r5, r3
 8005188:	4643      	mov	r3, r8
 800518a:	18e3      	adds	r3, r4, r3
 800518c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005190:	464b      	mov	r3, r9
 8005192:	eb45 0303 	adc.w	r3, r5, r3
 8005196:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800519a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051b6:	4629      	mov	r1, r5
 80051b8:	008b      	lsls	r3, r1, #2
 80051ba:	4621      	mov	r1, r4
 80051bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c0:	4621      	mov	r1, r4
 80051c2:	008a      	lsls	r2, r1, #2
 80051c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051c8:	f7fa fffe 	bl	80001c8 <__aeabi_uldivmod>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4b60      	ldr	r3, [pc, #384]	@ (8005354 <UART_SetConfig+0x4e4>)
 80051d2:	fba3 2302 	umull	r2, r3, r3, r2
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	011c      	lsls	r4, r3, #4
 80051da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80051e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80051ec:	4642      	mov	r2, r8
 80051ee:	464b      	mov	r3, r9
 80051f0:	1891      	adds	r1, r2, r2
 80051f2:	61b9      	str	r1, [r7, #24]
 80051f4:	415b      	adcs	r3, r3
 80051f6:	61fb      	str	r3, [r7, #28]
 80051f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051fc:	4641      	mov	r1, r8
 80051fe:	1851      	adds	r1, r2, r1
 8005200:	6139      	str	r1, [r7, #16]
 8005202:	4649      	mov	r1, r9
 8005204:	414b      	adcs	r3, r1
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005214:	4659      	mov	r1, fp
 8005216:	00cb      	lsls	r3, r1, #3
 8005218:	4651      	mov	r1, sl
 800521a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800521e:	4651      	mov	r1, sl
 8005220:	00ca      	lsls	r2, r1, #3
 8005222:	4610      	mov	r0, r2
 8005224:	4619      	mov	r1, r3
 8005226:	4603      	mov	r3, r0
 8005228:	4642      	mov	r2, r8
 800522a:	189b      	adds	r3, r3, r2
 800522c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005230:	464b      	mov	r3, r9
 8005232:	460a      	mov	r2, r1
 8005234:	eb42 0303 	adc.w	r3, r2, r3
 8005238:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005246:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005254:	4649      	mov	r1, r9
 8005256:	008b      	lsls	r3, r1, #2
 8005258:	4641      	mov	r1, r8
 800525a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800525e:	4641      	mov	r1, r8
 8005260:	008a      	lsls	r2, r1, #2
 8005262:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005266:	f7fa ffaf 	bl	80001c8 <__aeabi_uldivmod>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	4611      	mov	r1, r2
 8005270:	4b38      	ldr	r3, [pc, #224]	@ (8005354 <UART_SetConfig+0x4e4>)
 8005272:	fba3 2301 	umull	r2, r3, r3, r1
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	2264      	movs	r2, #100	@ 0x64
 800527a:	fb02 f303 	mul.w	r3, r2, r3
 800527e:	1acb      	subs	r3, r1, r3
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	3332      	adds	r3, #50	@ 0x32
 8005284:	4a33      	ldr	r2, [pc, #204]	@ (8005354 <UART_SetConfig+0x4e4>)
 8005286:	fba2 2303 	umull	r2, r3, r2, r3
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005290:	441c      	add	r4, r3
 8005292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005296:	2200      	movs	r2, #0
 8005298:	673b      	str	r3, [r7, #112]	@ 0x70
 800529a:	677a      	str	r2, [r7, #116]	@ 0x74
 800529c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052a0:	4642      	mov	r2, r8
 80052a2:	464b      	mov	r3, r9
 80052a4:	1891      	adds	r1, r2, r2
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	415b      	adcs	r3, r3
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052b0:	4641      	mov	r1, r8
 80052b2:	1851      	adds	r1, r2, r1
 80052b4:	6039      	str	r1, [r7, #0]
 80052b6:	4649      	mov	r1, r9
 80052b8:	414b      	adcs	r3, r1
 80052ba:	607b      	str	r3, [r7, #4]
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052c8:	4659      	mov	r1, fp
 80052ca:	00cb      	lsls	r3, r1, #3
 80052cc:	4651      	mov	r1, sl
 80052ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d2:	4651      	mov	r1, sl
 80052d4:	00ca      	lsls	r2, r1, #3
 80052d6:	4610      	mov	r0, r2
 80052d8:	4619      	mov	r1, r3
 80052da:	4603      	mov	r3, r0
 80052dc:	4642      	mov	r2, r8
 80052de:	189b      	adds	r3, r3, r2
 80052e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052e2:	464b      	mov	r3, r9
 80052e4:	460a      	mov	r2, r1
 80052e6:	eb42 0303 	adc.w	r3, r2, r3
 80052ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80052f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005304:	4649      	mov	r1, r9
 8005306:	008b      	lsls	r3, r1, #2
 8005308:	4641      	mov	r1, r8
 800530a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800530e:	4641      	mov	r1, r8
 8005310:	008a      	lsls	r2, r1, #2
 8005312:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005316:	f7fa ff57 	bl	80001c8 <__aeabi_uldivmod>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4b0d      	ldr	r3, [pc, #52]	@ (8005354 <UART_SetConfig+0x4e4>)
 8005320:	fba3 1302 	umull	r1, r3, r3, r2
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	2164      	movs	r1, #100	@ 0x64
 8005328:	fb01 f303 	mul.w	r3, r1, r3
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	3332      	adds	r3, #50	@ 0x32
 8005332:	4a08      	ldr	r2, [pc, #32]	@ (8005354 <UART_SetConfig+0x4e4>)
 8005334:	fba2 2303 	umull	r2, r3, r2, r3
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	f003 020f 	and.w	r2, r3, #15
 800533e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4422      	add	r2, r4
 8005346:	609a      	str	r2, [r3, #8]
}
 8005348:	bf00      	nop
 800534a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800534e:	46bd      	mov	sp, r7
 8005350:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005354:	51eb851f 	.word	0x51eb851f

08005358 <memset>:
 8005358:	4402      	add	r2, r0
 800535a:	4603      	mov	r3, r0
 800535c:	4293      	cmp	r3, r2
 800535e:	d100      	bne.n	8005362 <memset+0xa>
 8005360:	4770      	bx	lr
 8005362:	f803 1b01 	strb.w	r1, [r3], #1
 8005366:	e7f9      	b.n	800535c <memset+0x4>

08005368 <__libc_init_array>:
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	4d0d      	ldr	r5, [pc, #52]	@ (80053a0 <__libc_init_array+0x38>)
 800536c:	4c0d      	ldr	r4, [pc, #52]	@ (80053a4 <__libc_init_array+0x3c>)
 800536e:	1b64      	subs	r4, r4, r5
 8005370:	10a4      	asrs	r4, r4, #2
 8005372:	2600      	movs	r6, #0
 8005374:	42a6      	cmp	r6, r4
 8005376:	d109      	bne.n	800538c <__libc_init_array+0x24>
 8005378:	4d0b      	ldr	r5, [pc, #44]	@ (80053a8 <__libc_init_array+0x40>)
 800537a:	4c0c      	ldr	r4, [pc, #48]	@ (80053ac <__libc_init_array+0x44>)
 800537c:	f000 f818 	bl	80053b0 <_init>
 8005380:	1b64      	subs	r4, r4, r5
 8005382:	10a4      	asrs	r4, r4, #2
 8005384:	2600      	movs	r6, #0
 8005386:	42a6      	cmp	r6, r4
 8005388:	d105      	bne.n	8005396 <__libc_init_array+0x2e>
 800538a:	bd70      	pop	{r4, r5, r6, pc}
 800538c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005390:	4798      	blx	r3
 8005392:	3601      	adds	r6, #1
 8005394:	e7ee      	b.n	8005374 <__libc_init_array+0xc>
 8005396:	f855 3b04 	ldr.w	r3, [r5], #4
 800539a:	4798      	blx	r3
 800539c:	3601      	adds	r6, #1
 800539e:	e7f2      	b.n	8005386 <__libc_init_array+0x1e>
 80053a0:	080053e8 	.word	0x080053e8
 80053a4:	080053e8 	.word	0x080053e8
 80053a8:	080053e8 	.word	0x080053e8
 80053ac:	080053ec 	.word	0x080053ec

080053b0 <_init>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	bf00      	nop
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr

080053bc <_fini>:
 80053bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053be:	bf00      	nop
 80053c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c2:	bc08      	pop	{r3}
 80053c4:	469e      	mov	lr, r3
 80053c6:	4770      	bx	lr
