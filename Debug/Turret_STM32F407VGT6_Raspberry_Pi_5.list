
Turret_STM32F407VGT6_Raspberry_Pi_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054ec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005674  08005674  00006674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800568c  0800568c  00007104  2**0
                  CONTENTS
  4 .ARM          00000008  0800568c  0800568c  0000668c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005694  08005694  00007104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005694  08005694  00006694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005698  08005698  00006698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  0800569c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007104  2**0
                  CONTENTS
 10 .bss          0000021c  20000104  20000104  00007104  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000320  20000320  00007104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007104  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012221  00000000  00000000  00007134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002918  00000000  00000000  00019355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  0001bc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b93  00000000  00000000  0001cb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023582  00000000  00000000  0001d6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001428f  00000000  00000000  00040c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8942  00000000  00000000  00054efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d83e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d98  00000000  00000000  0012d884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0013161c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000104 	.word	0x20000104
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800565c 	.word	0x0800565c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000108 	.word	0x20000108
 80001c4:	0800565c 	.word	0x0800565c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <Read_AD_Conversion>:
  *
  * The filtering uses the alpha factor (Motor_xx->Config.Alfa) for exponential smoothing:
  * filtered_value = alfa * new_value + (1 - alfa) * previous_value
  */
void Read_AD_Conversion(Analog_digital_converter *ADC_xx, Motor *Motor_xx)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08c      	sub	sp, #48	@ 0x30
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
  // Считывание значений
    HAL_ADC_Start(ADC_xx->Convertor);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 fbe6 	bl	8001c98 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(ADC_xx->Convertor, 100);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2164      	movs	r1, #100	@ 0x64
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fce5 	bl	8001ea2 <HAL_ADC_PollForConversion>
    unsigned int raw_value = HAL_ADC_GetValue(ADC_xx->Convertor);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4618      	mov	r0, r3
 80004de:	f001 fe7b 	bl	80021d8 <HAL_ADC_GetValue>
 80004e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    HAL_ADC_Stop(ADC_xx->Convertor);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f001 fca7 	bl	8001e3c <HAL_ADC_Stop>
  // Обработка данных
    // Расчёт частоиспользуемых значений
      float alfa = Motor_xx->Config.Alfa;
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      float unalfa = 1.0f - alfa;
 80004f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80004f8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80004fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000500:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      unsigned int discrete_range =
        ADC_xx->Maximum_discrete_level -
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	685a      	ldr	r2, [r3, #4]
        ADC_xx->Minimum_discrete_level;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	68db      	ldr	r3, [r3, #12]
      unsigned int discrete_range =
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	623b      	str	r3, [r7, #32]
      float angular_range =
        Motor_xx->Config.Angular.Maximum_angular -
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	ed93 7a08 	vldr	s14, [r3, #32]
        Motor_xx->Config.Angular.Minimum_angular;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
      float angular_range =
 800051c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000520:	edc7 7a07 	vstr	s15, [r7, #28]
    // Расчёт выходных значений
      unsigned int filtered_discrete =
        (unsigned long int)(alfa * (float)raw_value +
 8000524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000526:	ee07 3a90 	vmov	s15, r3
 800052a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800052e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000532:	ee27 7a27 	vmul.f32	s14, s14, s15
        unalfa * (float)ADC_xx->Discrete_level);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	691b      	ldr	r3, [r3, #16]
 800053a:	ee07 3a90 	vmov	s15, r3
 800053e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000542:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000546:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (unsigned long int)(alfa * (float)raw_value +
 800054a:	ee77 7a27 	vadd.f32	s15, s14, s15
      unsigned int filtered_discrete =
 800054e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000552:	ee17 3a90 	vmov	r3, s15
 8000556:	61bb      	str	r3, [r7, #24]
      float norma =
        (filtered_discrete - (float)ADC_xx->Minimum_discrete_level) /
 8000558:	69bb      	ldr	r3, [r7, #24]
 800055a:	ee07 3a90 	vmov	s15, r3
 800055e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	68db      	ldr	r3, [r3, #12]
 8000566:	ee07 3a90 	vmov	s15, r3
 800056a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800056e:	ee77 6a67 	vsub.f32	s13, s14, s15
        (float)discrete_range;
 8000572:	6a3b      	ldr	r3, [r7, #32]
 8000574:	ee07 3a90 	vmov	s15, r3
 8000578:	eeb8 7a67 	vcvt.f32.u32	s14, s15
      float norma =
 800057c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000580:	edc7 7a05 	vstr	s15, [r7, #20]
      float angular =
        Motor_xx->Config.Angular.Minimum_angular +
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
        norma * angular_range;
 800058a:	edd7 6a05 	vldr	s13, [r7, #20]
 800058e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000592:	ee66 7aa7 	vmul.f32	s15, s13, s15
      float angular =
 8000596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800059a:	edc7 7a04 	vstr	s15, [r7, #16]
      float filtered_angular =
        alfa * angular +
 800059e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80005a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80005a6:	ee27 7a27 	vmul.f32	s14, s14, s15
        unalfa * Motor_xx->Status.Angular;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80005b0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80005b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
      float filtered_angular =
 80005b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005bc:	edc7 7a03 	vstr	s15, [r7, #12]
  // Запись значений
    ADC_xx->Discrete_level = filtered_discrete;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	69ba      	ldr	r2, [r7, #24]
 80005c4:	611a      	str	r2, [r3, #16]
    Motor_xx->Status.Angular = filtered_angular;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	63da      	str	r2, [r3, #60]	@ 0x3c
};
 80005cc:	bf00      	nop
 80005ce:	3730      	adds	r7, #48	@ 0x30
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <Encoders_Init>:
  .min_angle = ELEVATION_MIN_ANGLE,
  .max_angle = ELEVATION_MAX_ANGLE,
  .ppr = ENCODER_PPR
};

void Encoders_Init(TIM_HandleTypeDef *htim_az, TIM_HandleTypeDef *htim_el) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_Encoder_Start(htim_az, TIM_CHANNEL_ALL);
 80005de:	213c      	movs	r1, #60	@ 0x3c
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f003 fadd 	bl	8003ba0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(htim_az);
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f003 f83c 	bl	8003664 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(htim_el, TIM_CHANNEL_ALL);
 80005ec:	213c      	movs	r1, #60	@ 0x3c
 80005ee:	6838      	ldr	r0, [r7, #0]
 80005f0:	f003 fad6 	bl	8003ba0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(htim_el);
 80005f4:	6838      	ldr	r0, [r7, #0]
 80005f6:	f003 f835 	bl	8003664 <HAL_TIM_Base_Start_IT>
};
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <First_mode>:
  * @note Stop condition triggered by zero angular setpoint
  *
  * @warning Ensure Left/Right/Up/Down constants are properly defined as GPIO_PinState values
  * @warning Timer comparison assumes proper Motor_AZ global variable definition
  */
void First_mode (Motor *Motor_xx, float Angular) {
 8000602:	b580      	push	{r7, lr}
 8000604:	b084      	sub	sp, #16
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
 800060a:	ed87 0a00 	vstr	s0, [r7]
  GPIO_PinState roter =
    Motor_xx->Config.PWM.Timer == Motor_AZ.Config.PWM.Timer ?
    (Angular > 0 ? Left : Right) :
 800060e:	edd7 7a00 	vldr	s15, [r7]
 8000612:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800061a:	bfcc      	ite	gt
 800061c:	2301      	movgt	r3, #1
 800061e:	2300      	movle	r3, #0
 8000620:	b2db      	uxtb	r3, r3
  GPIO_PinState roter =
 8000622:	73fb      	strb	r3, [r7, #15]
    (Angular > 0 ? Up : Down);
  if (Angular != 0) {
 8000624:	edd7 7a00 	vldr	s15, [r7]
 8000628:	eef5 7a40 	vcmp.f32	s15, #0.0
 800062c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000630:	d00e      	beq.n	8000650 <First_mode+0x4e>
    if (!Motor_xx->Status.Moving) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000638:	2b00      	cmp	r3, #0
 800063a:	d105      	bne.n	8000648 <First_mode+0x46>
      Start_motor(Motor_xx, roter);
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	4619      	mov	r1, r3
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f000 f8d3 	bl	80007ec <Start_motor>
    };
  }
  else {
    Stop_motor(Motor_xx);
  };
};
 8000646:	e006      	b.n	8000656 <First_mode+0x54>
      Up_fequency(Motor_xx);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f910 	bl	800086e <Up_fequency>
};
 800064e:	e002      	b.n	8000656 <First_mode+0x54>
    Stop_motor(Motor_xx);
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 f8f1 	bl	8000838 <Stop_motor>
};
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <Moving_away_from_borders>:
  *
  * @sideeffect
  * - Generates a brief 100ms activation pulse on Motor_AZ
  * - Modifies the AZ motor enable state temporarily
  */
void Moving_away_from_borders(Motor *Motor_xx, GPIO_PinState roter) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Motor_xx->Config.GPIO.DIR_port, Motor_xx->Config.GPIO.DIR_pin, roter);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	b29b      	uxth	r3, r3
 8000676:	78fa      	ldrb	r2, [r7, #3]
 8000678:	4619      	mov	r1, r3
 800067a:	f002 fb41 	bl	8002d00 <HAL_GPIO_WritePin>
  Set_PWM_frequency(Motor_xx, Motor_xx->Config.PWM.Minimum_frequency);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	4619      	mov	r1, r3
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f869 	bl	800075c <Set_PWM_frequency>
  HAL_GPIO_WritePin(Motor_AZ.Config.GPIO.ENA_port, Motor_AZ.Config.GPIO.ENA_pin, Work);
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <Moving_away_from_borders+0x64>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	4a0d      	ldr	r2, [pc, #52]	@ (80006c4 <Moving_away_from_borders+0x64>)
 8000690:	68d2      	ldr	r2, [r2, #12]
 8000692:	b291      	uxth	r1, r2
 8000694:	2200      	movs	r2, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fb32 	bl	8002d00 <HAL_GPIO_WritePin>

  HAL_Delay(100);
 800069c:	2064      	movs	r0, #100	@ 0x64
 800069e:	f001 fa93 	bl	8001bc8 <HAL_Delay>

  HAL_GPIO_WritePin(Motor_AZ.Config.GPIO.ENA_port, Motor_AZ.Config.GPIO.ENA_pin, Sleep);
 80006a2:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <Moving_away_from_borders+0x64>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	4a07      	ldr	r2, [pc, #28]	@ (80006c4 <Moving_away_from_borders+0x64>)
 80006a8:	68d2      	ldr	r2, [r2, #12]
 80006aa:	b291      	uxth	r1, r2
 80006ac:	2201      	movs	r2, #1
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fb26 	bl	8002d00 <HAL_GPIO_WritePin>
  Motor_xx->Status.Moving = 0;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
};
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000048 	.word	0x20000048

080006c8 <Second_mode>:
  *
  * @warning Left/Right must be properly defined as GPIO_PinState values
  * @warning Guidance_accuracy should be set appropriately for application
  * @warning Border avoidance uses reverse direction (-roter)
  */
void Second_mode(float Angular, Motor *Motor_xx){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80006d2:	6038      	str	r0, [r7, #0]
	float Difference = Angular - Motor_xx->Status.Angular;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80006da:	ed97 7a01 	vldr	s14, [r7, #4]
 80006de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006e2:	edc7 7a03 	vstr	s15, [r7, #12]
	GPIO_PinState roter = Difference > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80006e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80006ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f2:	bfcc      	ite	gt
 80006f4:	2301      	movgt	r3, #1
 80006f6:	2300      	movle	r3, #0
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	72fb      	strb	r3, [r7, #11]

	if (Working_area(Motor_xx))	{
 80006fc:	6838      	ldr	r0, [r7, #0]
 80006fe:	f000 f8d8 	bl	80008b2 <Working_area>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d01e      	beq.n	8000746 <Second_mode+0x7e>
	  if (fabsf(Difference) > Motor_xx->Config.Angular.Guidance_accuracy) {
 8000708:	edd7 7a03 	vldr	s15, [r7, #12]
 800070c:	eeb0 7ae7 	vabs.f32	s14, s15
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800071a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071e:	dd0e      	ble.n	800073e <Second_mode+0x76>
	    if (!Motor_xx->Status.Moving) {
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000726:	2b00      	cmp	r3, #0
 8000728:	d105      	bne.n	8000736 <Second_mode+0x6e>
	      Start_motor(Motor_xx, roter);
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	4619      	mov	r1, r3
 800072e:	6838      	ldr	r0, [r7, #0]
 8000730:	f000 f85c 	bl	80007ec <Start_motor>
	  };
	}
	else {
	  Moving_away_from_borders(Motor_xx, -roter);
	};
};
 8000734:	e00e      	b.n	8000754 <Second_mode+0x8c>
	      Up_fequency(Motor_xx);
 8000736:	6838      	ldr	r0, [r7, #0]
 8000738:	f000 f899 	bl	800086e <Up_fequency>
};
 800073c:	e00a      	b.n	8000754 <Second_mode+0x8c>
	    Stop_motor(Motor_xx);
 800073e:	6838      	ldr	r0, [r7, #0]
 8000740:	f000 f87a 	bl	8000838 <Stop_motor>
};
 8000744:	e006      	b.n	8000754 <Second_mode+0x8c>
	  Moving_away_from_borders(Motor_xx, -roter);
 8000746:	7afb      	ldrb	r3, [r7, #11]
 8000748:	425b      	negs	r3, r3
 800074a:	b2db      	uxtb	r3, r3
 800074c:	4619      	mov	r1, r3
 800074e:	6838      	ldr	r0, [r7, #0]
 8000750:	f7ff ff86 	bl	8000660 <Moving_away_from_borders>
};
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <Set_PWM_frequency>:
  *
  * @note The function assumes the timer clock source is PCLK1 (APB1) and uses its frequency for calculations.
  * @note The duty cycle is fixed at 50%. Modify CCR1 manually if a different duty cycle is needed.
  */
void Set_PWM_frequency(Motor *Motor_xx, uint32_t freq)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  unsigned int prescaler = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  unsigned int period = (HAL_RCC_GetPCLK1Freq() * 2 / freq) - 1;
 800076a:	f002 ff53 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 800076e:	4603      	mov	r3, r0
 8000770:	005a      	lsls	r2, r3, #1
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	fbb2 f3f3 	udiv	r3, r2, r3
 8000778:	3b01      	subs	r3, #1
 800077a:	60bb      	str	r3, [r7, #8]

  while (period > 0xFFFF) {
 800077c:	e00f      	b.n	800079e <Set_PWM_frequency+0x42>
    prescaler++;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	3301      	adds	r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
    period = (HAL_RCC_GetPCLK1Freq() * 2 / (freq * (prescaler + 1))) - 1;
 8000784:	f002 ff46 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 8000788:	4603      	mov	r3, r0
 800078a:	005a      	lsls	r2, r3, #1
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3301      	adds	r3, #1
 8000790:	6839      	ldr	r1, [r7, #0]
 8000792:	fb01 f303 	mul.w	r3, r1, r3
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	3b01      	subs	r3, #1
 800079c:	60bb      	str	r3, [r7, #8]
  while (period > 0xFFFF) {
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80007a4:	d2eb      	bcs.n	800077e <Set_PWM_frequency+0x22>
  }

  HAL_TIM_PWM_Stop(Motor_xx->Config.PWM.Timer, TIM_CHANNEL_1);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	691b      	ldr	r3, [r3, #16]
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 f8e1 	bl	8003974 <HAL_TIM_PWM_Stop>
  Motor_xx->Config.PWM.Timer->Instance->PSC = prescaler;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	691b      	ldr	r3, [r3, #16]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	629a      	str	r2, [r3, #40]	@ 0x28
  Motor_xx->Config.PWM.Timer->Instance->ARR = period;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	691b      	ldr	r3, [r3, #16]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  Motor_xx->Config.PWM.Timer->Instance->CCR1 = period / 2;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	691b      	ldr	r3, [r3, #16]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	0852      	lsrs	r2, r2, #1
 80007d0:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(Motor_xx->Config.PWM.Timer, TIM_CHANNEL_1);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f003 f803 	bl	80037e4 <HAL_TIM_PWM_Start>

  Motor_xx->Status.Frequency = freq;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	635a      	str	r2, [r3, #52]	@ 0x34
};
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <Start_motor>:
  * @note The function uses minimum PWM frequency for safe motor start
  * @note Work state should be defined as GPIO_PIN_SET or GPIO_PIN_RESET
  * @note Motor direction depends on driver wiring and roter parameter interpretation
  */
void Start_motor(Motor *Motor_xx, GPIO_PinState roter)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
  Set_PWM_frequency(Motor_xx, Motor_xx->Config.PWM.Minimum_frequency);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffac 	bl	800075c <Set_PWM_frequency>
  HAL_GPIO_WritePin(Motor_xx->Config.GPIO.DIR_port, Motor_xx->Config.GPIO.DIR_pin, roter);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	b29b      	uxth	r3, r3
 800080e:	78fa      	ldrb	r2, [r7, #3]
 8000810:	4619      	mov	r1, r3
 8000812:	f002 fa75 	bl	8002d00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Motor_xx->Config.GPIO.ENA_port, Motor_xx->Config.GPIO.ENA_pin, Work);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6858      	ldr	r0, [r3, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	b29b      	uxth	r3, r3
 8000820:	2200      	movs	r2, #0
 8000822:	4619      	mov	r1, r3
 8000824:	f002 fa6c 	bl	8002d00 <HAL_GPIO_WritePin>
  Motor_xx->Status.Moving = 1;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2201      	movs	r2, #1
 800082c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
};
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <Stop_motor>:
  * @note Sleep state should be defined as GPIO_PIN_SET or GPIO_PIN_RESET
  * @note Setting frequency to 0 before stopping PWM ensures smooth deceleration
  * @warning Ensure proper ENA pin state configuration to avoid unexpected motor behavior
  */
void Stop_motor(Motor *Motor_xx)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop(Motor_xx->Config.PWM.Timer, TIM_CHANNEL_1);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f003 f894 	bl	8003974 <HAL_TIM_PWM_Stop>
  HAL_GPIO_WritePin(Motor_xx->Config.GPIO.ENA_port, Motor_xx->Config.GPIO.ENA_pin, Sleep);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6858      	ldr	r0, [r3, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	b29b      	uxth	r3, r3
 8000856:	2201      	movs	r2, #1
 8000858:	4619      	mov	r1, r3
 800085a:	f002 fa51 	bl	8002d00 <HAL_GPIO_WritePin>
  Motor_xx->Status.Moving = 0;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
};
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <Up_fequency>:
  * @note Frequency change occurs only if current frequency is below maximum limit
  * @note Actual increment step is determined by Config.PWM.Increment_frequency
  * @note Function uses safe frequency clamping to prevent exceeding limits
  */
void Up_fequency(Motor *Motor_xx)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b084      	sub	sp, #16
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  if (Motor_xx->Status.Frequency < Motor_xx->Config.PWM.Maximum_frequency) {
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	429a      	cmp	r2, r3
 8000880:	d213      	bcs.n	80008aa <Up_fequency+0x3c>
    unsigned int freq = Motor_xx->Status.Frequency + Motor_xx->Config.PWM.Increment_frequency;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	4413      	add	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
    freq = MIN(freq, Motor_xx->Config.PWM.Maximum_frequency);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	4293      	cmp	r3, r2
 8000896:	bf28      	it	cs
 8000898:	4613      	movcs	r3, r2
 800089a:	60fb      	str	r3, [r7, #12]
    Set_PWM_frequency(Motor_xx, freq);
 800089c:	68f9      	ldr	r1, [r7, #12]
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff ff5c 	bl	800075c <Set_PWM_frequency>
    HAL_Delay(10);
 80008a4:	200a      	movs	r0, #10
 80008a6:	f001 f98f 	bl	8001bc8 <HAL_Delay>
  };
};
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <Working_area>:
  * - Deviation: Safety margin from mechanical limits
  *
  * @note The function returns a boolean value as char type (1/0)
  * @note The comparison is exclusive (angle must be strictly between bounds)
  */
char Working_area(Motor *Motor_xx) {
 80008b2:	b480      	push	{r7}
 80008b4:	b087      	sub	sp, #28
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  float current_angle = Motor_xx->Status.Angular;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008be:	617b      	str	r3, [r7, #20]

  float lower_bound = Motor_xx->Config.Angular.Minimum_angular + Motor_xx->Config.Angular.Deviation;;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80008cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008d0:	edc7 7a04 	vstr	s15, [r7, #16]
  float upper_bound = Motor_xx->Config.Angular.Maximum_angular - Motor_xx->Config.Angular.Deviation;;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	ed93 7a08 	vldr	s14, [r3, #32]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80008e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008e4:	edc7 7a03 	vstr	s15, [r7, #12]

  return (current_angle > lower_bound) && (current_angle < upper_bound);
 80008e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80008ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80008f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f8:	dd0a      	ble.n	8000910 <Working_area+0x5e>
 80008fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80008fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000902:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800090a:	d501      	bpl.n	8000910 <Working_area+0x5e>
 800090c:	2301      	movs	r3, #1
 800090e:	e000      	b.n	8000912 <Working_area+0x60>
 8000910:	2300      	movs	r3, #0
 8000912:	b2db      	uxtb	r3, r3
};
 8000914:	4618      	mov	r0, r3
 8000916:	371c      	adds	r7, #28
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <Transfer_to_raspberry_pi>:
 *      Author: Danil
 */

#include "Transfer_to_Raspberry_Pi.h"

void Transfer_to_raspberry_pi(UART_HandleTypeDef *huart, Target_data *Targit, Motor *Motor_az, Motor *Motor_el) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
 800092c:	603b      	str	r3, [r7, #0]
  if (!Targit->transmitting) {
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000934:	2b00      	cmp	r3, #0
 8000936:	f040 80e5 	bne.w	8000b04 <Transfer_to_raspberry_pi+0x1e4>
	size_t Size_Tx_UART = sizeof(Targit->Tx_data);
 800093a:	230d      	movs	r3, #13
 800093c:	617b      	str	r3, [r7, #20]

    uint16_t angular_az = (uint16_t)fabs(Motor_az->Status.Angular * 10);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000944:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800094c:	eef0 7ae7 	vabs.f32	s15, s15
 8000950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000954:	ee17 3a90 	vmov	r3, s15
 8000958:	827b      	strh	r3, [r7, #18]
    uint16_t angular_el = (uint16_t)fabs(Motor_el->Status.Angular * 10);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000960:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000968:	eef0 7ae7 	vabs.f32	s15, s15
 800096c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000970:	ee17 3a90 	vmov	r3, s15
 8000974:	823b      	strh	r3, [r7, #16]

    Targit->Tx_data[1] = (Motor_az->Status.Angular >= 0) ? '1' : '0';
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800097c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000984:	db01      	blt.n	800098a <Transfer_to_raspberry_pi+0x6a>
 8000986:	2231      	movs	r2, #49	@ 0x31
 8000988:	e000      	b.n	800098c <Transfer_to_raspberry_pi+0x6c>
 800098a:	2230      	movs	r2, #48	@ 0x30
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	759a      	strb	r2, [r3, #22]
    Targit->Tx_data[2] = '0' + (angular_az / 1000) % 10;
 8000990:	8a7b      	ldrh	r3, [r7, #18]
 8000992:	4a5e      	ldr	r2, [pc, #376]	@ (8000b0c <Transfer_to_raspberry_pi+0x1ec>)
 8000994:	fba2 2303 	umull	r2, r3, r2, r3
 8000998:	099b      	lsrs	r3, r3, #6
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b5c      	ldr	r3, [pc, #368]	@ (8000b10 <Transfer_to_raspberry_pi+0x1f0>)
 800099e:	fba3 1302 	umull	r1, r3, r3, r2
 80009a2:	08d9      	lsrs	r1, r3, #3
 80009a4:	460b      	mov	r3, r1
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	440b      	add	r3, r1
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	3330      	adds	r3, #48	@ 0x30
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	75da      	strb	r2, [r3, #23]
    Targit->Tx_data[3] = '0' + (angular_az / 100) % 10;
 80009ba:	8a7b      	ldrh	r3, [r7, #18]
 80009bc:	4a55      	ldr	r2, [pc, #340]	@ (8000b14 <Transfer_to_raspberry_pi+0x1f4>)
 80009be:	fba2 2303 	umull	r2, r3, r2, r3
 80009c2:	095b      	lsrs	r3, r3, #5
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	4b52      	ldr	r3, [pc, #328]	@ (8000b10 <Transfer_to_raspberry_pi+0x1f0>)
 80009c8:	fba3 1302 	umull	r1, r3, r3, r2
 80009cc:	08d9      	lsrs	r1, r3, #3
 80009ce:	460b      	mov	r3, r1
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	440b      	add	r3, r1
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	b29b      	uxth	r3, r3
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	3330      	adds	r3, #48	@ 0x30
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	761a      	strb	r2, [r3, #24]
    Targit->Tx_data[4] = '0' + (angular_az / 10) % 10;
 80009e4:	8a7b      	ldrh	r3, [r7, #18]
 80009e6:	4a4a      	ldr	r2, [pc, #296]	@ (8000b10 <Transfer_to_raspberry_pi+0x1f0>)
 80009e8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ec:	08db      	lsrs	r3, r3, #3
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	4b47      	ldr	r3, [pc, #284]	@ (8000b10 <Transfer_to_raspberry_pi+0x1f0>)
 80009f2:	fba3 1302 	umull	r1, r3, r3, r2
 80009f6:	08d9      	lsrs	r1, r3, #3
 80009f8:	460b      	mov	r3, r1
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	440b      	add	r3, r1
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	3330      	adds	r3, #48	@ 0x30
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	765a      	strb	r2, [r3, #25]
    Targit->Tx_data[5] = '0' + (angular_az) % 10;
 8000a0e:	8a7a      	ldrh	r2, [r7, #18]
 8000a10:	4b3f      	ldr	r3, [pc, #252]	@ (8000b10 <Transfer_to_raspberry_pi+0x1f0>)
 8000a12:	fba3 1302 	umull	r1, r3, r3, r2
 8000a16:	08d9      	lsrs	r1, r3, #3
 8000a18:	460b      	mov	r3, r1
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	3330      	adds	r3, #48	@ 0x30
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	769a      	strb	r2, [r3, #26]

    Targit->Tx_data[6] = (Motor_el->Status.Angular >= 0) ? '1' : '0';
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000a34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a3c:	db01      	blt.n	8000a42 <Transfer_to_raspberry_pi+0x122>
 8000a3e:	2231      	movs	r2, #49	@ 0x31
 8000a40:	e000      	b.n	8000a44 <Transfer_to_raspberry_pi+0x124>
 8000a42:	2230      	movs	r2, #48	@ 0x30
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	76da      	strb	r2, [r3, #27]
    Targit->Tx_data[7] = '0' +  (angular_el / 1000) % 10;
 8000a48:	8a3b      	ldrh	r3, [r7, #16]
 8000a4a:	4a30      	ldr	r2, [pc, #192]	@ (8000b0c <Transfer_to_raspberry_pi+0x1ec>)
 8000a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a50:	099b      	lsrs	r3, r3, #6
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	4b2e      	ldr	r3, [pc, #184]	@ (8000b10 <Transfer_to_raspberry_pi+0x1f0>)
 8000a56:	fba3 1302 	umull	r1, r3, r3, r2
 8000a5a:	08d9      	lsrs	r1, r3, #3
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	440b      	add	r3, r1
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	3330      	adds	r3, #48	@ 0x30
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	771a      	strb	r2, [r3, #28]
    Targit->Tx_data[8] = '0' +  (angular_el / 100) % 10;
 8000a72:	8a3b      	ldrh	r3, [r7, #16]
 8000a74:	4a27      	ldr	r2, [pc, #156]	@ (8000b14 <Transfer_to_raspberry_pi+0x1f4>)
 8000a76:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7a:	095b      	lsrs	r3, r3, #5
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	4b24      	ldr	r3, [pc, #144]	@ (8000b10 <Transfer_to_raspberry_pi+0x1f0>)
 8000a80:	fba3 1302 	umull	r1, r3, r3, r2
 8000a84:	08d9      	lsrs	r1, r3, #3
 8000a86:	460b      	mov	r3, r1
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	3330      	adds	r3, #48	@ 0x30
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	775a      	strb	r2, [r3, #29]
    Targit->Tx_data[9] = '0' +  (angular_el / 10) % 10;
 8000a9c:	8a3b      	ldrh	r3, [r7, #16]
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b10 <Transfer_to_raspberry_pi+0x1f0>)
 8000aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa4:	08db      	lsrs	r3, r3, #3
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <Transfer_to_raspberry_pi+0x1f0>)
 8000aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8000aae:	08d9      	lsrs	r1, r3, #3
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	3330      	adds	r3, #48	@ 0x30
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	779a      	strb	r2, [r3, #30]
    Targit->Tx_data[10] = '0' + (angular_el) % 10;
 8000ac6:	8a3a      	ldrh	r2, [r7, #16]
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <Transfer_to_raspberry_pi+0x1f0>)
 8000aca:	fba3 1302 	umull	r1, r3, r3, r2
 8000ace:	08d9      	lsrs	r1, r3, #3
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	3330      	adds	r3, #48	@ 0x30
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	77da      	strb	r2, [r3, #31]
    if (HAL_UART_Transmit_IT(huart, (uint8_t*)Targit->Tx_data, Size_Tx_UART) == HAL_OK)
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	3315      	adds	r3, #21
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	b292      	uxth	r2, r2
 8000aee:	4619      	mov	r1, r3
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f003 fe23 	bl	800473c <HAL_UART_Transmit_IT>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d103      	bne.n	8000b04 <Transfer_to_raspberry_pi+0x1e4>
    {
      Targit->transmitting = 1;
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	2201      	movs	r2, #1
 8000b00:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    };
  };
};
 8000b04:	bf00      	nop
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	10624dd3 	.word	0x10624dd3
 8000b10:	cccccccd 	.word	0xcccccccd
 8000b14:	51eb851f 	.word	0x51eb851f

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  Size_Rx_UART = sizeof(Target.Rx_data);
 8000b1e:	4b60      	ldr	r3, [pc, #384]	@ (8000ca0 <main+0x188>)
 8000b20:	2215      	movs	r2, #21
 8000b22:	601a      	str	r2, [r3, #0]

  Motor_AZ.Config.PWM.Timer = &htim3; ADC_AZ.Convertor = &hadc1;
 8000b24:	4b5f      	ldr	r3, [pc, #380]	@ (8000ca4 <main+0x18c>)
 8000b26:	4a60      	ldr	r2, [pc, #384]	@ (8000ca8 <main+0x190>)
 8000b28:	611a      	str	r2, [r3, #16]
 8000b2a:	4b60      	ldr	r3, [pc, #384]	@ (8000cac <main+0x194>)
 8000b2c:	4a60      	ldr	r2, [pc, #384]	@ (8000cb0 <main+0x198>)
 8000b2e:	601a      	str	r2, [r3, #0]
  Motor_EL.Config.PWM.Timer = &htim2; ADC_EL.Convertor = &hadc2;
 8000b30:	4b60      	ldr	r3, [pc, #384]	@ (8000cb4 <main+0x19c>)
 8000b32:	4a61      	ldr	r2, [pc, #388]	@ (8000cb8 <main+0x1a0>)
 8000b34:	611a      	str	r2, [r3, #16]
 8000b36:	4b61      	ldr	r3, [pc, #388]	@ (8000cbc <main+0x1a4>)
 8000b38:	4a61      	ldr	r2, [pc, #388]	@ (8000cc0 <main+0x1a8>)
 8000b3a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3c:	f000 ffd2 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b40:	f000 f8c8 	bl	8000cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b44:	f000 fb5a 	bl	80011fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b48:	f000 f92e 	bl	8000da8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b4c:	f000 f97e 	bl	8000e4c <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8000b50:	f000 fb2a 	bl	80011a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b54:	f000 f9cc 	bl	8000ef0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b58:	f000 fa24 	bl	8000fa4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b5c:	f000 fa7c 	bl	8001058 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000b60:	f000 face 	bl	8001100 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)Target.Rx_data, Size_Rx_UART);
 8000b64:	4b4e      	ldr	r3, [pc, #312]	@ (8000ca0 <main+0x188>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4955      	ldr	r1, [pc, #340]	@ (8000cc4 <main+0x1ac>)
 8000b6e:	4856      	ldr	r0, [pc, #344]	@ (8000cc8 <main+0x1b0>)
 8000b70:	f003 fe1a 	bl	80047a8 <HAL_UART_Receive_IT>
  Encoders_Init(&htim5, &htim4);
 8000b74:	4955      	ldr	r1, [pc, #340]	@ (8000ccc <main+0x1b4>)
 8000b76:	4856      	ldr	r0, [pc, #344]	@ (8000cd0 <main+0x1b8>)
 8000b78:	f7ff fd2c 	bl	80005d4 <Encoders_Init>
    * @param[in,out] Motor_AZ Azimuth motor control structure
    * @param[in,out] Motor_EL Elevation motor control structure
    */
  while (1)
  {
    Read_AD_Conversion(&ADC_AZ, &Motor_AZ);
 8000b7c:	4949      	ldr	r1, [pc, #292]	@ (8000ca4 <main+0x18c>)
 8000b7e:	484b      	ldr	r0, [pc, #300]	@ (8000cac <main+0x194>)
 8000b80:	f7ff fc9a 	bl	80004b8 <Read_AD_Conversion>
    Read_AD_Conversion(&ADC_EL, &Motor_EL);
 8000b84:	494b      	ldr	r1, [pc, #300]	@ (8000cb4 <main+0x19c>)
 8000b86:	484d      	ldr	r0, [pc, #308]	@ (8000cbc <main+0x1a4>)
 8000b88:	f7ff fc96 	bl	80004b8 <Read_AD_Conversion>

    char Working_zon_az = Working_area(&Motor_AZ);
 8000b8c:	4845      	ldr	r0, [pc, #276]	@ (8000ca4 <main+0x18c>)
 8000b8e:	f7ff fe90 	bl	80008b2 <Working_area>
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
    char Working_zon_el = Working_area(&Motor_EL);
 8000b96:	4847      	ldr	r0, [pc, #284]	@ (8000cb4 <main+0x19c>)
 8000b98:	f7ff fe8b 	bl	80008b2 <Working_area>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71bb      	strb	r3, [r7, #6]

    if (Working_zon_az && Working_zon_el)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d033      	beq.n	8000c0e <main+0xf6>
 8000ba6:	79bb      	ldrb	r3, [r7, #6]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d030      	beq.n	8000c0e <main+0xf6>
    {
      switch (Target.Rx_data[15])
 8000bac:	4b45      	ldr	r3, [pc, #276]	@ (8000cc4 <main+0x1ac>)
 8000bae:	7bdb      	ldrb	r3, [r3, #15]
 8000bb0:	2b30      	cmp	r3, #48	@ 0x30
 8000bb2:	d002      	beq.n	8000bba <main+0xa2>
 8000bb4:	2b31      	cmp	r3, #49	@ 0x31
 8000bb6:	d011      	beq.n	8000bdc <main+0xc4>
 8000bb8:	e021      	b.n	8000bfe <main+0xe6>
      {
        case '0':
          First_mode(&Motor_AZ, Target.Azimuth);
 8000bba:	4b42      	ldr	r3, [pc, #264]	@ (8000cc4 <main+0x1ac>)
 8000bbc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc4:	4837      	ldr	r0, [pc, #220]	@ (8000ca4 <main+0x18c>)
 8000bc6:	f7ff fd1c 	bl	8000602 <First_mode>
          First_mode(&Motor_EL, Target.Elevation);
 8000bca:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc4 <main+0x1ac>)
 8000bcc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd4:	4837      	ldr	r0, [pc, #220]	@ (8000cb4 <main+0x19c>)
 8000bd6:	f7ff fd14 	bl	8000602 <First_mode>
    	  break;
 8000bda:	e017      	b.n	8000c0c <main+0xf4>
        case '1':
          Second_mode(Target.Azimuth, &Motor_AZ);
 8000bdc:	4b39      	ldr	r3, [pc, #228]	@ (8000cc4 <main+0x1ac>)
 8000bde:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000be2:	4830      	ldr	r0, [pc, #192]	@ (8000ca4 <main+0x18c>)
 8000be4:	eeb0 0a67 	vmov.f32	s0, s15
 8000be8:	f7ff fd6e 	bl	80006c8 <Second_mode>
          Second_mode(Target.Elevation, &Motor_EL);
 8000bec:	4b35      	ldr	r3, [pc, #212]	@ (8000cc4 <main+0x1ac>)
 8000bee:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000bf2:	4830      	ldr	r0, [pc, #192]	@ (8000cb4 <main+0x19c>)
 8000bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8000bf8:	f7ff fd66 	bl	80006c8 <Second_mode>
          break;
 8000bfc:	e006      	b.n	8000c0c <main+0xf4>
        case '2':
          // Проваливается в default
        default:
          Transfer_to_raspberry_pi(&huart2, &Target, &Motor_AZ, &Motor_EL);
 8000bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb4 <main+0x19c>)
 8000c00:	4a28      	ldr	r2, [pc, #160]	@ (8000ca4 <main+0x18c>)
 8000c02:	4930      	ldr	r1, [pc, #192]	@ (8000cc4 <main+0x1ac>)
 8000c04:	4830      	ldr	r0, [pc, #192]	@ (8000cc8 <main+0x1b0>)
 8000c06:	f7ff fe8b 	bl	8000920 <Transfer_to_raspberry_pi>
          break;
 8000c0a:	bf00      	nop
      switch (Target.Rx_data[15])
 8000c0c:	e047      	b.n	8000c9e <main+0x186>
      };
    }
    else
    {
      HAL_GPIO_WritePin(Motor_AZ.Config.GPIO.ENA_port, Motor_AZ.Config.GPIO.ENA_pin, Sleep);
 8000c0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ca4 <main+0x18c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	4a24      	ldr	r2, [pc, #144]	@ (8000ca4 <main+0x18c>)
 8000c14:	68d2      	ldr	r2, [r2, #12]
 8000c16:	b291      	uxth	r1, r2
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 f870 	bl	8002d00 <HAL_GPIO_WritePin>
      Motor_AZ.Status.Moving = 0;
 8000c20:	4b20      	ldr	r3, [pc, #128]	@ (8000ca4 <main+0x18c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      HAL_GPIO_WritePin(Motor_EL.Config.GPIO.ENA_port, Motor_EL.Config.GPIO.ENA_pin, Sleep);
 8000c28:	4b22      	ldr	r3, [pc, #136]	@ (8000cb4 <main+0x19c>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	4a21      	ldr	r2, [pc, #132]	@ (8000cb4 <main+0x19c>)
 8000c2e:	68d2      	ldr	r2, [r2, #12]
 8000c30:	b291      	uxth	r1, r2
 8000c32:	2201      	movs	r2, #1
 8000c34:	4618      	mov	r0, r3
 8000c36:	f002 f863 	bl	8002d00 <HAL_GPIO_WritePin>
      Motor_EL.Status.Moving = 0;
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb4 <main+0x19c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      HAL_Delay(500);
 8000c42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c46:	f000 ffbf 	bl	8001bc8 <HAL_Delay>

      if (!Working_zon_az) Moving_away_from_borders(&Motor_AZ, Motor_AZ.Status.Angular > 0 ? Right : Left);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d113      	bne.n	8000c78 <main+0x160>
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <main+0x18c>)
 8000c52:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000c56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5e:	bfcc      	ite	gt
 8000c60:	2301      	movgt	r3, #1
 8000c62:	2300      	movle	r3, #0
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	f083 0301 	eor.w	r3, r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480c      	ldr	r0, [pc, #48]	@ (8000ca4 <main+0x18c>)
 8000c72:	f7ff fcf5 	bl	8000660 <Moving_away_from_borders>
 8000c76:	e781      	b.n	8000b7c <main+0x64>
      else Moving_away_from_borders(&Motor_EL, Motor_EL.Status.Angular > 0 ? Down : Up);
 8000c78:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <main+0x19c>)
 8000c7a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000c7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c86:	bfcc      	ite	gt
 8000c88:	2301      	movgt	r3, #1
 8000c8a:	2300      	movle	r3, #0
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f083 0301 	eor.w	r3, r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	4619      	mov	r1, r3
 8000c98:	4806      	ldr	r0, [pc, #24]	@ (8000cb4 <main+0x19c>)
 8000c9a:	f7ff fce1 	bl	8000660 <Moving_away_from_borders>
  {
 8000c9e:	e76d      	b.n	8000b7c <main+0x64>
 8000ca0:	20000318 	.word	0x20000318
 8000ca4:	20000048 	.word	0x20000048
 8000ca8:	200001f8 	.word	0x200001f8
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000120 	.word	0x20000120
 8000cb4:	20000088 	.word	0x20000088
 8000cb8:	200001b0 	.word	0x200001b0
 8000cbc:	20000014 	.word	0x20000014
 8000cc0:	20000168 	.word	0x20000168
 8000cc4:	200000c8 	.word	0x200000c8
 8000cc8:	200002d0 	.word	0x200002d0
 8000ccc:	20000240 	.word	0x20000240
 8000cd0:	20000288 	.word	0x20000288

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b094      	sub	sp, #80	@ 0x50
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 0320 	add.w	r3, r7, #32
 8000cde:	2230      	movs	r2, #48	@ 0x30
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f004 fc8e 	bl	8005604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	4b28      	ldr	r3, [pc, #160]	@ (8000da0 <SystemClock_Config+0xcc>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d00:	4a27      	ldr	r2, [pc, #156]	@ (8000da0 <SystemClock_Config+0xcc>)
 8000d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d08:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <SystemClock_Config+0xcc>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <SystemClock_Config+0xd0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a21      	ldr	r2, [pc, #132]	@ (8000da4 <SystemClock_Config+0xd0>)
 8000d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <SystemClock_Config+0xd0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d30:	2301      	movs	r3, #1
 8000d32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d44:	2308      	movs	r3, #8
 8000d46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d48:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d52:	2304      	movs	r3, #4
 8000d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d56:	f107 0320 	add.w	r3, r7, #32
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f001 ffea 	bl	8002d34 <HAL_RCC_OscConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d66:	f000 fc03 	bl	8001570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d76:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	2105      	movs	r1, #5
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f002 fa4b 	bl	8003224 <HAL_RCC_ClockConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d94:	f000 fbec 	bl	8001570 <Error_Handler>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3750      	adds	r7, #80	@ 0x50
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40007000 	.word	0x40007000

08000da8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dba:	4b21      	ldr	r3, [pc, #132]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000dbc:	4a21      	ldr	r2, [pc, #132]	@ (8000e44 <MX_ADC1_Init+0x9c>)
 8000dbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000dc2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000dc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dda:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de2:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de8:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000dea:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <MX_ADC1_Init+0xa0>)
 8000dec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dee:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000df4:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e02:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e08:	480d      	ldr	r0, [pc, #52]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000e0a:	f000 ff01 	bl	8001c10 <HAL_ADC_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e14:	f000 fbac 	bl	8001570 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e18:	230e      	movs	r3, #14
 8000e1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <MX_ADC1_Init+0x98>)
 8000e2a:	f001 fa01 	bl	8002230 <HAL_ADC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e34:	f000 fb9c 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000120 	.word	0x20000120
 8000e44:	40012000 	.word	0x40012000
 8000e48:	0f000001 	.word	0x0f000001

08000e4c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e52:	463b      	mov	r3, r7
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000e5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <MX_ADC2_Init+0x98>)
 8000e60:	4a21      	ldr	r2, [pc, #132]	@ (8000ee8 <MX_ADC2_Init+0x9c>)
 8000e62:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee4 <MX_ADC2_Init+0x98>)
 8000e66:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e6a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee4 <MX_ADC2_Init+0x98>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000e72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee4 <MX_ADC2_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <MX_ADC2_Init+0x98>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <MX_ADC2_Init+0x98>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e86:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <MX_ADC2_Init+0x98>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <MX_ADC2_Init+0x98>)
 8000e8e:	4a17      	ldr	r2, [pc, #92]	@ (8000eec <MX_ADC2_Init+0xa0>)
 8000e90:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e92:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <MX_ADC2_Init+0x98>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <MX_ADC2_Init+0x98>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <MX_ADC2_Init+0x98>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <MX_ADC2_Init+0x98>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000eac:	480d      	ldr	r0, [pc, #52]	@ (8000ee4 <MX_ADC2_Init+0x98>)
 8000eae:	f000 feaf 	bl	8001c10 <HAL_ADC_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000eb8:	f000 fb5a 	bl	8001570 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ec8:	463b      	mov	r3, r7
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <MX_ADC2_Init+0x98>)
 8000ece:	f001 f9af 	bl	8002230 <HAL_ADC_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000ed8:	f000 fb4a 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000168 	.word	0x20000168
 8000ee8:	40012100 	.word	0x40012100
 8000eec:	0f000001 	.word	0x0f000001

08000ef0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef6:	f107 0320 	add.w	r3, r7, #32
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
 8000f0e:	615a      	str	r2, [r3, #20]
 8000f10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f12:	4b23      	ldr	r3, [pc, #140]	@ (8000fa0 <MX_TIM2_Init+0xb0>)
 8000f14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <MX_TIM2_Init+0xb0>)
 8000f1c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f22:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa0 <MX_TIM2_Init+0xb0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <MX_TIM2_Init+0xb0>)
 8000f2a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f30:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa0 <MX_TIM2_Init+0xb0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <MX_TIM2_Init+0xb0>)
 8000f38:	2280      	movs	r2, #128	@ 0x80
 8000f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f3c:	4818      	ldr	r0, [pc, #96]	@ (8000fa0 <MX_TIM2_Init+0xb0>)
 8000f3e:	f002 fc01 	bl	8003744 <HAL_TIM_PWM_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000f48:	f000 fb12 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f54:	f107 0320 	add.w	r3, r7, #32
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4811      	ldr	r0, [pc, #68]	@ (8000fa0 <MX_TIM2_Init+0xb0>)
 8000f5c:	f003 fb0e 	bl	800457c <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000f66:	f000 fb03 	bl	8001570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f6a:	2360      	movs	r3, #96	@ 0x60
 8000f6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000f6e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4619      	mov	r1, r3
 8000f82:	4807      	ldr	r0, [pc, #28]	@ (8000fa0 <MX_TIM2_Init+0xb0>)
 8000f84:	f002 ff8a 	bl	8003e9c <HAL_TIM_PWM_ConfigChannel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000f8e:	f000 faef 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f92:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <MX_TIM2_Init+0xb0>)
 8000f94:	f000 fc60 	bl	8001858 <HAL_TIM_MspPostInit>

}
 8000f98:	bf00      	nop
 8000f9a:	3728      	adds	r7, #40	@ 0x28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200001b0 	.word	0x200001b0

08000fa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	@ 0x28
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]
 8000fc2:	615a      	str	r2, [r3, #20]
 8000fc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fc6:	4b22      	ldr	r3, [pc, #136]	@ (8001050 <MX_TIM3_Init+0xac>)
 8000fc8:	4a22      	ldr	r2, [pc, #136]	@ (8001054 <MX_TIM3_Init+0xb0>)
 8000fca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000fcc:	4b20      	ldr	r3, [pc, #128]	@ (8001050 <MX_TIM3_Init+0xac>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001050 <MX_TIM3_Init+0xac>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <MX_TIM3_Init+0xac>)
 8000fda:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fde:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <MX_TIM3_Init+0xac>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <MX_TIM3_Init+0xac>)
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fec:	4818      	ldr	r0, [pc, #96]	@ (8001050 <MX_TIM3_Init+0xac>)
 8000fee:	f002 fba9 	bl	8003744 <HAL_TIM_PWM_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ff8:	f000 faba 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001004:	f107 0320 	add.w	r3, r7, #32
 8001008:	4619      	mov	r1, r3
 800100a:	4811      	ldr	r0, [pc, #68]	@ (8001050 <MX_TIM3_Init+0xac>)
 800100c:	f003 fab6 	bl	800457c <HAL_TIMEx_MasterConfigSynchronization>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001016:	f000 faab 	bl	8001570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800101a:	2360      	movs	r3, #96	@ 0x60
 800101c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800101e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001022:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	4807      	ldr	r0, [pc, #28]	@ (8001050 <MX_TIM3_Init+0xac>)
 8001034:	f002 ff32 	bl	8003e9c <HAL_TIM_PWM_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800103e:	f000 fa97 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001042:	4803      	ldr	r0, [pc, #12]	@ (8001050 <MX_TIM3_Init+0xac>)
 8001044:	f000 fc08 	bl	8001858 <HAL_TIM_MspPostInit>

}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	@ 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200001f8 	.word	0x200001f8
 8001054:	40000400 	.word	0x40000400

08001058 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08c      	sub	sp, #48	@ 0x30
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	2224      	movs	r2, #36	@ 0x24
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f004 facc 	bl	8005604 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001074:	4b20      	ldr	r3, [pc, #128]	@ (80010f8 <MX_TIM4_Init+0xa0>)
 8001076:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <MX_TIM4_Init+0xa4>)
 8001078:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800107a:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <MX_TIM4_Init+0xa0>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <MX_TIM4_Init+0xa0>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001086:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <MX_TIM4_Init+0xa0>)
 8001088:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800108c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108e:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <MX_TIM4_Init+0xa0>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001094:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <MX_TIM4_Init+0xa0>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800109a:	2301      	movs	r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010a2:	2301      	movs	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010b2:	2301      	movs	r3, #1
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	4619      	mov	r1, r3
 80010c4:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <MX_TIM4_Init+0xa0>)
 80010c6:	f002 fcc5 	bl	8003a54 <HAL_TIM_Encoder_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80010d0:	f000 fa4e 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_TIM4_Init+0xa0>)
 80010e2:	f003 fa4b 	bl	800457c <HAL_TIMEx_MasterConfigSynchronization>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80010ec:	f000 fa40 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3730      	adds	r7, #48	@ 0x30
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000240 	.word	0x20000240
 80010fc:	40000800 	.word	0x40000800

08001100 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	@ 0x30
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2224      	movs	r2, #36	@ 0x24
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f004 fa78 	bl	8005604 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800111c:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <MX_TIM5_Init+0xa0>)
 800111e:	4a21      	ldr	r2, [pc, #132]	@ (80011a4 <MX_TIM5_Init+0xa4>)
 8001120:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_TIM5_Init+0xa0>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <MX_TIM5_Init+0xa0>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800112e:	4b1c      	ldr	r3, [pc, #112]	@ (80011a0 <MX_TIM5_Init+0xa0>)
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001136:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <MX_TIM5_Init+0xa0>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113c:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <MX_TIM5_Init+0xa0>)
 800113e:	2200      	movs	r2, #0
 8001140:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001142:	2301      	movs	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800114a:	2301      	movs	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800115a:	2301      	movs	r3, #1
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4619      	mov	r1, r3
 800116c:	480c      	ldr	r0, [pc, #48]	@ (80011a0 <MX_TIM5_Init+0xa0>)
 800116e:	f002 fc71 	bl	8003a54 <HAL_TIM_Encoder_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001178:	f000 f9fa 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	@ (80011a0 <MX_TIM5_Init+0xa0>)
 800118a:	f003 f9f7 	bl	800457c <HAL_TIMEx_MasterConfigSynchronization>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001194:	f000 f9ec 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	3730      	adds	r7, #48	@ 0x30
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000288 	.word	0x20000288
 80011a4:	40000c00 	.word	0x40000c00

080011a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	@ (80011f8 <MX_USART2_UART_Init+0x50>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80011b2:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011b4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80011b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011e0:	f003 fa5c 	bl	800469c <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ea:	f000 f9c1 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200002d0 	.word	0x200002d0
 80011f8:	40004400 	.word	0x40004400

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	@ 0x30
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	4b52      	ldr	r3, [pc, #328]	@ (8001360 <MX_GPIO_Init+0x164>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a51      	ldr	r2, [pc, #324]	@ (8001360 <MX_GPIO_Init+0x164>)
 800121c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b4f      	ldr	r3, [pc, #316]	@ (8001360 <MX_GPIO_Init+0x164>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800122a:	61bb      	str	r3, [r7, #24]
 800122c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	4b4b      	ldr	r3, [pc, #300]	@ (8001360 <MX_GPIO_Init+0x164>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a4a      	ldr	r2, [pc, #296]	@ (8001360 <MX_GPIO_Init+0x164>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b48      	ldr	r3, [pc, #288]	@ (8001360 <MX_GPIO_Init+0x164>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b44      	ldr	r3, [pc, #272]	@ (8001360 <MX_GPIO_Init+0x164>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a43      	ldr	r2, [pc, #268]	@ (8001360 <MX_GPIO_Init+0x164>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b41      	ldr	r3, [pc, #260]	@ (8001360 <MX_GPIO_Init+0x164>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b3d      	ldr	r3, [pc, #244]	@ (8001360 <MX_GPIO_Init+0x164>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a3c      	ldr	r2, [pc, #240]	@ (8001360 <MX_GPIO_Init+0x164>)
 8001270:	f043 0310 	orr.w	r3, r3, #16
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b3a      	ldr	r3, [pc, #232]	@ (8001360 <MX_GPIO_Init+0x164>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	4b36      	ldr	r3, [pc, #216]	@ (8001360 <MX_GPIO_Init+0x164>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a35      	ldr	r2, [pc, #212]	@ (8001360 <MX_GPIO_Init+0x164>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b33      	ldr	r3, [pc, #204]	@ (8001360 <MX_GPIO_Init+0x164>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001360 <MX_GPIO_Init+0x164>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001360 <MX_GPIO_Init+0x164>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001360 <MX_GPIO_Init+0x164>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Work_permit_GPIO_Port, Work_permit_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2102      	movs	r1, #2
 80012be:	4829      	ldr	r0, [pc, #164]	@ (8001364 <MX_GPIO_Init+0x168>)
 80012c0:	f001 fd1e 	bl	8002d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_AZ_Pin|DIR_EL_Pin|Trigger_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 510c 	mov.w	r1, #8960	@ 0x2300
 80012ca:	4827      	ldr	r0, [pc, #156]	@ (8001368 <MX_GPIO_Init+0x16c>)
 80012cc:	f001 fd18 	bl	8002d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ENA_AZ_Pin|ENA_EL_Pin, GPIO_PIN_SET);
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80012d6:	4824      	ldr	r0, [pc, #144]	@ (8001368 <MX_GPIO_Init+0x16c>)
 80012d8:	f001 fd12 	bl	8002d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_green_Pin|LD3_orange_Pin|LD5_red_Pin|LD6_blue_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80012e2:	4822      	ldr	r0, [pc, #136]	@ (800136c <MX_GPIO_Init+0x170>)
 80012e4:	f001 fd0c 	bl	8002d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Trigger_position_Pin */
  GPIO_InitStruct.Pin = Trigger_position_Pin;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Trigger_position_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	481a      	ldr	r0, [pc, #104]	@ (8001364 <MX_GPIO_Init+0x168>)
 80012fc:	f001 fb64 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Work_permit_Pin */
  GPIO_InitStruct.Pin = Work_permit_Pin;
 8001300:	2302      	movs	r3, #2
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Work_permit_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	4813      	ldr	r0, [pc, #76]	@ (8001364 <MX_GPIO_Init+0x168>)
 8001318:	f001 fb56 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_AZ_Pin DIR_EL_Pin ENA_AZ_Pin ENA_EL_Pin
                           Trigger_Pin */
  GPIO_InitStruct.Pin = DIR_AZ_Pin|DIR_EL_Pin|ENA_AZ_Pin|ENA_EL_Pin
 800131c:	f44f 536c 	mov.w	r3, #15104	@ 0x3b00
 8001320:	61fb      	str	r3, [r7, #28]
                          |Trigger_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	480c      	ldr	r0, [pc, #48]	@ (8001368 <MX_GPIO_Init+0x16c>)
 8001336:	f001 fb47 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_green_Pin LD3_orange_Pin LD5_red_Pin LD6_blue_Pin */
  GPIO_InitStruct.Pin = LD4_green_Pin|LD3_orange_Pin|LD5_red_Pin|LD6_blue_Pin;
 800133a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	@ (800136c <MX_GPIO_Init+0x170>)
 8001354:	f001 fb38 	bl	80029c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001358:	bf00      	nop
 800135a:	3730      	adds	r7, #48	@ 0x30
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40020800 	.word	0x40020800
 8001368:	40021000 	.word	0x40021000
 800136c:	40020c00 	.word	0x40020c00

08001370 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	Target.Rx_data[Size_Rx_UART - 1] = '\0';
 8001378:	4b45      	ldr	r3, [pc, #276]	@ (8001490 <HAL_UART_RxCpltCallback+0x120>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3b01      	subs	r3, #1
 800137e:	4a45      	ldr	r2, [pc, #276]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 8001380:	2100      	movs	r1, #0
 8001382:	54d1      	strb	r1, [r2, r3]

	Target.Azimuth =   (Target.Rx_data[3]  - '0') * 100.0f +
 8001384:	4b43      	ldr	r3, [pc, #268]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 8001386:	78db      	ldrb	r3, [r3, #3]
 8001388:	3b30      	subs	r3, #48	@ 0x30
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001392:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001498 <HAL_UART_RxCpltCallback+0x128>
 8001396:	ee27 7a87 	vmul.f32	s14, s15, s14
			(Target.Rx_data[4]  - '0') * 10.0f +
 800139a:	4b3e      	ldr	r3, [pc, #248]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 800139c:	791b      	ldrb	r3, [r3, #4]
 800139e:	3b30      	subs	r3, #48	@ 0x30
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80013ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Target.Azimuth =   (Target.Rx_data[3]  - '0') * 100.0f +
 80013b0:	ee37 7a27 	vadd.f32	s14, s14, s15
			(Target.Rx_data[5]  - '0') +
 80013b4:	4b37      	ldr	r3, [pc, #220]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 80013b6:	795b      	ldrb	r3, [r3, #5]
 80013b8:	3b30      	subs	r3, #48	@ 0x30
			(Target.Rx_data[4]  - '0') * 10.0f +
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c2:	ee37 7a27 	vadd.f32	s14, s14, s15
			(Target.Rx_data[6]  - '0') * 0.1f;
 80013c6:	4b33      	ldr	r3, [pc, #204]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 80013c8:	799b      	ldrb	r3, [r3, #6]
 80013ca:	3b30      	subs	r3, #48	@ 0x30
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d4:	eddf 6a31 	vldr	s13, [pc, #196]	@ 800149c <HAL_UART_RxCpltCallback+0x12c>
 80013d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
			(Target.Rx_data[5]  - '0') +
 80013dc:	ee77 7a27 	vadd.f32	s15, s14, s15
	Target.Azimuth =   (Target.Rx_data[3]  - '0') * 100.0f +
 80013e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 80013e2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	if (Target.Rx_data[2] == '-') Target.Azimuth = -Target.Azimuth;
 80013e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 80013e8:	789b      	ldrb	r3, [r3, #2]
 80013ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80013ec:	d107      	bne.n	80013fe <HAL_UART_RxCpltCallback+0x8e>
 80013ee:	4b29      	ldr	r3, [pc, #164]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 80013f0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80013f4:	eef1 7a67 	vneg.f32	s15, s15
 80013f8:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 80013fa:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	Target.Elevation = (Target.Rx_data[10] - '0') * 100.0f +
 80013fe:	4b25      	ldr	r3, [pc, #148]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 8001400:	7a9b      	ldrb	r3, [r3, #10]
 8001402:	3b30      	subs	r3, #48	@ 0x30
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001498 <HAL_UART_RxCpltCallback+0x128>
 8001410:	ee27 7a87 	vmul.f32	s14, s15, s14
			(Target.Rx_data[11] - '0') * 10.0f +
 8001414:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 8001416:	7adb      	ldrb	r3, [r3, #11]
 8001418:	3b30      	subs	r3, #48	@ 0x30
 800141a:	ee07 3a90 	vmov	s15, r3
 800141e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001422:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001426:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Target.Elevation = (Target.Rx_data[10] - '0') * 100.0f +
 800142a:	ee37 7a27 	vadd.f32	s14, s14, s15
			(Target.Rx_data[12] - '0') +
 800142e:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 8001430:	7b1b      	ldrb	r3, [r3, #12]
 8001432:	3b30      	subs	r3, #48	@ 0x30
			(Target.Rx_data[11] - '0') * 10.0f +
 8001434:	ee07 3a90 	vmov	s15, r3
 8001438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143c:	ee37 7a27 	vadd.f32	s14, s14, s15
			(Target.Rx_data[13] - '0') * 0.1f;
 8001440:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 8001442:	7b5b      	ldrb	r3, [r3, #13]
 8001444:	3b30      	subs	r3, #48	@ 0x30
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144e:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800149c <HAL_UART_RxCpltCallback+0x12c>
 8001452:	ee67 7aa6 	vmul.f32	s15, s15, s13
			(Target.Rx_data[12] - '0') +
 8001456:	ee77 7a27 	vadd.f32	s15, s14, s15
	Target.Elevation = (Target.Rx_data[10] - '0') * 100.0f +
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 800145c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	if (Target.Rx_data[9] == '-') Target.Elevation = -Target.Elevation;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 8001462:	7a5b      	ldrb	r3, [r3, #9]
 8001464:	2b2d      	cmp	r3, #45	@ 0x2d
 8001466:	d107      	bne.n	8001478 <HAL_UART_RxCpltCallback+0x108>
 8001468:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 800146a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800146e:	eef1 7a67 	vneg.f32	s15, s15
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 8001474:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	HAL_UART_Receive_IT(&huart2, (uint8_t*)Target.Rx_data, Size_Rx_UART);
 8001478:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <HAL_UART_RxCpltCallback+0x120>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	4904      	ldr	r1, [pc, #16]	@ (8001494 <HAL_UART_RxCpltCallback+0x124>)
 8001482:	4807      	ldr	r0, [pc, #28]	@ (80014a0 <HAL_UART_RxCpltCallback+0x130>)
 8001484:	f003 f990 	bl	80047a8 <HAL_UART_Receive_IT>
};
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000318 	.word	0x20000318
 8001494:	200000c8 	.word	0x200000c8
 8001498:	42c80000 	.word	0x42c80000
 800149c:	3dcccccd 	.word	0x3dcccccd
 80014a0:	200002d0 	.word	0x200002d0

080014a4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
    Target.transmitting = 0;  // Сброс флага после передачи
 80014ac:	4b04      	ldr	r3, [pc, #16]	@ (80014c0 <HAL_UART_TxCpltCallback+0x1c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	200000c8 	.word	0x200000c8

080014c4 <TIM5_IRQHandler>:

// Обработчик прерывания для азимута (TIM5)
void TIM5_IRQHandler(void) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    if (__HAL_TIM_GET_FLAG(&htim5, TIM_FLAG_UPDATE)) {
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <TIM5_IRQHandler+0x4c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d116      	bne.n	8001504 <TIM5_IRQHandler+0x40>
        __HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <TIM5_IRQHandler+0x4c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f06f 0201 	mvn.w	r2, #1
 80014de:	611a      	str	r2, [r3, #16]

        if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim5)) {
 80014e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <TIM5_IRQHandler+0x4c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b10      	cmp	r3, #16
 80014ec:	d105      	bne.n	80014fa <TIM5_IRQHandler+0x36>
        	Encoder_AZ.total_counts -= 4294967295;
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <TIM5_IRQHandler+0x50>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3301      	adds	r3, #1
 80014f4:	4a07      	ldr	r2, [pc, #28]	@ (8001514 <TIM5_IRQHandler+0x50>)
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	e004      	b.n	8001504 <TIM5_IRQHandler+0x40>
        } else {
        	Encoder_AZ.total_counts += 4294967295;
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <TIM5_IRQHandler+0x50>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3b01      	subs	r3, #1
 8001500:	4a04      	ldr	r2, [pc, #16]	@ (8001514 <TIM5_IRQHandler+0x50>)
 8001502:	6013      	str	r3, [r2, #0]
        }
    }
    HAL_TIM_IRQHandler(&htim5);
 8001504:	4802      	ldr	r0, [pc, #8]	@ (8001510 <TIM5_IRQHandler+0x4c>)
 8001506:	f002 fbd9 	bl	8003cbc <HAL_TIM_IRQHandler>
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000288 	.word	0x20000288
 8001514:	20000028 	.word	0x20000028

08001518 <TIM4_IRQHandler>:

// Обработчик прерывания для угла места (TIM4)
void TIM4_IRQHandler(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
    if (__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE)) {
 800151c:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <TIM4_IRQHandler+0x50>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b01      	cmp	r3, #1
 8001528:	d118      	bne.n	800155c <TIM4_IRQHandler+0x44>
        __HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_UPDATE);
 800152a:	4b0f      	ldr	r3, [pc, #60]	@ (8001568 <TIM4_IRQHandler+0x50>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f06f 0201 	mvn.w	r2, #1
 8001532:	611a      	str	r2, [r3, #16]

        if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <TIM4_IRQHandler+0x50>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	2b10      	cmp	r3, #16
 8001540:	d106      	bne.n	8001550 <TIM4_IRQHandler+0x38>
        	Encoder_EL.total_counts -= 65536;
 8001542:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <TIM4_IRQHandler+0x54>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 800154a:	4a08      	ldr	r2, [pc, #32]	@ (800156c <TIM4_IRQHandler+0x54>)
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e005      	b.n	800155c <TIM4_IRQHandler+0x44>
        } else {
        	Encoder_EL.total_counts += 65536;
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <TIM4_IRQHandler+0x54>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001558:	4a04      	ldr	r2, [pc, #16]	@ (800156c <TIM4_IRQHandler+0x54>)
 800155a:	6013      	str	r3, [r2, #0]
        }
    }
    HAL_TIM_IRQHandler(&htim4);
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <TIM4_IRQHandler+0x50>)
 800155e:	f002 fbad 	bl	8003cbc <HAL_TIM_IRQHandler>
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000240 	.word	0x20000240
 800156c:	20000038 	.word	0x20000038

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
}
 8001576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <Error_Handler+0x8>

0800157c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <HAL_MspInit+0x4c>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	4a0f      	ldr	r2, [pc, #60]	@ (80015c8 <HAL_MspInit+0x4c>)
 800158c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001590:	6453      	str	r3, [r2, #68]	@ 0x44
 8001592:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <HAL_MspInit+0x4c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <HAL_MspInit+0x4c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	4a08      	ldr	r2, [pc, #32]	@ (80015c8 <HAL_MspInit+0x4c>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_MspInit+0x4c>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800

080015cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08c      	sub	sp, #48	@ 0x30
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a36      	ldr	r2, [pc, #216]	@ (80016c4 <HAL_ADC_MspInit+0xf8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d130      	bne.n	8001650 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	4b35      	ldr	r3, [pc, #212]	@ (80016c8 <HAL_ADC_MspInit+0xfc>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	4a34      	ldr	r2, [pc, #208]	@ (80016c8 <HAL_ADC_MspInit+0xfc>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fe:	4b32      	ldr	r3, [pc, #200]	@ (80016c8 <HAL_ADC_MspInit+0xfc>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	4b2e      	ldr	r3, [pc, #184]	@ (80016c8 <HAL_ADC_MspInit+0xfc>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a2d      	ldr	r2, [pc, #180]	@ (80016c8 <HAL_ADC_MspInit+0xfc>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b2b      	ldr	r3, [pc, #172]	@ (80016c8 <HAL_ADC_MspInit+0xfc>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ADC_AZ_Pin;
 8001626:	2310      	movs	r3, #16
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162a:	2303      	movs	r3, #3
 800162c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_AZ_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	4619      	mov	r1, r3
 8001638:	4824      	ldr	r0, [pc, #144]	@ (80016cc <HAL_ADC_MspInit+0x100>)
 800163a:	f001 f9c5 	bl	80029c8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2012      	movs	r0, #18
 8001644:	f001 f8f7 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001648:	2012      	movs	r0, #18
 800164a:	f001 f910 	bl	800286e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800164e:	e034      	b.n	80016ba <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1e      	ldr	r2, [pc, #120]	@ (80016d0 <HAL_ADC_MspInit+0x104>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d12f      	bne.n	80016ba <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <HAL_ADC_MspInit+0xfc>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001662:	4a19      	ldr	r2, [pc, #100]	@ (80016c8 <HAL_ADC_MspInit+0xfc>)
 8001664:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001668:	6453      	str	r3, [r2, #68]	@ 0x44
 800166a:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <HAL_ADC_MspInit+0xfc>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <HAL_ADC_MspInit+0xfc>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a12      	ldr	r2, [pc, #72]	@ (80016c8 <HAL_ADC_MspInit+0xfc>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <HAL_ADC_MspInit+0xfc>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_EL_Pin;
 8001692:	2320      	movs	r3, #32
 8001694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001696:	2303      	movs	r3, #3
 8001698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_EL_GPIO_Port, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	4809      	ldr	r0, [pc, #36]	@ (80016cc <HAL_ADC_MspInit+0x100>)
 80016a6:	f001 f98f 	bl	80029c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	2012      	movs	r0, #18
 80016b0:	f001 f8c1 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80016b4:	2012      	movs	r0, #18
 80016b6:	f001 f8da 	bl	800286e <HAL_NVIC_EnableIRQ>
}
 80016ba:	bf00      	nop
 80016bc:	3730      	adds	r7, #48	@ 0x30
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40012000 	.word	0x40012000
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020800 	.word	0x40020800
 80016d0:	40012100 	.word	0x40012100

080016d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016e4:	d116      	bne.n	8001714 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <HAL_TIM_PWM_MspInit+0x80>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	4a19      	ldr	r2, [pc, #100]	@ (8001754 <HAL_TIM_PWM_MspInit+0x80>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f6:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <HAL_TIM_PWM_MspInit+0x80>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	201c      	movs	r0, #28
 8001708:	f001 f895 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800170c:	201c      	movs	r0, #28
 800170e:	f001 f8ae 	bl	800286e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001712:	e01a      	b.n	800174a <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM3)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0f      	ldr	r2, [pc, #60]	@ (8001758 <HAL_TIM_PWM_MspInit+0x84>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d115      	bne.n	800174a <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <HAL_TIM_PWM_MspInit+0x80>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	4a0b      	ldr	r2, [pc, #44]	@ (8001754 <HAL_TIM_PWM_MspInit+0x80>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	6413      	str	r3, [r2, #64]	@ 0x40
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_TIM_PWM_MspInit+0x80>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	201d      	movs	r0, #29
 8001740:	f001 f879 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001744:	201d      	movs	r0, #29
 8001746:	f001 f892 	bl	800286e <HAL_NVIC_EnableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40000400 	.word	0x40000400

0800175c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	@ 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a32      	ldr	r2, [pc, #200]	@ (8001844 <HAL_TIM_Encoder_MspInit+0xe8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d12c      	bne.n	80017d8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	4b31      	ldr	r3, [pc, #196]	@ (8001848 <HAL_TIM_Encoder_MspInit+0xec>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	4a30      	ldr	r2, [pc, #192]	@ (8001848 <HAL_TIM_Encoder_MspInit+0xec>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	6413      	str	r3, [r2, #64]	@ 0x40
 800178e:	4b2e      	ldr	r3, [pc, #184]	@ (8001848 <HAL_TIM_Encoder_MspInit+0xec>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	4b2a      	ldr	r3, [pc, #168]	@ (8001848 <HAL_TIM_Encoder_MspInit+0xec>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a29      	ldr	r2, [pc, #164]	@ (8001848 <HAL_TIM_Encoder_MspInit+0xec>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <HAL_TIM_Encoder_MspInit+0xec>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_EL_A_Pin|Encoder_EL_B_Pin;
 80017b6:	23c0      	movs	r3, #192	@ 0xc0
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017c6:	2302      	movs	r3, #2
 80017c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4619      	mov	r1, r3
 80017d0:	481e      	ldr	r0, [pc, #120]	@ (800184c <HAL_TIM_Encoder_MspInit+0xf0>)
 80017d2:	f001 f8f9 	bl	80029c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80017d6:	e030      	b.n	800183a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001850 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d12b      	bne.n	800183a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <HAL_TIM_Encoder_MspInit+0xec>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	4a17      	ldr	r2, [pc, #92]	@ (8001848 <HAL_TIM_Encoder_MspInit+0xec>)
 80017ec:	f043 0308 	orr.w	r3, r3, #8
 80017f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <HAL_TIM_Encoder_MspInit+0xec>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <HAL_TIM_Encoder_MspInit+0xec>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a10      	ldr	r2, [pc, #64]	@ (8001848 <HAL_TIM_Encoder_MspInit+0xec>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <HAL_TIM_Encoder_MspInit+0xec>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_AZ_A_Pin|Encoder_AZ_B_Pin;
 800181a:	2303      	movs	r3, #3
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800182a:	2302      	movs	r3, #2
 800182c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 031c 	add.w	r3, r7, #28
 8001832:	4619      	mov	r1, r3
 8001834:	4807      	ldr	r0, [pc, #28]	@ (8001854 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001836:	f001 f8c7 	bl	80029c8 <HAL_GPIO_Init>
}
 800183a:	bf00      	nop
 800183c:	3730      	adds	r7, #48	@ 0x30
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40000800 	.word	0x40000800
 8001848:	40023800 	.word	0x40023800
 800184c:	40020400 	.word	0x40020400
 8001850:	40000c00 	.word	0x40000c00
 8001854:	40020000 	.word	0x40020000

08001858 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	@ 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001878:	d11e      	bne.n	80018b8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b22      	ldr	r3, [pc, #136]	@ (8001908 <HAL_TIM_MspPostInit+0xb0>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a21      	ldr	r2, [pc, #132]	@ (8001908 <HAL_TIM_MspPostInit+0xb0>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b1f      	ldr	r3, [pc, #124]	@ (8001908 <HAL_TIM_MspPostInit+0xb0>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM_EL_Pin;
 8001896:	2320      	movs	r3, #32
 8001898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018a6:	2301      	movs	r3, #1
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM_EL_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	4816      	ldr	r0, [pc, #88]	@ (800190c <HAL_TIM_MspPostInit+0xb4>)
 80018b2:	f001 f889 	bl	80029c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018b6:	e022      	b.n	80018fe <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a14      	ldr	r2, [pc, #80]	@ (8001910 <HAL_TIM_MspPostInit+0xb8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d11d      	bne.n	80018fe <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <HAL_TIM_MspPostInit+0xb0>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001908 <HAL_TIM_MspPostInit+0xb0>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001908 <HAL_TIM_MspPostInit+0xb0>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_AZ_Pin;
 80018de:	2340      	movs	r3, #64	@ 0x40
 80018e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ee:	2302      	movs	r3, #2
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM_AZ_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	4804      	ldr	r0, [pc, #16]	@ (800190c <HAL_TIM_MspPostInit+0xb4>)
 80018fa:	f001 f865 	bl	80029c8 <HAL_GPIO_Init>
}
 80018fe:	bf00      	nop
 8001900:	3728      	adds	r7, #40	@ 0x28
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	40020000 	.word	0x40020000
 8001910:	40000400 	.word	0x40000400

08001914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	@ 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a1d      	ldr	r2, [pc, #116]	@ (80019a8 <HAL_UART_MspInit+0x94>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d133      	bne.n	800199e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <HAL_UART_MspInit+0x98>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	4a1b      	ldr	r2, [pc, #108]	@ (80019ac <HAL_UART_MspInit+0x98>)
 8001940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001944:	6413      	str	r3, [r2, #64]	@ 0x40
 8001946:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <HAL_UART_MspInit+0x98>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <HAL_UART_MspInit+0x98>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	4a14      	ldr	r2, [pc, #80]	@ (80019ac <HAL_UART_MspInit+0x98>)
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	6313      	str	r3, [r2, #48]	@ 0x30
 8001962:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_UART_MspInit+0x98>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800196e:	2360      	movs	r3, #96	@ 0x60
 8001970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800197e:	2307      	movs	r3, #7
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4809      	ldr	r0, [pc, #36]	@ (80019b0 <HAL_UART_MspInit+0x9c>)
 800198a:	f001 f81d 	bl	80029c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	2026      	movs	r0, #38	@ 0x26
 8001994:	f000 ff4f 	bl	8002836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001998:	2026      	movs	r0, #38	@ 0x26
 800199a:	f000 ff68 	bl	800286e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	@ 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40004400 	.word	0x40004400
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020c00 	.word	0x40020c00

080019b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <NMI_Handler+0x4>

080019bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <HardFault_Handler+0x4>

080019c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <MemManage_Handler+0x4>

080019cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <BusFault_Handler+0x4>

080019d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <UsageFault_Handler+0x4>

080019dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0a:	f000 f8bd 	bl	8001b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a18:	4803      	ldr	r0, [pc, #12]	@ (8001a28 <ADC_IRQHandler+0x14>)
 8001a1a:	f000 facd 	bl	8001fb8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001a1e:	4803      	ldr	r0, [pc, #12]	@ (8001a2c <ADC_IRQHandler+0x18>)
 8001a20:	f000 faca 	bl	8001fb8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000120 	.word	0x20000120
 8001a2c:	20000168 	.word	0x20000168

08001a30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a34:	4802      	ldr	r0, [pc, #8]	@ (8001a40 <TIM2_IRQHandler+0x10>)
 8001a36:	f002 f941 	bl	8003cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200001b0 	.word	0x200001b0

08001a44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a48:	4802      	ldr	r0, [pc, #8]	@ (8001a54 <TIM3_IRQHandler+0x10>)
 8001a4a:	f002 f937 	bl	8003cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200001f8 	.word	0x200001f8

08001a58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a5c:	4802      	ldr	r0, [pc, #8]	@ (8001a68 <USART2_IRQHandler+0x10>)
 8001a5e:	f002 fec9 	bl	80047f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200002d0 	.word	0x200002d0

08001a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <SystemInit+0x20>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a76:	4a05      	ldr	r2, [pc, #20]	@ (8001a8c <SystemInit+0x20>)
 8001a78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack     /* set stack pointer */
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ac8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a94:	f7ff ffea 	bl	8001a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a98:	480c      	ldr	r0, [pc, #48]	@ (8001acc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a9a:	490d      	ldr	r1, [pc, #52]	@ (8001ad0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8001adc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001abe:	f003 fda9 	bl	8005614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac2:	f7ff f829 	bl	8000b18 <main>
  bx  lr    
 8001ac6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad0:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8001ad4:	0800569c 	.word	0x0800569c
  ldr r2, =_sbss
 8001ad8:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8001adc:	20000320 	.word	0x20000320

08001ae0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <CAN1_RX0_IRQHandler>
	...

08001ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <HAL_Init+0x40>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <HAL_Init+0x40>)
 8001afa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a07      	ldr	r2, [pc, #28]	@ (8001b24 <HAL_Init+0x40>)
 8001b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 fe87 	bl	8002820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b12:	200f      	movs	r0, #15
 8001b14:	f000 f808 	bl	8001b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b18:	f7ff fd30 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023c00 	.word	0x40023c00

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <HAL_InitTick+0x54>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <HAL_InitTick+0x58>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 fe9f 	bl	800288a <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00e      	b.n	8001b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d80a      	bhi.n	8001b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f000 fe67 	bl	8002836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b68:	4a06      	ldr	r2, [pc, #24]	@ (8001b84 <HAL_InitTick+0x5c>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	200000f8 	.word	0x200000f8
 8001b80:	20000100 	.word	0x20000100
 8001b84:	200000fc 	.word	0x200000fc

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	@ (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000100 	.word	0x20000100
 8001bac:	2000031c 	.word	0x2000031c

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	2000031c 	.word	0x2000031c

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <HAL_Delay+0x44>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
  {
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000100 	.word	0x20000100

08001c10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e033      	b.n	8001c8e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d109      	bne.n	8001c42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fccc 	bl	80015cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d118      	bne.n	8001c80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c56:	f023 0302 	bic.w	r3, r3, #2
 8001c5a:	f043 0202 	orr.w	r2, r3, #2
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fc06 	bl	8002474 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	f023 0303 	bic.w	r3, r3, #3
 8001c76:	f043 0201 	orr.w	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c7e:	e001      	b.n	8001c84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_Start+0x1a>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e0b2      	b.n	8001e18 <HAL_ADC_Start+0x180>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d018      	beq.n	8001cfa <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd8:	4b52      	ldr	r3, [pc, #328]	@ (8001e24 <HAL_ADC_Start+0x18c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a52      	ldr	r2, [pc, #328]	@ (8001e28 <HAL_ADC_Start+0x190>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0c9a      	lsrs	r2, r3, #18
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001cec:	e002      	b.n	8001cf4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f9      	bne.n	8001cee <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d17a      	bne.n	8001dfe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d007      	beq.n	8001d3a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d32:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d46:	d106      	bne.n	8001d56 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4c:	f023 0206 	bic.w	r2, r3, #6
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d54:	e002      	b.n	8001d5c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d64:	4b31      	ldr	r3, [pc, #196]	@ (8001e2c <HAL_ADC_Start+0x194>)
 8001d66:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d70:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d12a      	bne.n	8001dd4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2b      	ldr	r2, [pc, #172]	@ (8001e30 <HAL_ADC_Start+0x198>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d015      	beq.n	8001db4 <HAL_ADC_Start+0x11c>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a29      	ldr	r2, [pc, #164]	@ (8001e34 <HAL_ADC_Start+0x19c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d105      	bne.n	8001d9e <HAL_ADC_Start+0x106>
 8001d92:	4b26      	ldr	r3, [pc, #152]	@ (8001e2c <HAL_ADC_Start+0x194>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a25      	ldr	r2, [pc, #148]	@ (8001e38 <HAL_ADC_Start+0x1a0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d136      	bne.n	8001e16 <HAL_ADC_Start+0x17e>
 8001da8:	4b20      	ldr	r3, [pc, #128]	@ (8001e2c <HAL_ADC_Start+0x194>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d130      	bne.n	8001e16 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d129      	bne.n	8001e16 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	e020      	b.n	8001e16 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a15      	ldr	r2, [pc, #84]	@ (8001e30 <HAL_ADC_Start+0x198>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d11b      	bne.n	8001e16 <HAL_ADC_Start+0x17e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d114      	bne.n	8001e16 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	e00b      	b.n	8001e16 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	f043 0210 	orr.w	r2, r3, #16
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	f043 0201 	orr.w	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	200000f8 	.word	0x200000f8
 8001e28:	431bde83 	.word	0x431bde83
 8001e2c:	40012300 	.word	0x40012300
 8001e30:	40012000 	.word	0x40012000
 8001e34:	40012100 	.word	0x40012100
 8001e38:	40012200 	.word	0x40012200

08001e3c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_Stop+0x16>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e021      	b.n	8001e96 <HAL_ADC_Stop+0x5a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	f043 0201 	orr.w	r2, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b084      	sub	sp, #16
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ebe:	d113      	bne.n	8001ee8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ece:	d10b      	bne.n	8001ee8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e063      	b.n	8001fb0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ee8:	f7ff fe62 	bl	8001bb0 <HAL_GetTick>
 8001eec:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eee:	e021      	b.n	8001f34 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef6:	d01d      	beq.n	8001f34 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d007      	beq.n	8001f0e <HAL_ADC_PollForConversion+0x6c>
 8001efe:	f7ff fe57 	bl	8001bb0 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d212      	bcs.n	8001f34 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d00b      	beq.n	8001f34 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	f043 0204 	orr.w	r2, r3, #4
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e03d      	b.n	8001fb0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d1d6      	bne.n	8001ef0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f06f 0212 	mvn.w	r2, #18
 8001f4a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d123      	bne.n	8001fae <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d11f      	bne.n	8001fae <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f74:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d111      	bne.n	8001fae <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d105      	bne.n	8001fae <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f043 0201 	orr.w	r2, r3, #1
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f003 0320 	and.w	r3, r3, #32
 8001fe6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d049      	beq.n	8002082 <HAL_ADC_IRQHandler+0xca>
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d046      	beq.n	8002082 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002004:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d12b      	bne.n	8002072 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800201e:	2b00      	cmp	r3, #0
 8002020:	d127      	bne.n	8002072 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002028:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800203a:	2b00      	cmp	r3, #0
 800203c:	d119      	bne.n	8002072 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0220 	bic.w	r2, r2, #32
 800204c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d105      	bne.n	8002072 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f8bd 	bl	80021f2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0212 	mvn.w	r2, #18
 8002080:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002090:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d057      	beq.n	8002148 <HAL_ADC_IRQHandler+0x190>
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d054      	beq.n	8002148 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d139      	bne.n	8002138 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ca:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d006      	beq.n	80020e0 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d12b      	bne.n	8002138 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d124      	bne.n	8002138 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d11d      	bne.n	8002138 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002100:	2b00      	cmp	r3, #0
 8002102:	d119      	bne.n	8002138 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002112:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d105      	bne.n	8002138 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	f043 0201 	orr.w	r2, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fa97 	bl	800266c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f06f 020c 	mvn.w	r2, #12
 8002146:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002156:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d017      	beq.n	800218e <HAL_ADC_IRQHandler+0x1d6>
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d014      	beq.n	800218e <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b01      	cmp	r3, #1
 8002170:	d10d      	bne.n	800218e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f841 	bl	8002206 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0201 	mvn.w	r2, #1
 800218c:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 0320 	and.w	r3, r3, #32
 8002194:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800219c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d015      	beq.n	80021d0 <HAL_ADC_IRQHandler+0x218>
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d012      	beq.n	80021d0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	f043 0202 	orr.w	r2, r3, #2
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f06f 0220 	mvn.w	r2, #32
 80021be:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f82a 	bl	800221a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f06f 0220 	mvn.w	r2, #32
 80021ce:	601a      	str	r2, [r3, #0]
  }
}
 80021d0:	bf00      	nop
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1c>
 8002248:	2302      	movs	r3, #2
 800224a:	e105      	b.n	8002458 <HAL_ADC_ConfigChannel+0x228>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b09      	cmp	r3, #9
 800225a:	d925      	bls.n	80022a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68d9      	ldr	r1, [r3, #12]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	3b1e      	subs	r3, #30
 8002272:	2207      	movs	r2, #7
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43da      	mvns	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	400a      	ands	r2, r1
 8002280:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68d9      	ldr	r1, [r3, #12]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	b29b      	uxth	r3, r3
 8002292:	4618      	mov	r0, r3
 8002294:	4603      	mov	r3, r0
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4403      	add	r3, r0
 800229a:	3b1e      	subs	r3, #30
 800229c:	409a      	lsls	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	e022      	b.n	80022ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6919      	ldr	r1, [r3, #16]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	2207      	movs	r2, #7
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43da      	mvns	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	400a      	ands	r2, r1
 80022ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6919      	ldr	r1, [r3, #16]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	4618      	mov	r0, r3
 80022de:	4603      	mov	r3, r0
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4403      	add	r3, r0
 80022e4:	409a      	lsls	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d824      	bhi.n	8002340 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	3b05      	subs	r3, #5
 8002308:	221f      	movs	r2, #31
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43da      	mvns	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	400a      	ands	r2, r1
 8002316:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	4618      	mov	r0, r3
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	3b05      	subs	r3, #5
 8002332:	fa00 f203 	lsl.w	r2, r0, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	635a      	str	r2, [r3, #52]	@ 0x34
 800233e:	e04c      	b.n	80023da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b0c      	cmp	r3, #12
 8002346:	d824      	bhi.n	8002392 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	3b23      	subs	r3, #35	@ 0x23
 800235a:	221f      	movs	r2, #31
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43da      	mvns	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	400a      	ands	r2, r1
 8002368:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	4618      	mov	r0, r3
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	3b23      	subs	r3, #35	@ 0x23
 8002384:	fa00 f203 	lsl.w	r2, r0, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002390:	e023      	b.n	80023da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	3b41      	subs	r3, #65	@ 0x41
 80023a4:	221f      	movs	r2, #31
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	400a      	ands	r2, r1
 80023b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	b29b      	uxth	r3, r3
 80023c0:	4618      	mov	r0, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	3b41      	subs	r3, #65	@ 0x41
 80023ce:	fa00 f203 	lsl.w	r2, r0, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023da:	4b22      	ldr	r3, [pc, #136]	@ (8002464 <HAL_ADC_ConfigChannel+0x234>)
 80023dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a21      	ldr	r2, [pc, #132]	@ (8002468 <HAL_ADC_ConfigChannel+0x238>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d109      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x1cc>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b12      	cmp	r3, #18
 80023ee:	d105      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a19      	ldr	r2, [pc, #100]	@ (8002468 <HAL_ADC_ConfigChannel+0x238>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d123      	bne.n	800244e <HAL_ADC_ConfigChannel+0x21e>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b10      	cmp	r3, #16
 800240c:	d003      	beq.n	8002416 <HAL_ADC_ConfigChannel+0x1e6>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b11      	cmp	r3, #17
 8002414:	d11b      	bne.n	800244e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b10      	cmp	r3, #16
 8002428:	d111      	bne.n	800244e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800242a:	4b10      	ldr	r3, [pc, #64]	@ (800246c <HAL_ADC_ConfigChannel+0x23c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a10      	ldr	r2, [pc, #64]	@ (8002470 <HAL_ADC_ConfigChannel+0x240>)
 8002430:	fba2 2303 	umull	r2, r3, r2, r3
 8002434:	0c9a      	lsrs	r2, r3, #18
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002440:	e002      	b.n	8002448 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	3b01      	subs	r3, #1
 8002446:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f9      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40012300 	.word	0x40012300
 8002468:	40012000 	.word	0x40012000
 800246c:	200000f8 	.word	0x200000f8
 8002470:	431bde83 	.word	0x431bde83

08002474 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800247c:	4b79      	ldr	r3, [pc, #484]	@ (8002664 <ADC_Init+0x1f0>)
 800247e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	431a      	orrs	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	021a      	lsls	r2, r3, #8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80024cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6899      	ldr	r1, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002506:	4a58      	ldr	r2, [pc, #352]	@ (8002668 <ADC_Init+0x1f4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d022      	beq.n	8002552 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800251a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6899      	ldr	r1, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800253c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6899      	ldr	r1, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	e00f      	b.n	8002572 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002560:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002570:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0202 	bic.w	r2, r2, #2
 8002580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6899      	ldr	r1, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7e1b      	ldrb	r3, [r3, #24]
 800258c:	005a      	lsls	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d01b      	beq.n	80025d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025ae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6859      	ldr	r1, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	3b01      	subs	r3, #1
 80025cc:	035a      	lsls	r2, r3, #13
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	e007      	b.n	80025e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025e6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80025f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	3b01      	subs	r3, #1
 8002604:	051a      	lsls	r2, r3, #20
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800261c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6899      	ldr	r1, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800262a:	025a      	lsls	r2, r3, #9
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002642:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6899      	ldr	r1, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	029a      	lsls	r2, r3, #10
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	609a      	str	r2, [r3, #8]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	40012300 	.word	0x40012300
 8002668:	0f000001 	.word	0x0f000001

0800266c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b2:	4a04      	ldr	r2, [pc, #16]	@ (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	60d3      	str	r3, [r2, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026cc:	4b04      	ldr	r3, [pc, #16]	@ (80026e0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 0307 	and.w	r3, r3, #7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	db0b      	blt.n	800270e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4907      	ldr	r1, [pc, #28]	@ (800271c <__NVIC_EnableIRQ+0x38>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2001      	movs	r0, #1
 8002706:	fa00 f202 	lsl.w	r2, r0, r2
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000e100 	.word	0xe000e100

08002720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db0a      	blt.n	800274a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	490c      	ldr	r1, [pc, #48]	@ (800276c <__NVIC_SetPriority+0x4c>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	440b      	add	r3, r1
 8002744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002748:	e00a      	b.n	8002760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4908      	ldr	r1, [pc, #32]	@ (8002770 <__NVIC_SetPriority+0x50>)
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	3b04      	subs	r3, #4
 8002758:	0112      	lsls	r2, r2, #4
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	440b      	add	r3, r1
 800275e:	761a      	strb	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	@ 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f1c3 0307 	rsb	r3, r3, #7
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf28      	it	cs
 8002792:	2304      	movcs	r3, #4
 8002794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3304      	adds	r3, #4
 800279a:	2b06      	cmp	r3, #6
 800279c:	d902      	bls.n	80027a4 <NVIC_EncodePriority+0x30>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3b03      	subs	r3, #3
 80027a2:	e000      	b.n	80027a6 <NVIC_EncodePriority+0x32>
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	401a      	ands	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	4313      	orrs	r3, r2
         );
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	@ 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027ec:	d301      	bcc.n	80027f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00f      	b.n	8002812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f2:	4a0a      	ldr	r2, [pc, #40]	@ (800281c <SysTick_Config+0x40>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fa:	210f      	movs	r1, #15
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	f7ff ff8e 	bl	8002720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002804:	4b05      	ldr	r3, [pc, #20]	@ (800281c <SysTick_Config+0x40>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280a:	4b04      	ldr	r3, [pc, #16]	@ (800281c <SysTick_Config+0x40>)
 800280c:	2207      	movs	r2, #7
 800280e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	e000e010 	.word	0xe000e010

08002820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff29 	bl	8002680 <__NVIC_SetPriorityGrouping>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002848:	f7ff ff3e 	bl	80026c8 <__NVIC_GetPriorityGrouping>
 800284c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	6978      	ldr	r0, [r7, #20]
 8002854:	f7ff ff8e 	bl	8002774 <NVIC_EncodePriority>
 8002858:	4602      	mov	r2, r0
 800285a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff5d 	bl	8002720 <__NVIC_SetPriority>
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff31 	bl	80026e4 <__NVIC_EnableIRQ>
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffa2 	bl	80027dc <SysTick_Config>
 8002898:	4603      	mov	r3, r0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028b0:	f7ff f97e 	bl	8001bb0 <HAL_GetTick>
 80028b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d008      	beq.n	80028d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2280      	movs	r2, #128	@ 0x80
 80028c6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e052      	b.n	800297a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0216 	bic.w	r2, r2, #22
 80028e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d103      	bne.n	8002904 <HAL_DMA_Abort+0x62>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0208 	bic.w	r2, r2, #8
 8002912:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002924:	e013      	b.n	800294e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002926:	f7ff f943 	bl	8001bb0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b05      	cmp	r3, #5
 8002932:	d90c      	bls.n	800294e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2203      	movs	r2, #3
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e015      	b.n	800297a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1e4      	bne.n	8002926 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002960:	223f      	movs	r2, #63	@ 0x3f
 8002962:	409a      	lsls	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d004      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2280      	movs	r2, #128	@ 0x80
 800299a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e00c      	b.n	80029ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2205      	movs	r2, #5
 80029a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	@ 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	e16b      	b.n	8002cbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029e4:	2201      	movs	r2, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	f040 815a 	bne.w	8002cb6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d005      	beq.n	8002a1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d130      	bne.n	8002a7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	2203      	movs	r2, #3
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a50:	2201      	movs	r2, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 0201 	and.w	r2, r3, #1
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d017      	beq.n	8002ab8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d123      	bne.n	8002b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	08da      	lsrs	r2, r3, #3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3208      	adds	r2, #8
 8002acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	220f      	movs	r2, #15
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	08da      	lsrs	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3208      	adds	r2, #8
 8002b06:	69b9      	ldr	r1, [r7, #24]
 8002b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	2203      	movs	r2, #3
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0203 	and.w	r2, r3, #3
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80b4 	beq.w	8002cb6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b60      	ldr	r3, [pc, #384]	@ (8002cd4 <HAL_GPIO_Init+0x30c>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b56:	4a5f      	ldr	r2, [pc, #380]	@ (8002cd4 <HAL_GPIO_Init+0x30c>)
 8002b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b5e:	4b5d      	ldr	r3, [pc, #372]	@ (8002cd4 <HAL_GPIO_Init+0x30c>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b6a:	4a5b      	ldr	r2, [pc, #364]	@ (8002cd8 <HAL_GPIO_Init+0x310>)
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	089b      	lsrs	r3, r3, #2
 8002b70:	3302      	adds	r3, #2
 8002b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	220f      	movs	r2, #15
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a52      	ldr	r2, [pc, #328]	@ (8002cdc <HAL_GPIO_Init+0x314>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d02b      	beq.n	8002bee <HAL_GPIO_Init+0x226>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a51      	ldr	r2, [pc, #324]	@ (8002ce0 <HAL_GPIO_Init+0x318>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d025      	beq.n	8002bea <HAL_GPIO_Init+0x222>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a50      	ldr	r2, [pc, #320]	@ (8002ce4 <HAL_GPIO_Init+0x31c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d01f      	beq.n	8002be6 <HAL_GPIO_Init+0x21e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4f      	ldr	r2, [pc, #316]	@ (8002ce8 <HAL_GPIO_Init+0x320>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d019      	beq.n	8002be2 <HAL_GPIO_Init+0x21a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4e      	ldr	r2, [pc, #312]	@ (8002cec <HAL_GPIO_Init+0x324>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <HAL_GPIO_Init+0x216>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4d      	ldr	r2, [pc, #308]	@ (8002cf0 <HAL_GPIO_Init+0x328>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00d      	beq.n	8002bda <HAL_GPIO_Init+0x212>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4c      	ldr	r2, [pc, #304]	@ (8002cf4 <HAL_GPIO_Init+0x32c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <HAL_GPIO_Init+0x20e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4b      	ldr	r2, [pc, #300]	@ (8002cf8 <HAL_GPIO_Init+0x330>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d101      	bne.n	8002bd2 <HAL_GPIO_Init+0x20a>
 8002bce:	2307      	movs	r3, #7
 8002bd0:	e00e      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	e00c      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bd6:	2306      	movs	r3, #6
 8002bd8:	e00a      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bda:	2305      	movs	r3, #5
 8002bdc:	e008      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bde:	2304      	movs	r3, #4
 8002be0:	e006      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002be2:	2303      	movs	r3, #3
 8002be4:	e004      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e002      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_GPIO_Init+0x228>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	f002 0203 	and.w	r2, r2, #3
 8002bf6:	0092      	lsls	r2, r2, #2
 8002bf8:	4093      	lsls	r3, r2
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c00:	4935      	ldr	r1, [pc, #212]	@ (8002cd8 <HAL_GPIO_Init+0x310>)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	3302      	adds	r3, #2
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c32:	4a32      	ldr	r2, [pc, #200]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c38:	4b30      	ldr	r3, [pc, #192]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c5c:	4a27      	ldr	r2, [pc, #156]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c62:	4b26      	ldr	r3, [pc, #152]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c86:	4a1d      	ldr	r2, [pc, #116]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb0:	4a12      	ldr	r2, [pc, #72]	@ (8002cfc <HAL_GPIO_Init+0x334>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	61fb      	str	r3, [r7, #28]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b0f      	cmp	r3, #15
 8002cc0:	f67f ae90 	bls.w	80029e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3724      	adds	r7, #36	@ 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40013800 	.word	0x40013800
 8002cdc:	40020000 	.word	0x40020000
 8002ce0:	40020400 	.word	0x40020400
 8002ce4:	40020800 	.word	0x40020800
 8002ce8:	40020c00 	.word	0x40020c00
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40021400 	.word	0x40021400
 8002cf4:	40021800 	.word	0x40021800
 8002cf8:	40021c00 	.word	0x40021c00
 8002cfc:	40013c00 	.word	0x40013c00

08002d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d10:	787b      	ldrb	r3, [r7, #1]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d16:	887a      	ldrh	r2, [r7, #2]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d1c:	e003      	b.n	8002d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d1e:	887b      	ldrh	r3, [r7, #2]
 8002d20:	041a      	lsls	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	619a      	str	r2, [r3, #24]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e267      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d075      	beq.n	8002e3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d52:	4b88      	ldr	r3, [pc, #544]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d00c      	beq.n	8002d78 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d5e:	4b85      	ldr	r3, [pc, #532]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d112      	bne.n	8002d90 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d6a:	4b82      	ldr	r3, [pc, #520]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d76:	d10b      	bne.n	8002d90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d78:	4b7e      	ldr	r3, [pc, #504]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d05b      	beq.n	8002e3c <HAL_RCC_OscConfig+0x108>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d157      	bne.n	8002e3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e242      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d98:	d106      	bne.n	8002da8 <HAL_RCC_OscConfig+0x74>
 8002d9a:	4b76      	ldr	r3, [pc, #472]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a75      	ldr	r2, [pc, #468]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e01d      	b.n	8002de4 <HAL_RCC_OscConfig+0xb0>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x98>
 8002db2:	4b70      	ldr	r3, [pc, #448]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a6f      	ldr	r2, [pc, #444]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002db8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	4b6d      	ldr	r3, [pc, #436]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a6c      	ldr	r2, [pc, #432]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e00b      	b.n	8002de4 <HAL_RCC_OscConfig+0xb0>
 8002dcc:	4b69      	ldr	r3, [pc, #420]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a68      	ldr	r2, [pc, #416]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	4b66      	ldr	r3, [pc, #408]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a65      	ldr	r2, [pc, #404]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d013      	beq.n	8002e14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7fe fee0 	bl	8001bb0 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df4:	f7fe fedc 	bl	8001bb0 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	@ 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e207      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	4b5b      	ldr	r3, [pc, #364]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0xc0>
 8002e12:	e014      	b.n	8002e3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe fecc 	bl	8001bb0 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fec8 	bl	8001bb0 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	@ 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e1f3      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2e:	4b51      	ldr	r3, [pc, #324]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0xe8>
 8002e3a:	e000      	b.n	8002e3e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d063      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e56:	4b47      	ldr	r3, [pc, #284]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d11c      	bne.n	8002e9c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e62:	4b44      	ldr	r3, [pc, #272]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d116      	bne.n	8002e9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6e:	4b41      	ldr	r3, [pc, #260]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_RCC_OscConfig+0x152>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d001      	beq.n	8002e86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e1c7      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e86:	4b3b      	ldr	r3, [pc, #236]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4937      	ldr	r1, [pc, #220]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9a:	e03a      	b.n	8002f12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d020      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea4:	4b34      	ldr	r3, [pc, #208]	@ (8002f78 <HAL_RCC_OscConfig+0x244>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eaa:	f7fe fe81 	bl	8001bb0 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb2:	f7fe fe7d 	bl	8001bb0 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e1a8      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed0:	4b28      	ldr	r3, [pc, #160]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4925      	ldr	r1, [pc, #148]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	600b      	str	r3, [r1, #0]
 8002ee4:	e015      	b.n	8002f12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee6:	4b24      	ldr	r3, [pc, #144]	@ (8002f78 <HAL_RCC_OscConfig+0x244>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fe fe60 	bl	8001bb0 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef4:	f7fe fe5c 	bl	8001bb0 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e187      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f06:	4b1b      	ldr	r3, [pc, #108]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d036      	beq.n	8002f8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d016      	beq.n	8002f54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f26:	4b15      	ldr	r3, [pc, #84]	@ (8002f7c <HAL_RCC_OscConfig+0x248>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7fe fe40 	bl	8001bb0 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f34:	f7fe fe3c 	bl	8001bb0 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e167      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f46:	4b0b      	ldr	r3, [pc, #44]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0x200>
 8002f52:	e01b      	b.n	8002f8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f54:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <HAL_RCC_OscConfig+0x248>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fe29 	bl	8001bb0 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f60:	e00e      	b.n	8002f80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f62:	f7fe fe25 	bl	8001bb0 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d907      	bls.n	8002f80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e150      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
 8002f74:	40023800 	.word	0x40023800
 8002f78:	42470000 	.word	0x42470000
 8002f7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f80:	4b88      	ldr	r3, [pc, #544]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8002f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ea      	bne.n	8002f62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8097 	beq.w	80030c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9e:	4b81      	ldr	r3, [pc, #516]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10f      	bne.n	8002fca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	4b7d      	ldr	r3, [pc, #500]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	4a7c      	ldr	r2, [pc, #496]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fba:	4b7a      	ldr	r3, [pc, #488]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fca:	4b77      	ldr	r3, [pc, #476]	@ (80031a8 <HAL_RCC_OscConfig+0x474>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d118      	bne.n	8003008 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd6:	4b74      	ldr	r3, [pc, #464]	@ (80031a8 <HAL_RCC_OscConfig+0x474>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a73      	ldr	r2, [pc, #460]	@ (80031a8 <HAL_RCC_OscConfig+0x474>)
 8002fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe2:	f7fe fde5 	bl	8001bb0 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fea:	f7fe fde1 	bl	8001bb0 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e10c      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80031a8 <HAL_RCC_OscConfig+0x474>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d106      	bne.n	800301e <HAL_RCC_OscConfig+0x2ea>
 8003010:	4b64      	ldr	r3, [pc, #400]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003014:	4a63      	ldr	r2, [pc, #396]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6713      	str	r3, [r2, #112]	@ 0x70
 800301c:	e01c      	b.n	8003058 <HAL_RCC_OscConfig+0x324>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b05      	cmp	r3, #5
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0x30c>
 8003026:	4b5f      	ldr	r3, [pc, #380]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302a:	4a5e      	ldr	r2, [pc, #376]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 800302c:	f043 0304 	orr.w	r3, r3, #4
 8003030:	6713      	str	r3, [r2, #112]	@ 0x70
 8003032:	4b5c      	ldr	r3, [pc, #368]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003036:	4a5b      	ldr	r2, [pc, #364]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	6713      	str	r3, [r2, #112]	@ 0x70
 800303e:	e00b      	b.n	8003058 <HAL_RCC_OscConfig+0x324>
 8003040:	4b58      	ldr	r3, [pc, #352]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003044:	4a57      	ldr	r2, [pc, #348]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	6713      	str	r3, [r2, #112]	@ 0x70
 800304c:	4b55      	ldr	r3, [pc, #340]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003050:	4a54      	ldr	r2, [pc, #336]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003052:	f023 0304 	bic.w	r3, r3, #4
 8003056:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d015      	beq.n	800308c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003060:	f7fe fda6 	bl	8001bb0 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fe fda2 	bl	8001bb0 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0cb      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307e:	4b49      	ldr	r3, [pc, #292]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0ee      	beq.n	8003068 <HAL_RCC_OscConfig+0x334>
 800308a:	e014      	b.n	80030b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308c:	f7fe fd90 	bl	8001bb0 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003092:	e00a      	b.n	80030aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003094:	f7fe fd8c 	bl	8001bb0 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e0b5      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030aa:	4b3e      	ldr	r3, [pc, #248]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1ee      	bne.n	8003094 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030bc:	4b39      	ldr	r3, [pc, #228]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	4a38      	ldr	r2, [pc, #224]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 80030c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80a1 	beq.w	8003214 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030d2:	4b34      	ldr	r3, [pc, #208]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d05c      	beq.n	8003198 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d141      	bne.n	800316a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e6:	4b31      	ldr	r3, [pc, #196]	@ (80031ac <HAL_RCC_OscConfig+0x478>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fe fd60 	bl	8001bb0 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fe fd5c 	bl	8001bb0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e087      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003106:	4b27      	ldr	r3, [pc, #156]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69da      	ldr	r2, [r3, #28]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	019b      	lsls	r3, r3, #6
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	3b01      	subs	r3, #1
 800312c:	041b      	lsls	r3, r3, #16
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	491b      	ldr	r1, [pc, #108]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800313c:	4b1b      	ldr	r3, [pc, #108]	@ (80031ac <HAL_RCC_OscConfig+0x478>)
 800313e:	2201      	movs	r2, #1
 8003140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003142:	f7fe fd35 	bl	8001bb0 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314a:	f7fe fd31 	bl	8001bb0 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e05c      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315c:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x416>
 8003168:	e054      	b.n	8003214 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316a:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <HAL_RCC_OscConfig+0x478>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fe fd1e 	bl	8001bb0 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003178:	f7fe fd1a 	bl	8001bb0 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e045      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318a:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x444>
 8003196:	e03d      	b.n	8003214 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d107      	bne.n	80031b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e038      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40007000 	.word	0x40007000
 80031ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003220 <HAL_RCC_OscConfig+0x4ec>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d028      	beq.n	8003210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d121      	bne.n	8003210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d11a      	bne.n	8003210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031e0:	4013      	ands	r3, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d111      	bne.n	8003210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	3b01      	subs	r3, #1
 80031fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d107      	bne.n	8003210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800

08003224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0cc      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003238:	4b68      	ldr	r3, [pc, #416]	@ (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d90c      	bls.n	8003260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b65      	ldr	r3, [pc, #404]	@ (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b63      	ldr	r3, [pc, #396]	@ (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0b8      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003278:	4b59      	ldr	r3, [pc, #356]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a58      	ldr	r2, [pc, #352]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003282:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003290:	4b53      	ldr	r3, [pc, #332]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4a52      	ldr	r2, [pc, #328]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800329a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329c:	4b50      	ldr	r3, [pc, #320]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	494d      	ldr	r1, [pc, #308]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d044      	beq.n	8003344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b47      	ldr	r3, [pc, #284]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d119      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e07f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d003      	beq.n	80032e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e2:	4b3f      	ldr	r3, [pc, #252]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d109      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e06f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f2:	4b3b      	ldr	r3, [pc, #236]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e067      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003302:	4b37      	ldr	r3, [pc, #220]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f023 0203 	bic.w	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4934      	ldr	r1, [pc, #208]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	4313      	orrs	r3, r2
 8003312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003314:	f7fe fc4c 	bl	8001bb0 <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	e00a      	b.n	8003332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331c:	f7fe fc48 	bl	8001bb0 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e04f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	4b2b      	ldr	r3, [pc, #172]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 020c 	and.w	r2, r3, #12
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	429a      	cmp	r2, r3
 8003342:	d1eb      	bne.n	800331c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003344:	4b25      	ldr	r3, [pc, #148]	@ (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d20c      	bcs.n	800336c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b22      	ldr	r3, [pc, #136]	@ (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b20      	ldr	r3, [pc, #128]	@ (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e032      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003378:	4b19      	ldr	r3, [pc, #100]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4916      	ldr	r1, [pc, #88]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003396:	4b12      	ldr	r3, [pc, #72]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	490e      	ldr	r1, [pc, #56]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033aa:	f000 f821 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80033ae:	4602      	mov	r2, r0
 80033b0:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	490a      	ldr	r1, [pc, #40]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	5ccb      	ldrb	r3, [r1, r3]
 80033be:	fa22 f303 	lsr.w	r3, r2, r3
 80033c2:	4a09      	ldr	r2, [pc, #36]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033c6:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <HAL_RCC_ClockConfig+0x1c8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe fbac 	bl	8001b28 <HAL_InitTick>

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40023c00 	.word	0x40023c00
 80033e0:	40023800 	.word	0x40023800
 80033e4:	08005674 	.word	0x08005674
 80033e8:	200000f8 	.word	0x200000f8
 80033ec:	200000fc 	.word	0x200000fc

080033f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f4:	b094      	sub	sp, #80	@ 0x50
 80033f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003408:	4b79      	ldr	r3, [pc, #484]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 030c 	and.w	r3, r3, #12
 8003410:	2b08      	cmp	r3, #8
 8003412:	d00d      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x40>
 8003414:	2b08      	cmp	r3, #8
 8003416:	f200 80e1 	bhi.w	80035dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x34>
 800341e:	2b04      	cmp	r3, #4
 8003420:	d003      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0x3a>
 8003422:	e0db      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003424:	4b73      	ldr	r3, [pc, #460]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003426:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003428:	e0db      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800342a:	4b73      	ldr	r3, [pc, #460]	@ (80035f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800342c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800342e:	e0d8      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003430:	4b6f      	ldr	r3, [pc, #444]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003438:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800343a:	4b6d      	ldr	r3, [pc, #436]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d063      	beq.n	800350e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003446:	4b6a      	ldr	r3, [pc, #424]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	099b      	lsrs	r3, r3, #6
 800344c:	2200      	movs	r2, #0
 800344e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003450:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003458:	633b      	str	r3, [r7, #48]	@ 0x30
 800345a:	2300      	movs	r3, #0
 800345c:	637b      	str	r3, [r7, #52]	@ 0x34
 800345e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003462:	4622      	mov	r2, r4
 8003464:	462b      	mov	r3, r5
 8003466:	f04f 0000 	mov.w	r0, #0
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	0159      	lsls	r1, r3, #5
 8003470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003474:	0150      	lsls	r0, r2, #5
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4621      	mov	r1, r4
 800347c:	1a51      	subs	r1, r2, r1
 800347e:	6139      	str	r1, [r7, #16]
 8003480:	4629      	mov	r1, r5
 8003482:	eb63 0301 	sbc.w	r3, r3, r1
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003494:	4659      	mov	r1, fp
 8003496:	018b      	lsls	r3, r1, #6
 8003498:	4651      	mov	r1, sl
 800349a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800349e:	4651      	mov	r1, sl
 80034a0:	018a      	lsls	r2, r1, #6
 80034a2:	4651      	mov	r1, sl
 80034a4:	ebb2 0801 	subs.w	r8, r2, r1
 80034a8:	4659      	mov	r1, fp
 80034aa:	eb63 0901 	sbc.w	r9, r3, r1
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034c2:	4690      	mov	r8, r2
 80034c4:	4699      	mov	r9, r3
 80034c6:	4623      	mov	r3, r4
 80034c8:	eb18 0303 	adds.w	r3, r8, r3
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	462b      	mov	r3, r5
 80034d0:	eb49 0303 	adc.w	r3, r9, r3
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034e2:	4629      	mov	r1, r5
 80034e4:	024b      	lsls	r3, r1, #9
 80034e6:	4621      	mov	r1, r4
 80034e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034ec:	4621      	mov	r1, r4
 80034ee:	024a      	lsls	r2, r1, #9
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034f6:	2200      	movs	r2, #0
 80034f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003500:	f7fc fe62 	bl	80001c8 <__aeabi_uldivmod>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4613      	mov	r3, r2
 800350a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800350c:	e058      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350e:	4b38      	ldr	r3, [pc, #224]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	099b      	lsrs	r3, r3, #6
 8003514:	2200      	movs	r2, #0
 8003516:	4618      	mov	r0, r3
 8003518:	4611      	mov	r1, r2
 800351a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800351e:	623b      	str	r3, [r7, #32]
 8003520:	2300      	movs	r3, #0
 8003522:	627b      	str	r3, [r7, #36]	@ 0x24
 8003524:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003528:	4642      	mov	r2, r8
 800352a:	464b      	mov	r3, r9
 800352c:	f04f 0000 	mov.w	r0, #0
 8003530:	f04f 0100 	mov.w	r1, #0
 8003534:	0159      	lsls	r1, r3, #5
 8003536:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800353a:	0150      	lsls	r0, r2, #5
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4641      	mov	r1, r8
 8003542:	ebb2 0a01 	subs.w	sl, r2, r1
 8003546:	4649      	mov	r1, r9
 8003548:	eb63 0b01 	sbc.w	fp, r3, r1
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003558:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800355c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003560:	ebb2 040a 	subs.w	r4, r2, sl
 8003564:	eb63 050b 	sbc.w	r5, r3, fp
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	00eb      	lsls	r3, r5, #3
 8003572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003576:	00e2      	lsls	r2, r4, #3
 8003578:	4614      	mov	r4, r2
 800357a:	461d      	mov	r5, r3
 800357c:	4643      	mov	r3, r8
 800357e:	18e3      	adds	r3, r4, r3
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	464b      	mov	r3, r9
 8003584:	eb45 0303 	adc.w	r3, r5, r3
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003596:	4629      	mov	r1, r5
 8003598:	028b      	lsls	r3, r1, #10
 800359a:	4621      	mov	r1, r4
 800359c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035a0:	4621      	mov	r1, r4
 80035a2:	028a      	lsls	r2, r1, #10
 80035a4:	4610      	mov	r0, r2
 80035a6:	4619      	mov	r1, r3
 80035a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035aa:	2200      	movs	r2, #0
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	61fa      	str	r2, [r7, #28]
 80035b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035b4:	f7fc fe08 	bl	80001c8 <__aeabi_uldivmod>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4613      	mov	r3, r2
 80035be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035c0:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	3301      	adds	r3, #1
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80035d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035da:	e002      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035dc:	4b05      	ldr	r3, [pc, #20]	@ (80035f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80035de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3750      	adds	r7, #80	@ 0x50
 80035e8:	46bd      	mov	sp, r7
 80035ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800
 80035f4:	00f42400 	.word	0x00f42400
 80035f8:	007a1200 	.word	0x007a1200

080035fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003600:	4b03      	ldr	r3, [pc, #12]	@ (8003610 <HAL_RCC_GetHCLKFreq+0x14>)
 8003602:	681b      	ldr	r3, [r3, #0]
}
 8003604:	4618      	mov	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	200000f8 	.word	0x200000f8

08003614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003618:	f7ff fff0 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	0a9b      	lsrs	r3, r3, #10
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4903      	ldr	r1, [pc, #12]	@ (8003638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003630:	4618      	mov	r0, r3
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40023800 	.word	0x40023800
 8003638:	08005684 	.word	0x08005684

0800363c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003640:	f7ff ffdc 	bl	80035fc <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b05      	ldr	r3, [pc, #20]	@ (800365c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	0b5b      	lsrs	r3, r3, #13
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4903      	ldr	r1, [pc, #12]	@ (8003660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40023800 	.word	0x40023800
 8003660:	08005684 	.word	0x08005684

08003664 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d001      	beq.n	800367c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e04e      	b.n	800371a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a23      	ldr	r2, [pc, #140]	@ (8003728 <HAL_TIM_Base_Start_IT+0xc4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d022      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x80>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a6:	d01d      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x80>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1f      	ldr	r2, [pc, #124]	@ (800372c <HAL_TIM_Base_Start_IT+0xc8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d018      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x80>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003730 <HAL_TIM_Base_Start_IT+0xcc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d013      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x80>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003734 <HAL_TIM_Base_Start_IT+0xd0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00e      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x80>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003738 <HAL_TIM_Base_Start_IT+0xd4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d009      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x80>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a19      	ldr	r2, [pc, #100]	@ (800373c <HAL_TIM_Base_Start_IT+0xd8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x80>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a18      	ldr	r2, [pc, #96]	@ (8003740 <HAL_TIM_Base_Start_IT+0xdc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d111      	bne.n	8003708 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b06      	cmp	r3, #6
 80036f4:	d010      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003706:	e007      	b.n	8003718 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40010000 	.word	0x40010000
 800372c:	40000400 	.word	0x40000400
 8003730:	40000800 	.word	0x40000800
 8003734:	40000c00 	.word	0x40000c00
 8003738:	40010400 	.word	0x40010400
 800373c:	40014000 	.word	0x40014000
 8003740:	40001800 	.word	0x40001800

08003744 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e041      	b.n	80037da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd ffb2 	bl	80016d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 fc7e 	bl	8004084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d109      	bne.n	8003808 <HAL_TIM_PWM_Start+0x24>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	bf14      	ite	ne
 8003800:	2301      	movne	r3, #1
 8003802:	2300      	moveq	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e022      	b.n	800384e <HAL_TIM_PWM_Start+0x6a>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b04      	cmp	r3, #4
 800380c:	d109      	bne.n	8003822 <HAL_TIM_PWM_Start+0x3e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b01      	cmp	r3, #1
 8003818:	bf14      	ite	ne
 800381a:	2301      	movne	r3, #1
 800381c:	2300      	moveq	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	e015      	b.n	800384e <HAL_TIM_PWM_Start+0x6a>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b08      	cmp	r3, #8
 8003826:	d109      	bne.n	800383c <HAL_TIM_PWM_Start+0x58>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	bf14      	ite	ne
 8003834:	2301      	movne	r3, #1
 8003836:	2300      	moveq	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	e008      	b.n	800384e <HAL_TIM_PWM_Start+0x6a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	bf14      	ite	ne
 8003848:	2301      	movne	r3, #1
 800384a:	2300      	moveq	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e07c      	b.n	8003950 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d104      	bne.n	8003866 <HAL_TIM_PWM_Start+0x82>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003864:	e013      	b.n	800388e <HAL_TIM_PWM_Start+0xaa>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b04      	cmp	r3, #4
 800386a:	d104      	bne.n	8003876 <HAL_TIM_PWM_Start+0x92>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003874:	e00b      	b.n	800388e <HAL_TIM_PWM_Start+0xaa>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b08      	cmp	r3, #8
 800387a:	d104      	bne.n	8003886 <HAL_TIM_PWM_Start+0xa2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003884:	e003      	b.n	800388e <HAL_TIM_PWM_Start+0xaa>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2202      	movs	r2, #2
 800388a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2201      	movs	r2, #1
 8003894:	6839      	ldr	r1, [r7, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fe4a 	bl	8004530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003958 <HAL_TIM_PWM_Start+0x174>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d004      	beq.n	80038b0 <HAL_TIM_PWM_Start+0xcc>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a2c      	ldr	r2, [pc, #176]	@ (800395c <HAL_TIM_PWM_Start+0x178>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d101      	bne.n	80038b4 <HAL_TIM_PWM_Start+0xd0>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <HAL_TIM_PWM_Start+0xd2>
 80038b4:	2300      	movs	r3, #0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d007      	beq.n	80038ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a22      	ldr	r2, [pc, #136]	@ (8003958 <HAL_TIM_PWM_Start+0x174>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d022      	beq.n	800391a <HAL_TIM_PWM_Start+0x136>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038dc:	d01d      	beq.n	800391a <HAL_TIM_PWM_Start+0x136>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003960 <HAL_TIM_PWM_Start+0x17c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d018      	beq.n	800391a <HAL_TIM_PWM_Start+0x136>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003964 <HAL_TIM_PWM_Start+0x180>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <HAL_TIM_PWM_Start+0x136>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003968 <HAL_TIM_PWM_Start+0x184>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00e      	beq.n	800391a <HAL_TIM_PWM_Start+0x136>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a16      	ldr	r2, [pc, #88]	@ (800395c <HAL_TIM_PWM_Start+0x178>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d009      	beq.n	800391a <HAL_TIM_PWM_Start+0x136>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a18      	ldr	r2, [pc, #96]	@ (800396c <HAL_TIM_PWM_Start+0x188>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <HAL_TIM_PWM_Start+0x136>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a16      	ldr	r2, [pc, #88]	@ (8003970 <HAL_TIM_PWM_Start+0x18c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d111      	bne.n	800393e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b06      	cmp	r3, #6
 800392a:	d010      	beq.n	800394e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393c:	e007      	b.n	800394e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0201 	orr.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40010000 	.word	0x40010000
 800395c:	40010400 	.word	0x40010400
 8003960:	40000400 	.word	0x40000400
 8003964:	40000800 	.word	0x40000800
 8003968:	40000c00 	.word	0x40000c00
 800396c:	40014000 	.word	0x40014000
 8003970:	40001800 	.word	0x40001800

08003974 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	6839      	ldr	r1, [r7, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fdd2 	bl	8004530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2e      	ldr	r2, [pc, #184]	@ (8003a4c <HAL_TIM_PWM_Stop+0xd8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d004      	beq.n	80039a0 <HAL_TIM_PWM_Stop+0x2c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2d      	ldr	r2, [pc, #180]	@ (8003a50 <HAL_TIM_PWM_Stop+0xdc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d101      	bne.n	80039a4 <HAL_TIM_PWM_Stop+0x30>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <HAL_TIM_PWM_Stop+0x32>
 80039a4:	2300      	movs	r3, #0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d017      	beq.n	80039da <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6a1a      	ldr	r2, [r3, #32]
 80039b0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10f      	bne.n	80039da <HAL_TIM_PWM_Stop+0x66>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a1a      	ldr	r2, [r3, #32]
 80039c0:	f240 4344 	movw	r3, #1092	@ 0x444
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d107      	bne.n	80039da <HAL_TIM_PWM_Stop+0x66>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10f      	bne.n	8003a0a <HAL_TIM_PWM_Stop+0x96>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6a1a      	ldr	r2, [r3, #32]
 80039f0:	f240 4344 	movw	r3, #1092	@ 0x444
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d107      	bne.n	8003a0a <HAL_TIM_PWM_Stop+0x96>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0201 	bic.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d104      	bne.n	8003a1a <HAL_TIM_PWM_Stop+0xa6>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a18:	e013      	b.n	8003a42 <HAL_TIM_PWM_Stop+0xce>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d104      	bne.n	8003a2a <HAL_TIM_PWM_Stop+0xb6>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a28:	e00b      	b.n	8003a42 <HAL_TIM_PWM_Stop+0xce>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d104      	bne.n	8003a3a <HAL_TIM_PWM_Stop+0xc6>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a38:	e003      	b.n	8003a42 <HAL_TIM_PWM_Stop+0xce>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40010000 	.word	0x40010000
 8003a50:	40010400 	.word	0x40010400

08003a54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e097      	b.n	8003b98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7fd fe6d 	bl	800175c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a98:	f023 0307 	bic.w	r3, r3, #7
 8003a9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	f000 faeb 	bl	8004084 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad6:	f023 0303 	bic.w	r3, r3, #3
 8003ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003af4:	f023 030c 	bic.w	r3, r3, #12
 8003af8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	4313      	orrs	r3, r2
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	011a      	lsls	r2, r3, #4
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	031b      	lsls	r3, r3, #12
 8003b24:	4313      	orrs	r3, r2
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003b32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003b3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	4313      	orrs	r3, r2
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003bb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003bc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d110      	bne.n	8003bf2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d102      	bne.n	8003bdc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bd6:	7b7b      	ldrb	r3, [r7, #13]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d001      	beq.n	8003be0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e069      	b.n	8003cb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bf0:	e031      	b.n	8003c56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d110      	bne.n	8003c1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bf8:	7bbb      	ldrb	r3, [r7, #14]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d102      	bne.n	8003c04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bfe:	7b3b      	ldrb	r3, [r7, #12]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d001      	beq.n	8003c08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e055      	b.n	8003cb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c18:	e01d      	b.n	8003c56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d108      	bne.n	8003c32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c20:	7bbb      	ldrb	r3, [r7, #14]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d105      	bne.n	8003c32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c26:	7b7b      	ldrb	r3, [r7, #13]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d102      	bne.n	8003c32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c2c:	7b3b      	ldrb	r3, [r7, #12]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d001      	beq.n	8003c36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e03e      	b.n	8003cb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2202      	movs	r2, #2
 8003c42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2202      	movs	r2, #2
 8003c52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_TIM_Encoder_Start+0xc4>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d008      	beq.n	8003c74 <HAL_TIM_Encoder_Start+0xd4>
 8003c62:	e00f      	b.n	8003c84 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fc5f 	bl	8004530 <TIM_CCxChannelCmd>
      break;
 8003c72:	e016      	b.n	8003ca2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	2104      	movs	r1, #4
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fc57 	bl	8004530 <TIM_CCxChannelCmd>
      break;
 8003c82:	e00e      	b.n	8003ca2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fc4f 	bl	8004530 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2201      	movs	r2, #1
 8003c98:	2104      	movs	r1, #4
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fc48 	bl	8004530 <TIM_CCxChannelCmd>
      break;
 8003ca0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0201 	orr.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d020      	beq.n	8003d20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01b      	beq.n	8003d20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0202 	mvn.w	r2, #2
 8003cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f99e 	bl	8004048 <HAL_TIM_IC_CaptureCallback>
 8003d0c:	e005      	b.n	8003d1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f990 	bl	8004034 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f9a1 	bl	800405c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d020      	beq.n	8003d6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01b      	beq.n	8003d6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0204 	mvn.w	r2, #4
 8003d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2202      	movs	r2, #2
 8003d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f978 	bl	8004048 <HAL_TIM_IC_CaptureCallback>
 8003d58:	e005      	b.n	8003d66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f96a 	bl	8004034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f97b 	bl	800405c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d020      	beq.n	8003db8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01b      	beq.n	8003db8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0208 	mvn.w	r2, #8
 8003d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f952 	bl	8004048 <HAL_TIM_IC_CaptureCallback>
 8003da4:	e005      	b.n	8003db2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f944 	bl	8004034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f955 	bl	800405c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d020      	beq.n	8003e04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d01b      	beq.n	8003e04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0210 	mvn.w	r2, #16
 8003dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2208      	movs	r2, #8
 8003dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f92c 	bl	8004048 <HAL_TIM_IC_CaptureCallback>
 8003df0:	e005      	b.n	8003dfe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f91e 	bl	8004034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f92f 	bl	800405c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00c      	beq.n	8003e28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0201 	mvn.w	r2, #1
 8003e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f8fc 	bl	8004020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00c      	beq.n	8003e4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fc1e 	bl	8004688 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00c      	beq.n	8003e70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f900 	bl	8004070 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00c      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d007      	beq.n	8003e94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0220 	mvn.w	r2, #32
 8003e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fbf0 	bl	8004674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e94:	bf00      	nop
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e0ae      	b.n	8004018 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b0c      	cmp	r3, #12
 8003ec6:	f200 809f 	bhi.w	8004008 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003eca:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed0:	08003f05 	.word	0x08003f05
 8003ed4:	08004009 	.word	0x08004009
 8003ed8:	08004009 	.word	0x08004009
 8003edc:	08004009 	.word	0x08004009
 8003ee0:	08003f45 	.word	0x08003f45
 8003ee4:	08004009 	.word	0x08004009
 8003ee8:	08004009 	.word	0x08004009
 8003eec:	08004009 	.word	0x08004009
 8003ef0:	08003f87 	.word	0x08003f87
 8003ef4:	08004009 	.word	0x08004009
 8003ef8:	08004009 	.word	0x08004009
 8003efc:	08004009 	.word	0x08004009
 8003f00:	08003fc7 	.word	0x08003fc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f960 	bl	80041d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699a      	ldr	r2, [r3, #24]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0208 	orr.w	r2, r2, #8
 8003f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0204 	bic.w	r2, r2, #4
 8003f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6999      	ldr	r1, [r3, #24]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	619a      	str	r2, [r3, #24]
      break;
 8003f42:	e064      	b.n	800400e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f9b0 	bl	80042b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699a      	ldr	r2, [r3, #24]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6999      	ldr	r1, [r3, #24]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	021a      	lsls	r2, r3, #8
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	619a      	str	r2, [r3, #24]
      break;
 8003f84:	e043      	b.n	800400e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fa05 	bl	800439c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0208 	orr.w	r2, r2, #8
 8003fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69da      	ldr	r2, [r3, #28]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0204 	bic.w	r2, r2, #4
 8003fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69d9      	ldr	r1, [r3, #28]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	61da      	str	r2, [r3, #28]
      break;
 8003fc4:	e023      	b.n	800400e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fa59 	bl	8004484 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69da      	ldr	r2, [r3, #28]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69d9      	ldr	r1, [r3, #28]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	021a      	lsls	r2, r3, #8
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	61da      	str	r2, [r3, #28]
      break;
 8004006:	e002      	b.n	800400e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	75fb      	strb	r3, [r7, #23]
      break;
 800400c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004016:	7dfb      	ldrb	r3, [r7, #23]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a43      	ldr	r2, [pc, #268]	@ (80041a4 <TIM_Base_SetConfig+0x120>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d013      	beq.n	80040c4 <TIM_Base_SetConfig+0x40>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a2:	d00f      	beq.n	80040c4 <TIM_Base_SetConfig+0x40>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a40      	ldr	r2, [pc, #256]	@ (80041a8 <TIM_Base_SetConfig+0x124>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00b      	beq.n	80040c4 <TIM_Base_SetConfig+0x40>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a3f      	ldr	r2, [pc, #252]	@ (80041ac <TIM_Base_SetConfig+0x128>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d007      	beq.n	80040c4 <TIM_Base_SetConfig+0x40>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a3e      	ldr	r2, [pc, #248]	@ (80041b0 <TIM_Base_SetConfig+0x12c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_Base_SetConfig+0x40>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a3d      	ldr	r2, [pc, #244]	@ (80041b4 <TIM_Base_SetConfig+0x130>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d108      	bne.n	80040d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a32      	ldr	r2, [pc, #200]	@ (80041a4 <TIM_Base_SetConfig+0x120>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d02b      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e4:	d027      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a2f      	ldr	r2, [pc, #188]	@ (80041a8 <TIM_Base_SetConfig+0x124>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d023      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a2e      	ldr	r2, [pc, #184]	@ (80041ac <TIM_Base_SetConfig+0x128>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d01f      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a2d      	ldr	r2, [pc, #180]	@ (80041b0 <TIM_Base_SetConfig+0x12c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d01b      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a2c      	ldr	r2, [pc, #176]	@ (80041b4 <TIM_Base_SetConfig+0x130>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d017      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a2b      	ldr	r2, [pc, #172]	@ (80041b8 <TIM_Base_SetConfig+0x134>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d013      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a2a      	ldr	r2, [pc, #168]	@ (80041bc <TIM_Base_SetConfig+0x138>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d00f      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a29      	ldr	r2, [pc, #164]	@ (80041c0 <TIM_Base_SetConfig+0x13c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00b      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a28      	ldr	r2, [pc, #160]	@ (80041c4 <TIM_Base_SetConfig+0x140>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d007      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a27      	ldr	r2, [pc, #156]	@ (80041c8 <TIM_Base_SetConfig+0x144>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d003      	beq.n	8004136 <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a26      	ldr	r2, [pc, #152]	@ (80041cc <TIM_Base_SetConfig+0x148>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d108      	bne.n	8004148 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800413c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a0e      	ldr	r2, [pc, #56]	@ (80041a4 <TIM_Base_SetConfig+0x120>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <TIM_Base_SetConfig+0xf2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a10      	ldr	r2, [pc, #64]	@ (80041b4 <TIM_Base_SetConfig+0x130>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d103      	bne.n	800417e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f043 0204 	orr.w	r2, r3, #4
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	601a      	str	r2, [r3, #0]
}
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40010000 	.word	0x40010000
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800
 80041b0:	40000c00 	.word	0x40000c00
 80041b4:	40010400 	.word	0x40010400
 80041b8:	40014000 	.word	0x40014000
 80041bc:	40014400 	.word	0x40014400
 80041c0:	40014800 	.word	0x40014800
 80041c4:	40001800 	.word	0x40001800
 80041c8:	40001c00 	.word	0x40001c00
 80041cc:	40002000 	.word	0x40002000

080041d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	f023 0201 	bic.w	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0303 	bic.w	r3, r3, #3
 8004206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f023 0302 	bic.w	r3, r3, #2
 8004218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a20      	ldr	r2, [pc, #128]	@ (80042a8 <TIM_OC1_SetConfig+0xd8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_OC1_SetConfig+0x64>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a1f      	ldr	r2, [pc, #124]	@ (80042ac <TIM_OC1_SetConfig+0xdc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d10c      	bne.n	800424e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f023 0308 	bic.w	r3, r3, #8
 800423a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f023 0304 	bic.w	r3, r3, #4
 800424c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a15      	ldr	r2, [pc, #84]	@ (80042a8 <TIM_OC1_SetConfig+0xd8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d003      	beq.n	800425e <TIM_OC1_SetConfig+0x8e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a14      	ldr	r2, [pc, #80]	@ (80042ac <TIM_OC1_SetConfig+0xdc>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d111      	bne.n	8004282 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800426c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	621a      	str	r2, [r3, #32]
}
 800429c:	bf00      	nop
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	40010000 	.word	0x40010000
 80042ac:	40010400 	.word	0x40010400

080042b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	f023 0210 	bic.w	r2, r3, #16
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f023 0320 	bic.w	r3, r3, #32
 80042fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a22      	ldr	r2, [pc, #136]	@ (8004394 <TIM_OC2_SetConfig+0xe4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d003      	beq.n	8004318 <TIM_OC2_SetConfig+0x68>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a21      	ldr	r2, [pc, #132]	@ (8004398 <TIM_OC2_SetConfig+0xe8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d10d      	bne.n	8004334 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800431e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004332:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a17      	ldr	r2, [pc, #92]	@ (8004394 <TIM_OC2_SetConfig+0xe4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d003      	beq.n	8004344 <TIM_OC2_SetConfig+0x94>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a16      	ldr	r2, [pc, #88]	@ (8004398 <TIM_OC2_SetConfig+0xe8>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d113      	bne.n	800436c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800434a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40010000 	.word	0x40010000
 8004398:	40010400 	.word	0x40010400

0800439c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0303 	bic.w	r3, r3, #3
 80043d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a21      	ldr	r2, [pc, #132]	@ (800447c <TIM_OC3_SetConfig+0xe0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d003      	beq.n	8004402 <TIM_OC3_SetConfig+0x66>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a20      	ldr	r2, [pc, #128]	@ (8004480 <TIM_OC3_SetConfig+0xe4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d10d      	bne.n	800441e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800441c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a16      	ldr	r2, [pc, #88]	@ (800447c <TIM_OC3_SetConfig+0xe0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d003      	beq.n	800442e <TIM_OC3_SetConfig+0x92>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a15      	ldr	r2, [pc, #84]	@ (8004480 <TIM_OC3_SetConfig+0xe4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d113      	bne.n	8004456 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800443c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	621a      	str	r2, [r3, #32]
}
 8004470:	bf00      	nop
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	40010000 	.word	0x40010000
 8004480:	40010400 	.word	0x40010400

08004484 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	031b      	lsls	r3, r3, #12
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a12      	ldr	r2, [pc, #72]	@ (8004528 <TIM_OC4_SetConfig+0xa4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d003      	beq.n	80044ec <TIM_OC4_SetConfig+0x68>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a11      	ldr	r2, [pc, #68]	@ (800452c <TIM_OC4_SetConfig+0xa8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d109      	bne.n	8004500 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	019b      	lsls	r3, r3, #6
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	621a      	str	r2, [r3, #32]
}
 800451a:	bf00      	nop
 800451c:	371c      	adds	r7, #28
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40010000 	.word	0x40010000
 800452c:	40010400 	.word	0x40010400

08004530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	2201      	movs	r2, #1
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1a      	ldr	r2, [r3, #32]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	43db      	mvns	r3, r3
 8004552:	401a      	ands	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a1a      	ldr	r2, [r3, #32]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f003 031f 	and.w	r3, r3, #31
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	fa01 f303 	lsl.w	r3, r1, r3
 8004568:	431a      	orrs	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	621a      	str	r2, [r3, #32]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
	...

0800457c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004590:	2302      	movs	r3, #2
 8004592:	e05a      	b.n	800464a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a21      	ldr	r2, [pc, #132]	@ (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d022      	beq.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045e0:	d01d      	beq.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a1d      	ldr	r2, [pc, #116]	@ (800465c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d018      	beq.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004664 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a18      	ldr	r2, [pc, #96]	@ (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a17      	ldr	r2, [pc, #92]	@ (800466c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d004      	beq.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a15      	ldr	r2, [pc, #84]	@ (8004670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d10c      	bne.n	8004638 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004624:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	4313      	orrs	r3, r2
 800462e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40010000 	.word	0x40010000
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800
 8004664:	40000c00 	.word	0x40000c00
 8004668:	40010400 	.word	0x40010400
 800466c:	40014000 	.word	0x40014000
 8004670:	40001800 	.word	0x40001800

08004674 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e042      	b.n	8004734 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fd f926 	bl	8001914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2224      	movs	r2, #36	@ 0x24
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fd1b 	bl	800511c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695a      	ldr	r2, [r3, #20]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004704:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004714:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	4613      	mov	r3, r2
 8004748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b20      	cmp	r3, #32
 8004754:	d121      	bne.n	800479a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_UART_Transmit_IT+0x26>
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e01a      	b.n	800479c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	88fa      	ldrh	r2, [r7, #6]
 8004770:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	88fa      	ldrh	r2, [r7, #6]
 8004776:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2221      	movs	r2, #33	@ 0x21
 8004782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004794:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	e000      	b.n	800479c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800479a:	2302      	movs	r3, #2
  }
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d112      	bne.n	80047e8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <HAL_UART_Receive_IT+0x26>
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e00b      	b.n	80047ea <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047d8:	88fb      	ldrh	r3, [r7, #6]
 80047da:	461a      	mov	r2, r3
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fac8 	bl	8004d74 <UART_Start_Receive_IT>
 80047e4:	4603      	mov	r3, r0
 80047e6:	e000      	b.n	80047ea <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80047e8:	2302      	movs	r3, #2
  }
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b0ba      	sub	sp, #232	@ 0xe8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800481a:	2300      	movs	r3, #0
 800481c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004820:	2300      	movs	r3, #0
 8004822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10f      	bne.n	800485a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800483a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_UART_IRQHandler+0x66>
 8004846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fba4 	bl	8004fa0 <UART_Receive_IT>
      return;
 8004858:	e273      	b.n	8004d42 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800485a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 80de 	beq.w	8004a20 <HAL_UART_IRQHandler+0x22c>
 8004864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d106      	bne.n	800487e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004874:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80d1 	beq.w	8004a20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800487e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00b      	beq.n	80048a2 <HAL_UART_IRQHandler+0xae>
 800488a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800488e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489a:	f043 0201 	orr.w	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00b      	beq.n	80048c6 <HAL_UART_IRQHandler+0xd2>
 80048ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048be:	f043 0202 	orr.w	r2, r3, #2
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <HAL_UART_IRQHandler+0xf6>
 80048d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e2:	f043 0204 	orr.w	r2, r3, #4
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d011      	beq.n	800491a <HAL_UART_IRQHandler+0x126>
 80048f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d105      	bne.n	800490e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	f043 0208 	orr.w	r2, r3, #8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 820a 	beq.w	8004d38 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d008      	beq.n	8004942 <HAL_UART_IRQHandler+0x14e>
 8004930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fb2f 	bl	8004fa0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494c:	2b40      	cmp	r3, #64	@ 0x40
 800494e:	bf0c      	ite	eq
 8004950:	2301      	moveq	r3, #1
 8004952:	2300      	movne	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d103      	bne.n	800496e <HAL_UART_IRQHandler+0x17a>
 8004966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800496a:	2b00      	cmp	r3, #0
 800496c:	d04f      	beq.n	8004a0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fa3a 	bl	8004de8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497e:	2b40      	cmp	r3, #64	@ 0x40
 8004980:	d141      	bne.n	8004a06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3314      	adds	r3, #20
 8004988:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004998:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800499c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3314      	adds	r3, #20
 80049aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1d9      	bne.n	8004982 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d013      	beq.n	80049fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049da:	4a8a      	ldr	r2, [pc, #552]	@ (8004c04 <HAL_UART_IRQHandler+0x410>)
 80049dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fd ffcd 	bl	8002982 <HAL_DMA_Abort_IT>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d016      	beq.n	8004a1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049f8:	4610      	mov	r0, r2
 80049fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049fc:	e00e      	b.n	8004a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f9a2 	bl	8004d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a04:	e00a      	b.n	8004a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f99e 	bl	8004d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	e006      	b.n	8004a1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f99a 	bl	8004d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a1a:	e18d      	b.n	8004d38 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1c:	bf00      	nop
    return;
 8004a1e:	e18b      	b.n	8004d38 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	f040 8167 	bne.w	8004cf8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a2e:	f003 0310 	and.w	r3, r3, #16
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 8160 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a3c:	f003 0310 	and.w	r3, r3, #16
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 8159 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a46:	2300      	movs	r3, #0
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a66:	2b40      	cmp	r3, #64	@ 0x40
 8004a68:	f040 80ce 	bne.w	8004c08 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 80a9 	beq.w	8004bd4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	f080 80a2 	bcs.w	8004bd4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a96:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aa2:	f000 8088 	beq.w	8004bb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	330c      	adds	r3, #12
 8004aac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	330c      	adds	r3, #12
 8004ace:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ad2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ad6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ade:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1d9      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3314      	adds	r3, #20
 8004af8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3314      	adds	r3, #20
 8004b12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b16:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e1      	bne.n	8004af2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3314      	adds	r3, #20
 8004b34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3314      	adds	r3, #20
 8004b4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e3      	bne.n	8004b2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	330c      	adds	r3, #12
 8004b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b86:	f023 0310 	bic.w	r3, r3, #16
 8004b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	330c      	adds	r3, #12
 8004b94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b98:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b9a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ba6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e3      	bne.n	8004b74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fd fe76 	bl	80028a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f8c5 	bl	8004d5c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004bd2:	e0b3      	b.n	8004d3c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	f040 80ad 	bne.w	8004d3c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bec:	f040 80a6 	bne.w	8004d3c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f8ad 	bl	8004d5c <HAL_UARTEx_RxEventCallback>
      return;
 8004c02:	e09b      	b.n	8004d3c <HAL_UART_IRQHandler+0x548>
 8004c04:	08004eaf 	.word	0x08004eaf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 808e 	beq.w	8004d40 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8089 	beq.w	8004d40 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	330c      	adds	r3, #12
 8004c34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c38:	e853 3f00 	ldrex	r3, [r3]
 8004c3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c52:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e3      	bne.n	8004c2e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3314      	adds	r3, #20
 8004c6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	623b      	str	r3, [r7, #32]
   return(result);
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3314      	adds	r3, #20
 8004c86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e3      	bne.n	8004c66 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	330c      	adds	r3, #12
 8004cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0310 	bic.w	r3, r3, #16
 8004cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	330c      	adds	r3, #12
 8004ccc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004cd0:	61fa      	str	r2, [r7, #28]
 8004cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	69b9      	ldr	r1, [r7, #24]
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e3      	bne.n	8004cac <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cee:	4619      	mov	r1, r3
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f833 	bl	8004d5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cf6:	e023      	b.n	8004d40 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d009      	beq.n	8004d18 <HAL_UART_IRQHandler+0x524>
 8004d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f8dd 	bl	8004ed0 <UART_Transmit_IT>
    return;
 8004d16:	e014      	b.n	8004d42 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00e      	beq.n	8004d42 <HAL_UART_IRQHandler+0x54e>
 8004d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f91d 	bl	8004f70 <UART_EndTransmit_IT>
    return;
 8004d36:	e004      	b.n	8004d42 <HAL_UART_IRQHandler+0x54e>
    return;
 8004d38:	bf00      	nop
 8004d3a:	e002      	b.n	8004d42 <HAL_UART_IRQHandler+0x54e>
      return;
 8004d3c:	bf00      	nop
 8004d3e:	e000      	b.n	8004d42 <HAL_UART_IRQHandler+0x54e>
      return;
 8004d40:	bf00      	nop
  }
}
 8004d42:	37e8      	adds	r7, #232	@ 0xe8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	88fa      	ldrh	r2, [r7, #6]
 8004d92:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2222      	movs	r2, #34	@ 0x22
 8004d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d007      	beq.n	8004dba <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004db8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695a      	ldr	r2, [r3, #20]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f042 0220 	orr.w	r2, r2, #32
 8004dd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b095      	sub	sp, #84	@ 0x54
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	330c      	adds	r3, #12
 8004df6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	330c      	adds	r3, #12
 8004e0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e10:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e5      	bne.n	8004df0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3314      	adds	r3, #20
 8004e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f023 0301 	bic.w	r3, r3, #1
 8004e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3314      	adds	r3, #20
 8004e42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e5      	bne.n	8004e24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d119      	bne.n	8004e94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	330c      	adds	r3, #12
 8004e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f023 0310 	bic.w	r3, r3, #16
 8004e76:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	330c      	adds	r3, #12
 8004e7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e80:	61ba      	str	r2, [r7, #24]
 8004e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e84:	6979      	ldr	r1, [r7, #20]
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	e841 2300 	strex	r3, r2, [r1]
 8004e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1e5      	bne.n	8004e60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ea2:	bf00      	nop
 8004ea4:	3754      	adds	r7, #84	@ 0x54
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f7ff ff40 	bl	8004d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ec8:	bf00      	nop
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b21      	cmp	r3, #33	@ 0x21
 8004ee2:	d13e      	bne.n	8004f62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eec:	d114      	bne.n	8004f18 <UART_Transmit_IT+0x48>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d110      	bne.n	8004f18 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	1c9a      	adds	r2, r3, #2
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	621a      	str	r2, [r3, #32]
 8004f16:	e008      	b.n	8004f2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	1c59      	adds	r1, r3, #1
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6211      	str	r1, [r2, #32]
 8004f22:	781a      	ldrb	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	4619      	mov	r1, r3
 8004f38:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10f      	bne.n	8004f5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e000      	b.n	8004f64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f62:	2302      	movs	r3, #2
  }
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7fc fa87 	bl	80014a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08c      	sub	sp, #48	@ 0x30
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b22      	cmp	r3, #34	@ 0x22
 8004fba:	f040 80aa 	bne.w	8005112 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fc6:	d115      	bne.n	8004ff4 <UART_Receive_IT+0x54>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d111      	bne.n	8004ff4 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	1c9a      	adds	r2, r3, #2
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ff2:	e024      	b.n	800503e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005002:	d007      	beq.n	8005014 <UART_Receive_IT+0x74>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <UART_Receive_IT+0x82>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	b2da      	uxtb	r2, r3
 800501c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	e008      	b.n	8005034 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800502e:	b2da      	uxtb	r2, r3
 8005030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005032:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29b      	uxth	r3, r3
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	4619      	mov	r1, r3
 800504c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800504e:	2b00      	cmp	r3, #0
 8005050:	d15d      	bne.n	800510e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0220 	bic.w	r2, r2, #32
 8005060:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005070:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695a      	ldr	r2, [r3, #20]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0201 	bic.w	r2, r2, #1
 8005080:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005094:	2b01      	cmp	r3, #1
 8005096:	d135      	bne.n	8005104 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	330c      	adds	r3, #12
 80050a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	613b      	str	r3, [r7, #16]
   return(result);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f023 0310 	bic.w	r3, r3, #16
 80050b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	330c      	adds	r3, #12
 80050bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050be:	623a      	str	r2, [r7, #32]
 80050c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	69f9      	ldr	r1, [r7, #28]
 80050c4:	6a3a      	ldr	r2, [r7, #32]
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e5      	bne.n	800509e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b10      	cmp	r3, #16
 80050de:	d10a      	bne.n	80050f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050fa:	4619      	mov	r1, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff fe2d 	bl	8004d5c <HAL_UARTEx_RxEventCallback>
 8005102:	e002      	b.n	800510a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7fc f933 	bl	8001370 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	e002      	b.n	8005114 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	e000      	b.n	8005114 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005112:	2302      	movs	r3, #2
  }
}
 8005114:	4618      	mov	r0, r3
 8005116:	3730      	adds	r7, #48	@ 0x30
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800511c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005120:	b0c0      	sub	sp, #256	@ 0x100
 8005122:	af00      	add	r7, sp, #0
 8005124:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005138:	68d9      	ldr	r1, [r3, #12]
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	ea40 0301 	orr.w	r3, r0, r1
 8005144:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	431a      	orrs	r2, r3
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	431a      	orrs	r2, r3
 800515c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005174:	f021 010c 	bic.w	r1, r1, #12
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005182:	430b      	orrs	r3, r1
 8005184:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005196:	6999      	ldr	r1, [r3, #24]
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	ea40 0301 	orr.w	r3, r0, r1
 80051a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4b8f      	ldr	r3, [pc, #572]	@ (80053e8 <UART_SetConfig+0x2cc>)
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d005      	beq.n	80051bc <UART_SetConfig+0xa0>
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4b8d      	ldr	r3, [pc, #564]	@ (80053ec <UART_SetConfig+0x2d0>)
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d104      	bne.n	80051c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051bc:	f7fe fa3e 	bl	800363c <HAL_RCC_GetPCLK2Freq>
 80051c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80051c4:	e003      	b.n	80051ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051c6:	f7fe fa25 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 80051ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051d8:	f040 810c 	bne.w	80053f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051e0:	2200      	movs	r2, #0
 80051e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80051ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80051ee:	4622      	mov	r2, r4
 80051f0:	462b      	mov	r3, r5
 80051f2:	1891      	adds	r1, r2, r2
 80051f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80051f6:	415b      	adcs	r3, r3
 80051f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80051fe:	4621      	mov	r1, r4
 8005200:	eb12 0801 	adds.w	r8, r2, r1
 8005204:	4629      	mov	r1, r5
 8005206:	eb43 0901 	adc.w	r9, r3, r1
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800521a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800521e:	4690      	mov	r8, r2
 8005220:	4699      	mov	r9, r3
 8005222:	4623      	mov	r3, r4
 8005224:	eb18 0303 	adds.w	r3, r8, r3
 8005228:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800522c:	462b      	mov	r3, r5
 800522e:	eb49 0303 	adc.w	r3, r9, r3
 8005232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005242:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005246:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800524a:	460b      	mov	r3, r1
 800524c:	18db      	adds	r3, r3, r3
 800524e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005250:	4613      	mov	r3, r2
 8005252:	eb42 0303 	adc.w	r3, r2, r3
 8005256:	657b      	str	r3, [r7, #84]	@ 0x54
 8005258:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800525c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005260:	f7fa ffb2 	bl	80001c8 <__aeabi_uldivmod>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4b61      	ldr	r3, [pc, #388]	@ (80053f0 <UART_SetConfig+0x2d4>)
 800526a:	fba3 2302 	umull	r2, r3, r3, r2
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	011c      	lsls	r4, r3, #4
 8005272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005276:	2200      	movs	r2, #0
 8005278:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800527c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005280:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005284:	4642      	mov	r2, r8
 8005286:	464b      	mov	r3, r9
 8005288:	1891      	adds	r1, r2, r2
 800528a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800528c:	415b      	adcs	r3, r3
 800528e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005290:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005294:	4641      	mov	r1, r8
 8005296:	eb12 0a01 	adds.w	sl, r2, r1
 800529a:	4649      	mov	r1, r9
 800529c:	eb43 0b01 	adc.w	fp, r3, r1
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052b4:	4692      	mov	sl, r2
 80052b6:	469b      	mov	fp, r3
 80052b8:	4643      	mov	r3, r8
 80052ba:	eb1a 0303 	adds.w	r3, sl, r3
 80052be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052c2:	464b      	mov	r3, r9
 80052c4:	eb4b 0303 	adc.w	r3, fp, r3
 80052c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80052dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80052e0:	460b      	mov	r3, r1
 80052e2:	18db      	adds	r3, r3, r3
 80052e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80052e6:	4613      	mov	r3, r2
 80052e8:	eb42 0303 	adc.w	r3, r2, r3
 80052ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80052ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80052f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80052f6:	f7fa ff67 	bl	80001c8 <__aeabi_uldivmod>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4611      	mov	r1, r2
 8005300:	4b3b      	ldr	r3, [pc, #236]	@ (80053f0 <UART_SetConfig+0x2d4>)
 8005302:	fba3 2301 	umull	r2, r3, r3, r1
 8005306:	095b      	lsrs	r3, r3, #5
 8005308:	2264      	movs	r2, #100	@ 0x64
 800530a:	fb02 f303 	mul.w	r3, r2, r3
 800530e:	1acb      	subs	r3, r1, r3
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005316:	4b36      	ldr	r3, [pc, #216]	@ (80053f0 <UART_SetConfig+0x2d4>)
 8005318:	fba3 2302 	umull	r2, r3, r3, r2
 800531c:	095b      	lsrs	r3, r3, #5
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005324:	441c      	add	r4, r3
 8005326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800532a:	2200      	movs	r2, #0
 800532c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005330:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005334:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005338:	4642      	mov	r2, r8
 800533a:	464b      	mov	r3, r9
 800533c:	1891      	adds	r1, r2, r2
 800533e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005340:	415b      	adcs	r3, r3
 8005342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005348:	4641      	mov	r1, r8
 800534a:	1851      	adds	r1, r2, r1
 800534c:	6339      	str	r1, [r7, #48]	@ 0x30
 800534e:	4649      	mov	r1, r9
 8005350:	414b      	adcs	r3, r1
 8005352:	637b      	str	r3, [r7, #52]	@ 0x34
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005360:	4659      	mov	r1, fp
 8005362:	00cb      	lsls	r3, r1, #3
 8005364:	4651      	mov	r1, sl
 8005366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800536a:	4651      	mov	r1, sl
 800536c:	00ca      	lsls	r2, r1, #3
 800536e:	4610      	mov	r0, r2
 8005370:	4619      	mov	r1, r3
 8005372:	4603      	mov	r3, r0
 8005374:	4642      	mov	r2, r8
 8005376:	189b      	adds	r3, r3, r2
 8005378:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800537c:	464b      	mov	r3, r9
 800537e:	460a      	mov	r2, r1
 8005380:	eb42 0303 	adc.w	r3, r2, r3
 8005384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005394:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005398:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800539c:	460b      	mov	r3, r1
 800539e:	18db      	adds	r3, r3, r3
 80053a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053a2:	4613      	mov	r3, r2
 80053a4:	eb42 0303 	adc.w	r3, r2, r3
 80053a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80053b2:	f7fa ff09 	bl	80001c8 <__aeabi_uldivmod>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4b0d      	ldr	r3, [pc, #52]	@ (80053f0 <UART_SetConfig+0x2d4>)
 80053bc:	fba3 1302 	umull	r1, r3, r3, r2
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	2164      	movs	r1, #100	@ 0x64
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	3332      	adds	r3, #50	@ 0x32
 80053ce:	4a08      	ldr	r2, [pc, #32]	@ (80053f0 <UART_SetConfig+0x2d4>)
 80053d0:	fba2 2303 	umull	r2, r3, r2, r3
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	f003 0207 	and.w	r2, r3, #7
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4422      	add	r2, r4
 80053e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053e4:	e106      	b.n	80055f4 <UART_SetConfig+0x4d8>
 80053e6:	bf00      	nop
 80053e8:	40011000 	.word	0x40011000
 80053ec:	40011400 	.word	0x40011400
 80053f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053f8:	2200      	movs	r2, #0
 80053fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005402:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005406:	4642      	mov	r2, r8
 8005408:	464b      	mov	r3, r9
 800540a:	1891      	adds	r1, r2, r2
 800540c:	6239      	str	r1, [r7, #32]
 800540e:	415b      	adcs	r3, r3
 8005410:	627b      	str	r3, [r7, #36]	@ 0x24
 8005412:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005416:	4641      	mov	r1, r8
 8005418:	1854      	adds	r4, r2, r1
 800541a:	4649      	mov	r1, r9
 800541c:	eb43 0501 	adc.w	r5, r3, r1
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	00eb      	lsls	r3, r5, #3
 800542a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800542e:	00e2      	lsls	r2, r4, #3
 8005430:	4614      	mov	r4, r2
 8005432:	461d      	mov	r5, r3
 8005434:	4643      	mov	r3, r8
 8005436:	18e3      	adds	r3, r4, r3
 8005438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800543c:	464b      	mov	r3, r9
 800543e:	eb45 0303 	adc.w	r3, r5, r3
 8005442:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005452:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	f04f 0300 	mov.w	r3, #0
 800545e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005462:	4629      	mov	r1, r5
 8005464:	008b      	lsls	r3, r1, #2
 8005466:	4621      	mov	r1, r4
 8005468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800546c:	4621      	mov	r1, r4
 800546e:	008a      	lsls	r2, r1, #2
 8005470:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005474:	f7fa fea8 	bl	80001c8 <__aeabi_uldivmod>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4b60      	ldr	r3, [pc, #384]	@ (8005600 <UART_SetConfig+0x4e4>)
 800547e:	fba3 2302 	umull	r2, r3, r3, r2
 8005482:	095b      	lsrs	r3, r3, #5
 8005484:	011c      	lsls	r4, r3, #4
 8005486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800548a:	2200      	movs	r2, #0
 800548c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005490:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005494:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005498:	4642      	mov	r2, r8
 800549a:	464b      	mov	r3, r9
 800549c:	1891      	adds	r1, r2, r2
 800549e:	61b9      	str	r1, [r7, #24]
 80054a0:	415b      	adcs	r3, r3
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054a8:	4641      	mov	r1, r8
 80054aa:	1851      	adds	r1, r2, r1
 80054ac:	6139      	str	r1, [r7, #16]
 80054ae:	4649      	mov	r1, r9
 80054b0:	414b      	adcs	r3, r1
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054c0:	4659      	mov	r1, fp
 80054c2:	00cb      	lsls	r3, r1, #3
 80054c4:	4651      	mov	r1, sl
 80054c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ca:	4651      	mov	r1, sl
 80054cc:	00ca      	lsls	r2, r1, #3
 80054ce:	4610      	mov	r0, r2
 80054d0:	4619      	mov	r1, r3
 80054d2:	4603      	mov	r3, r0
 80054d4:	4642      	mov	r2, r8
 80054d6:	189b      	adds	r3, r3, r2
 80054d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054dc:	464b      	mov	r3, r9
 80054de:	460a      	mov	r2, r1
 80054e0:	eb42 0303 	adc.w	r3, r2, r3
 80054e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005500:	4649      	mov	r1, r9
 8005502:	008b      	lsls	r3, r1, #2
 8005504:	4641      	mov	r1, r8
 8005506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800550a:	4641      	mov	r1, r8
 800550c:	008a      	lsls	r2, r1, #2
 800550e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005512:	f7fa fe59 	bl	80001c8 <__aeabi_uldivmod>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4611      	mov	r1, r2
 800551c:	4b38      	ldr	r3, [pc, #224]	@ (8005600 <UART_SetConfig+0x4e4>)
 800551e:	fba3 2301 	umull	r2, r3, r3, r1
 8005522:	095b      	lsrs	r3, r3, #5
 8005524:	2264      	movs	r2, #100	@ 0x64
 8005526:	fb02 f303 	mul.w	r3, r2, r3
 800552a:	1acb      	subs	r3, r1, r3
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	3332      	adds	r3, #50	@ 0x32
 8005530:	4a33      	ldr	r2, [pc, #204]	@ (8005600 <UART_SetConfig+0x4e4>)
 8005532:	fba2 2303 	umull	r2, r3, r2, r3
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800553c:	441c      	add	r4, r3
 800553e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005542:	2200      	movs	r2, #0
 8005544:	673b      	str	r3, [r7, #112]	@ 0x70
 8005546:	677a      	str	r2, [r7, #116]	@ 0x74
 8005548:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800554c:	4642      	mov	r2, r8
 800554e:	464b      	mov	r3, r9
 8005550:	1891      	adds	r1, r2, r2
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	415b      	adcs	r3, r3
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800555c:	4641      	mov	r1, r8
 800555e:	1851      	adds	r1, r2, r1
 8005560:	6039      	str	r1, [r7, #0]
 8005562:	4649      	mov	r1, r9
 8005564:	414b      	adcs	r3, r1
 8005566:	607b      	str	r3, [r7, #4]
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005574:	4659      	mov	r1, fp
 8005576:	00cb      	lsls	r3, r1, #3
 8005578:	4651      	mov	r1, sl
 800557a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800557e:	4651      	mov	r1, sl
 8005580:	00ca      	lsls	r2, r1, #3
 8005582:	4610      	mov	r0, r2
 8005584:	4619      	mov	r1, r3
 8005586:	4603      	mov	r3, r0
 8005588:	4642      	mov	r2, r8
 800558a:	189b      	adds	r3, r3, r2
 800558c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800558e:	464b      	mov	r3, r9
 8005590:	460a      	mov	r2, r1
 8005592:	eb42 0303 	adc.w	r3, r2, r3
 8005596:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80055a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80055b0:	4649      	mov	r1, r9
 80055b2:	008b      	lsls	r3, r1, #2
 80055b4:	4641      	mov	r1, r8
 80055b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ba:	4641      	mov	r1, r8
 80055bc:	008a      	lsls	r2, r1, #2
 80055be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80055c2:	f7fa fe01 	bl	80001c8 <__aeabi_uldivmod>
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005600 <UART_SetConfig+0x4e4>)
 80055cc:	fba3 1302 	umull	r1, r3, r3, r2
 80055d0:	095b      	lsrs	r3, r3, #5
 80055d2:	2164      	movs	r1, #100	@ 0x64
 80055d4:	fb01 f303 	mul.w	r3, r1, r3
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	3332      	adds	r3, #50	@ 0x32
 80055de:	4a08      	ldr	r2, [pc, #32]	@ (8005600 <UART_SetConfig+0x4e4>)
 80055e0:	fba2 2303 	umull	r2, r3, r2, r3
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	f003 020f 	and.w	r2, r3, #15
 80055ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4422      	add	r2, r4
 80055f2:	609a      	str	r2, [r3, #8]
}
 80055f4:	bf00      	nop
 80055f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80055fa:	46bd      	mov	sp, r7
 80055fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005600:	51eb851f 	.word	0x51eb851f

08005604 <memset>:
 8005604:	4402      	add	r2, r0
 8005606:	4603      	mov	r3, r0
 8005608:	4293      	cmp	r3, r2
 800560a:	d100      	bne.n	800560e <memset+0xa>
 800560c:	4770      	bx	lr
 800560e:	f803 1b01 	strb.w	r1, [r3], #1
 8005612:	e7f9      	b.n	8005608 <memset+0x4>

08005614 <__libc_init_array>:
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	4d0d      	ldr	r5, [pc, #52]	@ (800564c <__libc_init_array+0x38>)
 8005618:	4c0d      	ldr	r4, [pc, #52]	@ (8005650 <__libc_init_array+0x3c>)
 800561a:	1b64      	subs	r4, r4, r5
 800561c:	10a4      	asrs	r4, r4, #2
 800561e:	2600      	movs	r6, #0
 8005620:	42a6      	cmp	r6, r4
 8005622:	d109      	bne.n	8005638 <__libc_init_array+0x24>
 8005624:	4d0b      	ldr	r5, [pc, #44]	@ (8005654 <__libc_init_array+0x40>)
 8005626:	4c0c      	ldr	r4, [pc, #48]	@ (8005658 <__libc_init_array+0x44>)
 8005628:	f000 f818 	bl	800565c <_init>
 800562c:	1b64      	subs	r4, r4, r5
 800562e:	10a4      	asrs	r4, r4, #2
 8005630:	2600      	movs	r6, #0
 8005632:	42a6      	cmp	r6, r4
 8005634:	d105      	bne.n	8005642 <__libc_init_array+0x2e>
 8005636:	bd70      	pop	{r4, r5, r6, pc}
 8005638:	f855 3b04 	ldr.w	r3, [r5], #4
 800563c:	4798      	blx	r3
 800563e:	3601      	adds	r6, #1
 8005640:	e7ee      	b.n	8005620 <__libc_init_array+0xc>
 8005642:	f855 3b04 	ldr.w	r3, [r5], #4
 8005646:	4798      	blx	r3
 8005648:	3601      	adds	r6, #1
 800564a:	e7f2      	b.n	8005632 <__libc_init_array+0x1e>
 800564c:	08005694 	.word	0x08005694
 8005650:	08005694 	.word	0x08005694
 8005654:	08005694 	.word	0x08005694
 8005658:	08005698 	.word	0x08005698

0800565c <_init>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	bf00      	nop
 8005660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005662:	bc08      	pop	{r3}
 8005664:	469e      	mov	lr, r3
 8005666:	4770      	bx	lr

08005668 <_fini>:
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566a:	bf00      	nop
 800566c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566e:	bc08      	pop	{r3}
 8005670:	469e      	mov	lr, r3
 8005672:	4770      	bx	lr
